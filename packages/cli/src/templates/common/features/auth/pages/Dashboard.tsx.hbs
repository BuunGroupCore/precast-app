/**
 * @fileoverview Enterprise-grade dashboard page with authentication
 * @module Dashboard
 * @requires react
 * @requires AuthProvider
 */

{{#if (eq framework "next")}}
'use client';
{{/if}}

import React, { useEffect } from 'react';
{{#if (eq framework "next")}}
import { useRouter } from 'next/navigation';
{{else if (eq framework "react")}}
import { useNavigate } from 'react-router-dom';
{{/if}}
import { useAuth } from '{{#if (eq framework "next")}}@/components/auth/AuthProvider{{else}}@/components/auth/AuthProvider{{/if}}';

/**
 * Dashboard Page Component
 * @component
 * @description Professional dashboard demonstrating authentication state management
 * @returns {JSX.Element} Dashboard component
 */
export default function DashboardPage() {
  {{#if (eq framework "next")}}
  const router = useRouter();
  {{else if (eq framework "react")}}
  const navigate = useNavigate();
  {{/if}}
  const { user, session, isLoading, isAuthenticated, signOut } = useAuth();

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      console.log('[Dashboard] No active session, redirecting to home');
      {{#if (eq framework "next")}}
      router.push('/');
      {{else if (eq framework "react")}}
      navigate('/');
      {{/if}}
    }
  }, [isLoading, isAuthenticated, {{#if (eq framework "next")}}router{{else if (eq framework "react")}}navigate{{/if}}]);

  const handleSignOut = async () => {
    try {
      await signOut();
      {{#if (eq framework "next")}}
      router.push('/');
      {{else if (eq framework "react")}}
      navigate('/');
      {{/if}}
    } catch (err) {
      console.error('[Dashboard] Sign out error:', err);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-{{#if (eq styling "tailwind")}}blue-600{{else}}primary{{/if}} mx-auto mb-4"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 mb-4">Not authenticated</p>
{{#if (eq framework "next")}}
          <button
            onClick={() => router.push('/')}
            className="px-4 py-2 bg-blue-600 text-white font-bold rounded hover:bg-blue-700"
          >
            Go Home
          </button>
{{else}}
          <button
            onClick={() => navigate('/')}
            className="px-4 py-2 bg-blue-600 text-white font-bold rounded hover:bg-blue-700"
          >
            Go Home
          </button>
{{/if}}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <h1 className="text-xl font-bold">Dashboard</h1>
            </div>
            <button
              onClick={handleSignOut}
              className="px-4 py-2 bg-red-500 text-white font-medium rounded hover:bg-red-600 transition-colors"
            >
              Sign Out
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Welcome Section */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-2xl font-bold mb-4">
                Welcome back, {user?.name || 'User'}!
              </h2>
              <p className="text-gray-600 mb-6">
                This is your secure dashboard powered by {{authProvider}}. Here you can see your authentication state, 
                session information, and manage your account.
              </p>

              {/* Authentication Status */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="p-4 bg-green-50 border border-green-200 rounded">
                  <h3 className="font-semibold text-green-800 mb-2">Authentication Status</h3>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-green-700 font-medium">Authenticated</span>
                  </div>
                </div>

                <div className="p-4 bg-blue-50 border border-blue-200 rounded">
                  <h3 className="font-semibold text-blue-800 mb-2">Session Status</h3>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                    <span className="text-blue-700 font-medium">Active Session</span>
                  </div>
                </div>
              </div>

              {/* Quick Actions */}
              <div className="border-t pt-6">
                <h3 className="font-semibold mb-4">Quick Actions</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <button className="p-4 bg-gray-50 border border-gray-200 rounded hover:bg-gray-100 transition-colors text-left">
                    <span className="font-medium">Update Profile</span>
                  </button>
                  <button className="p-4 bg-gray-50 border border-gray-200 rounded hover:bg-gray-100 transition-colors text-left">
                    <span className="font-medium">Security Settings</span>
                  </button>
                  <button className="p-4 bg-gray-50 border border-gray-200 rounded hover:bg-gray-100 transition-colors text-left">
                    <span className="font-medium">API Keys</span>
                  </button>
                  <button className="p-4 bg-gray-50 border border-gray-200 rounded hover:bg-gray-100 transition-colors text-left">
                    <span className="font-medium">Connected Apps</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* User Profile Card */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="font-semibold mb-4">Profile Information</h3>
              
              {/* Avatar */}
              <div className="flex justify-center mb-4">
                {user?.image ? (
                  <img
                    src={user.image}
                    alt={user.name || 'User'}
                    className="w-20 h-20 rounded-full border-2 border-gray-200"
                  />
                ) : (
                  <div className="w-20 h-20 bg-{{#if (eq styling "tailwind")}}blue-500{{else}}primary{{/if}} rounded-full flex items-center justify-center">
                    <span className="text-2xl font-bold text-white">
                      {user?.name?.charAt(0)?.toUpperCase() || 'U'}
                    </span>
                  </div>
                )}
              </div>

              {/* User Details */}
              <div className="space-y-3">
                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Name
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {user?.name || 'Not set'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Email
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {user?.email || 'Not set'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    User ID
                  </label>
                  <p className="font-mono text-xs bg-gray-50 p-2 rounded break-all">
                    {user?.id || 'Not available'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Email Verified
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {user?.emailVerified ? (
                      <span className="text-green-600 font-semibold">✓ Verified</span>
                    ) : (
                      <span className="text-red-600 font-semibold">✗ Not Verified</span>
                    )}
                  </p>
                </div>

                {{#if (eq authProvider "better-auth")}}
                {user?.roles && user.roles.length > 0 && (
                  <div>
                    <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                      Roles
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {user.roles.map((role: string) => (
                        <span key={role} className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded">
                          {role}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                {{/if}}
              </div>
            </div>

            {/* Session Information */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="font-semibold mb-4">Session Details</h3>
              
              <div className="space-y-3">
                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Session ID
                  </label>
                  <p className="font-mono text-xs bg-gray-50 p-2 rounded break-all">
                    {session?.id || 'Not available'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Created At
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {session?.createdAt ? new Date(session.createdAt).toLocaleString() : 'Not available'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    Expires At
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {session?.expiresAt ? new Date(session.expiresAt).toLocaleString() : 'Not available'}
                  </p>
                </div>

                <div>
                  <label className="block text-xs font-semibold uppercase tracking-wider text-gray-500 mb-1">
                    IP Address
                  </label>
                  <p className="font-mono text-sm bg-gray-50 p-2 rounded">
                    {session?.ipAddress || 'Not tracked'}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {{#if (eq NODE_ENV "development")}}
        {/* Raw Session Data (for debugging) */}
        <div className="mt-8">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="font-semibold mb-4">Debug Information</h3>
            <p className="text-sm text-gray-600 mb-4">
              This section shows the complete session object for debugging purposes (development only).
            </p>
            <pre className="bg-gray-900 text-green-400 p-4 rounded text-xs overflow-auto font-mono">
              {JSON.stringify({ user, session }, null, 2)}
            </pre>
          </div>
        </div>
        {{/if}}
      </main>
    </div>
  );
}

{{#if (eq framework "react")}}
export { DashboardPage };
{{/if}}