{{#if (eq framework "next")}}'use client';

{{/if}}/**
 * Signup Form Component
 * @module SignupForm
 * @description User registration form with validation and password strength indicator
 */

import { useState } from 'react';
import { Mail, Lock, Eye, EyeOff, User, Loader2, Check, X } from 'lucide-react';
import { AuthButton } from './AuthButton';
// import { SocialLogin } from './SocialLogin'; // Uncomment when implementing social login

/**
 * Props for the SignupForm component
 */
interface SignupFormProps {
  onSubmit: (email: string, password: string, name: string) => Promise<void>;
  onLoginClick?: () => void;
  isLoading?: boolean;
  error?: string | null;
  showSocialLogin?: boolean;
  className?: string;
}

/**
 * Password strength assessment interface
 */
interface PasswordStrength {
  score: number;
  feedback: string[];
}

/**
 * User registration form with validation
 * @param {SignupFormProps} props - Component props
 * @returns {JSX.Element} Signup form component
 */
export function SignupForm({
  onSubmit,
  onLoginClick,
  isLoading = false,
  error,
  // showSocialLogin = true, // Uncomment when implementing social login
  className = ''
}: SignupFormProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [name, setName] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isFormLoading, setIsFormLoading] = useState(false);

  const getPasswordStrength = (pwd: string): PasswordStrength => {
    let score = 0;
    const feedback: string[] = [];

    if (pwd.length >= 8) score += 1;
    else feedback.push('At least 8 characters');

    if (/[A-Z]/.test(pwd)) score += 1;
    else feedback.push('One uppercase letter');

    if (/[a-z]/.test(pwd)) score += 1;
    else feedback.push('One lowercase letter');

    if (/[0-9]/.test(pwd)) score += 1;
    else feedback.push('One number');

    if (/[^A-Za-z0-9]/.test(pwd)) score += 1;
    else feedback.push('One special character');

    return { score, feedback };
  };

  const passwordStrength = getPasswordStrength(password);
  const passwordsMatch = password && confirmPassword && password === confirmPassword;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isLoading || isFormLoading) return;
    
    if (password !== confirmPassword) {
      return;
    }

    if (passwordStrength.score < 3) {
      return;
    }
    
    setIsFormLoading(true);
    try {
      await onSubmit(email, password, name);
    } finally {
      setIsFormLoading(false);
    }
  };

  const loading = isLoading || isFormLoading;
  const isFormValid = email && password && confirmPassword && name && passwordsMatch && passwordStrength.score >= 3;

  return (
    <div>
      <div className="bg-white dark:bg-gray-900 p-8 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-800">
        {/* Header */}
        <div className="text-center mb-8">
          <h1>
            Create account
          </h1>
          <p>
            Join us and start your journey today
          </p>
        </div>

        {/* Social Login */}
        {{#if (eq authProvider "auth.js")}}
        {showSocialLogin && (
          <div>
            <SocialLogin />
            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200 dark:border-gray-700" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-4 bg-white dark:bg-gray-900 text-gray-500">
                  or create account with email
                </span>
              </div>
            </div>
          </div>
        )}
        {{/if}}

        {/* Error Message */}
        {error && (
          <div>
            <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
          </div>
        )}

        {/* Signup Form */}
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Name Field */}
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Full name
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <User className="h-5 w-5 text-gray-400" />
              </div>
              <input
                id="name"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                disabled={loading}
                className="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                         bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                         placeholder-gray-500 dark:placeholder-gray-400
                         focus:ring-2 focus:ring-blue-500 focus:border-transparent
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-all duration-200"
                placeholder="Enter your full name"
              />
            </div>
          </div>

          {/* Email Field */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Email address
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Mail className="h-5 w-5 text-gray-400" />
              </div>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
                className="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                         bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                         placeholder-gray-500 dark:placeholder-gray-400
                         focus:ring-2 focus:ring-blue-500 focus:border-transparent
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-all duration-200"
                placeholder="Enter your email"
              />
            </div>
          </div>

          {/* Password Field */}
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Password
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Lock className="h-5 w-5 text-gray-400" />
              </div>
              <input
                id="password"
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
                className="w-full pl-10 pr-12 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                         bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                         placeholder-gray-500 dark:placeholder-gray-400
                         focus:ring-2 focus:ring-blue-500 focus:border-transparent
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-all duration-200"
                placeholder="Create a strong password"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                disabled={loading}
                className="absolute inset-y-0 right-0 pr-3 flex items-center
                         text-gray-400 hover:text-gray-600 dark:hover:text-gray-300
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-colors duration-200"
              >
                {showPassword ? (
                  <EyeOff className="h-5 w-5" />
                ) : (
                  <Eye className="h-5 w-5" />
                )}
              </button>
            </div>
            
            {/* Password Strength Indicator */}
            {password && (
              <div>
                <div className="flex space-x-1">
                  {[...Array(5)].map((_, i) => (
                    <div
                      key={i}
                      className={`h-2 flex-1 rounded-full transition-colors duration-200 ${
                        i < passwordStrength.score
                          ? passwordStrength.score <= 2
                            ? 'bg-red-400'
                            : passwordStrength.score <= 3
                            ? 'bg-yellow-400'
                            : 'bg-green-400'
                          : 'bg-gray-200 dark:bg-gray-700'
                      }`}
                    />
                  ))}
                </div>
                {passwordStrength.feedback.length > 0 && (
                  <div className="text-xs text-gray-600 dark:text-gray-400">
                    <p className="mb-1">Password requirements:</p>
                    <ul className="space-y-1">
                      {passwordStrength.feedback.map((item, i) => (
                        <li key={i} className="flex items-center space-x-2">
                          <X className="h-3 w-3 text-red-400" />
                          <span>{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Confirm Password Field */}
          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Confirm password
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Lock className="h-5 w-5 text-gray-400" />
              </div>
              <input
                id="confirmPassword"
                type={showConfirmPassword ? 'text' : 'password'}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                disabled={loading}
                className="w-full pl-10 pr-12 py-3 border border-gray-300 dark:border-gray-600 rounded-lg 
                         bg-white dark:bg-gray-800 text-gray-900 dark:text-white
                         placeholder-gray-500 dark:placeholder-gray-400
                         focus:ring-2 focus:ring-blue-500 focus:border-transparent
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-all duration-200"
                placeholder="Confirm your password"
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                disabled={loading}
                className="absolute inset-y-0 right-0 pr-3 flex items-center
                         text-gray-400 hover:text-gray-600 dark:hover:text-gray-300
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-colors duration-200"
              >
                {showConfirmPassword ? (
                  <EyeOff className="h-5 w-5" />
                ) : (
                  <Eye className="h-5 w-5" />
                )}
              </button>
              
              {/* Password Match Indicator */}
              {confirmPassword && (
                <div className="absolute inset-y-0 right-10 flex items-center">
                  {passwordsMatch ? (
                    <Check className="h-5 w-5 text-green-400" />
                  ) : (
                    <X className="h-5 w-5 text-red-400" />
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Submit Button */}
          <div>
            <AuthButton
              type="submit"
              disabled={loading || !isFormValid}
              className="w-full"
            >
              {loading ? (
                <>
                  <Loader2 className="h-5 w-5 animate-spin mr-2" />
                  Creating account...
                </>
              ) : (
                'Create account'
              )}
            </AuthButton>
          </div>
        </form>

        {/* Login Link */}
        {onLoginClick && (
          <div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Already have an account?{' '}
              <button
                type="button"
                onClick={onLoginClick}
                disabled={loading}
                className="font-medium text-blue-600 dark:text-blue-400 hover:text-blue-500 
                         disabled:opacity-50 disabled:cursor-not-allowed
                         transition-colors duration-200"
              >
                Sign in
              </button>
            </p>
          </div>
        )}
      </div>
    </div>
  );
}