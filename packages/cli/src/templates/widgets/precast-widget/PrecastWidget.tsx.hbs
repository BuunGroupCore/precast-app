{{#if (eq framework "next")}}'use client';

{{/if}}/**
 * PrecastWidget Component
 * @module PrecastWidget
 * @description Service validation and testing widget for development environments
 */

/* eslint-disable @typescript-eslint/no-unused-vars, react-hooks/exhaustive-deps */
import React, { useState, useEffect } from 'react';

import { AuthMode } from '@/components/precast/types';

import { usePrecastConfig } from '@/components/precast/hooks/usePrecastConfig';
import { useSystemInfo } from '@/components/precast/hooks/useSystemInfo';
import { useServiceRegistry } from '@/components/precast/hooks/useServiceRegistry';
import { useGenericTesting } from '@/components/precast/hooks/useGenericTesting';

import { FloatingButton } from '@/components/precast/components/FloatingButton';
import { ServicePanel } from '@/components/precast/components/ServicePanel';
import { testApiHealth } from '@/components/precast/services/apiService';
import { testDatabaseConnection } from '@/components/precast/services/databaseService';
import { testDockerHealth } from '@/components/precast/services/dockerService';
import { testEmailService } from '@/components/precast/services/emailService';
{{#if authProvider}}
import { 
  testAuthService, 
  testAuthStatus,
  {{#if (eq authProvider 'better-auth')}}
  testSignOut,
  checkSession,
  getCurrentSession,
  subscribeToAuthState
  {{/if}}
} from '@/components/precast/services/authService';
{{/if}}

import { isDevelopment } from '@/components/precast/utils/environmentUtils';

/**
 * PrecastWidget - Modular service validation and testing widget
 * @description Validates that Docker containers, databases, and other services are working correctly
 * @returns {JSX.Element|null} The widget component or null in production
 */
export function PrecastWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [activeTab, setActiveTab] = useState<string>("{{#if database}}database{{else}}api{{/if}}");

  {{#if authProvider}}
  const [authMode, setAuthMode] = useState<AuthMode>('signup');
  const [authEmail, setAuthEmail] = useState('test@example.com');
  const [authPassword, setAuthPassword] = useState('TestPassword123!');
  const [authName, setAuthName] = useState('Test User');
  {{#if (eq authProvider 'better-auth')}}
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  {{/if}}
  {{/if}}

  const { precastConfig } = usePrecastConfig();
  const { systemInfo, setSystemInfo, refetch: fetchSystemInfo } = useSystemInfo();
  const { services, defaultActiveTab } = useServiceRegistry(precastConfig);
  const { testResults, loading, addTestResult, setLoading } = useGenericTesting();

  const isDev = isDevelopment();

  useEffect(() => {
    if (defaultActiveTab && !activeTab) {
      setActiveTab(defaultActiveTab);
    }
  }, [defaultActiveTab]);

  useEffect(() => {
    if (precastConfig?.docker && services.docker) {
      handleTestDocker();
    }
  }, [precastConfig]);
  
  {{#if authProvider}}
  useEffect(() => {
    if (precastConfig && services.auth) {
      {{#if (eq authProvider 'better-auth')}}
      handleCheckSession();
      {{else}}
      handleTestAuthStatus();
      {{/if}}
    }
  }, [precastConfig]);
  
  {{#if (eq authProvider 'better-auth')}}
  useEffect(() => {
    const session = getCurrentSession();
    const newLoggedInState = !!(session?.session || session?.user || session?.token);
    setIsLoggedIn(newLoggedInState);
  }, [testResults.authStatus, testResults.auth, testResults.authSession]);

  // Subscribe to auth state changes
  useEffect(() => {
    const updateAuthState = () => {
      const session = getCurrentSession();
      const newLoggedInState = !!(session?.session || session?.user || session?.token);
      setIsLoggedIn(newLoggedInState);
    };
    
    // Set initial state
    updateAuthState();
    
    // Subscribe to changes
    const unsubscribe = subscribeToAuthState(updateAuthState);
    
    return unsubscribe;
  }, []);
  {{/if}}
  {{/if}}

  useEffect(() => {
    const savedState = localStorage.getItem("adminPanelOpen");
    if (savedState === "true") {
      setIsOpen(true);
    }
  }, []);

  if (!isDev) {
    return null;
  }

  /**
   * Toggles the panel open/closed state and saves to localStorage
   */
  const togglePanel = () => {
    const newState = !isOpen;
    setIsOpen(newState);
    localStorage.setItem("adminPanelOpen", String(newState));
    if (newState) {
      setIsMinimized(false);
      fetchSystemInfo();
    }
  };

  /**
   * Toggles the panel minimized state
   */
  const handleMinimize = () => {
    setIsMinimized(!isMinimized);
  };

  {{#if database}}
  /**
   * Tests database connection
   */
  const handleTestDatabase = () => {
    testDatabaseConnection(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if backend}}
  /**
   * Tests API health endpoints
   */
  const handleTestApi = () => {
    testApiHealth(setLoading, addTestResult, setSystemInfo, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if docker}}
  /**
   * Tests Docker container health
   */
  const handleTestDocker = () => {
    testDockerHealth(setLoading, addTestResult, services, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if (includes plugins 'resend')}}
  /**
   * Tests email service functionality
   */
  const handleTestEmail = () => {
    testEmailService(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if authProvider}}
  /**
   * Tests authentication (sign-in/sign-up/sign-out based on current state)
   */
  const handleTestAuth = () => {
    {{#if (eq authProvider 'better-auth')}}
    if (isLoggedIn) {
      testSignOut(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
    } else {
      testAuthService(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001', authMode, authEmail, authPassword, authName);
    }
    {{else}}
    testAuthService(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001', authMode, authEmail, authPassword, authName);
    {{/if}}
  };

  /**
   * Tests authentication service status
   */
  const handleTestAuthStatus = () => {
    testAuthStatus(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  
  {{#if (eq authProvider 'better-auth')}}
  /**
   * Checks current authentication session
   */
  const handleCheckSession = () => {
    checkSession(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}
  {{/if}}

  return (
    <>
      <FloatingButton 
        isOpen={isOpen}
        onToggle={togglePanel}
      />

      <ServicePanel
        isOpen={isOpen}
        isMinimized={isMinimized}
        services={services}
        activeTab={activeTab}
        testResults={testResults}
        loading={loading}
        systemInfo={systemInfo}
        onToggle={togglePanel}
        onMinimize={handleMinimize}
        onTabChange={setActiveTab}
        {{#if database}}
        onTestDatabase={handleTestDatabase}
        {{/if}}
        {{#if backend}}
        onTestApi={handleTestApi}
        {{/if}}
        {{#if docker}}
        onTestDocker={handleTestDocker}
        {{/if}}
        {{#if (includes plugins 'resend')}}
        onTestEmail={handleTestEmail}
        {{/if}}
        {{#if authProvider}}
        onTestAuth={handleTestAuth}
        onTestAuthStatus={handleTestAuthStatus}
        authMode={authMode}
        authEmail={authEmail}
        authPassword={authPassword}
        authName={authName}
        onAuthModeChange={setAuthMode}
        onAuthEmailChange={setAuthEmail}
        onAuthPasswordChange={setAuthPassword}
        onAuthNameChange={setAuthName}
        {{#if (eq authProvider 'better-auth')}}
        isLoggedIn={isLoggedIn}
        {{/if}}
        {{/if}}
      />
    </>
  );
}