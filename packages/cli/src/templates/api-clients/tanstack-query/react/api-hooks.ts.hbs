/**
 * TanStack Query API Hooks
 * @module apiHooks
 * @description React hooks for API operations using TanStack Query
 */

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

const API_URL = process.env.{{#if (eq framework "next")}}NEXT_PUBLIC_{{/if}}API_URL || "http://localhost:3001";

/**
 * Generic API fetch function with error handling
 * @param {string} endpoint - API endpoint path
 * @param {RequestInit} [options] - Fetch options
 * @returns {Promise<T>} API response data
 */
async function fetchApi<T>(endpoint: string, options?: RequestInit): Promise<T> {
  const response = await fetch(`${API_URL}${endpoint}`, {
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });

  if (!response.ok) {
    throw new Error(`API Error: ${response.statusText}`);
  }

  return response.json();
}

/**
 * Hook to fetch all users
 * @returns {UseQueryResult<User[]>} Query result with users data
 */
export function useUsers() {
  return useQuery({
    queryKey: ["users"],
    queryFn: () => fetchApi<User[]>("/api/users"),
  });
}

/**
 * Hook to fetch a single user by ID
 * @param {string} id - User ID
 * @returns {UseQueryResult<User>} Query result with user data
 */
export function useUser(id: string) {
  return useQuery({
    queryKey: ["users", id],
    queryFn: () => fetchApi<User>(`/api/users/${id}`),
    enabled: !!id,
  });
}

/**
 * Hook to create a new user
 * @returns {UseMutationResult} Mutation result for user creation
 */
export function useCreateUser() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (userData: CreateUserDto) =>
      fetchApi<User>("/api/users", {
        method: "POST",
        body: JSON.stringify(userData),
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
    },
  });
}

/**
 * User data interface
 */
interface User {
  id: string;
  name: string;
  email: string;
}

/**
 * User creation data transfer object
 */
interface CreateUserDto {
  name: string;
  email: string;
}