name: PR Quick Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/cli/**'
      - 'packages/shared/**'

jobs:
  quick-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            
      - name: Install dependencies
        run: bun install
        working-directory: packages/cli
        
      - name: Build CLI
        run: bun run build
        working-directory: packages/cli
        
      - name: Run linting
        run: bun run lint
        working-directory: packages/cli
        
      - name: Run type checking  
        run: bun run typecheck
        working-directory: packages/cli
        
      - name: Run critical tests only
        run: |
          # Generate smart combinations
          bun smart-test-generator.ts
          
          # Create a quick test file
          echo 'import { describe, it, expect, beforeAll } from "vitest";
          import { SMART_TEST_COMBINATIONS } from "../generated-tests/smart-combinations";
          import { runCLI, projectExists, cleanupTestProjects } from "../src/test-utils";
          
          describe("PR Quick Tests", () => {
            beforeAll(async () => {
              const buildResult = runCLI(["--version"]);
              expect(buildResult.exitCode).toBe(0);
            });
            
            const testProjects = [];
            
            afterEach(() => {
              cleanupTestProjects(testProjects);
              testProjects.length = 0;
            });
            
            // Test only 3 critical combinations for quick feedback
            const quickTests = SMART_TEST_COMBINATIONS.critical.slice(0, 3);
            
            quickTests.forEach((combination) => {
              it(`should generate ${combination.name}`, () => {
                const projectName = `test-pr-${combination.name}`;
                testProjects.push(projectName);
                
                const args = [
                  "init",
                  projectName,
                  `--framework=${combination.framework}`,
                  `--backend=${combination.backend}`,
                  `--database=${combination.database}`,
                  `--orm=${combination.orm}`,
                  `--styling=${combination.styling}`,
                  `--runtime=${combination.runtime}`,
                  combination.typescript ? "" : "--no-typescript",
                  "--no-git",
                  "--yes",
                ].filter(Boolean);
                
                const result = runCLI(args);
                expect(result.exitCode).toBe(0);
                expect(projectExists(projectName)).toBe(true);
              }, 30000);
            });
          });' > tests/pr-quick.test.ts
          
          bun test tests/pr-quick.test.ts
        working-directory: packages/cli
        
      - name: Post test summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const summary = core.summary
              .addHeading('CLI Test Results')
              .addRaw('✅ Linting passed')
              .addRaw('✅ Type checking passed')
              .addRaw('✅ Critical tests passed')
              .addBreak()
              .addRaw('Run comprehensive tests with: `bun test`');
              
            await summary.write();