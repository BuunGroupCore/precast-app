name: Comprehensive CLI Tests

on:
  push:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test-all-combinations:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        working-directory: packages/cli
        
      - name: Build CLI
        run: bun run build
        working-directory: packages/cli
        
      - name: Generate smart test combinations
        run: bun smart-test-generator.ts
        working-directory: packages/cli
        
      - name: Run all tests
        run: bun test
        working-directory: packages/cli
        
      - name: Generate comprehensive test report
        run: bun tests/test-reporter.ts
        working-directory: packages/cli
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            packages/cli/test-report.json
            packages/cli/test-report.md
            packages/cli/generated-tests/smart-combinations.ts
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('packages/cli/test-report.md', 'utf8');
            const truncated = report.substring(0, 60000); // GitHub comment limit
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: truncated
            });
            
  test-cross-platform:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
        
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        working-directory: packages/cli
        
      - name: Build CLI
        run: bun run build
        working-directory: packages/cli
        
      - name: Run core tests only
        run: |
          # Create a subset test for cross-platform
          echo 'import { describe, it, expect } from "vitest";
          import { runCLI, projectExists, cleanupTestProjects } from "../src/test-utils";
          
          describe("Cross-platform CLI Tests", () => {
            const testProjects = [];
            
            afterEach(() => {
              cleanupTestProjects(testProjects);
              testProjects.length = 0;
            });
            
            it("should create React project", () => {
              const projectName = "test-xplat-react";
              testProjects.push(projectName);
              
              const result = runCLI([
                "init",
                projectName,
                "--framework=react",
                "--backend=none",
                "--database=none",
                "--orm=none",
                "--styling=tailwind",
                "--runtime=node",
                "--no-git",
                "--yes"
              ]);
              
              expect(result.exitCode).toBe(0);
              expect(projectExists(projectName)).toBe(true);
            });
            
            it("should create Next.js project", () => {
              const projectName = "test-xplat-next";
              testProjects.push(projectName);
              
              const result = runCLI([
                "init",
                projectName,
                "--framework=next",
                "--backend=none",
                "--database=none",
                "--orm=none",
                "--styling=tailwind",
                "--runtime=node",
                "--no-git",
                "--yes"
              ]);
              
              expect(result.exitCode).toBe(0);
              expect(projectExists(projectName)).toBe(true);
            });
          });' > tests/cross-platform.test.ts
          
          bun test tests/cross-platform.test.ts
        working-directory: packages/cli
        shell: bash
        
      - name: Test CLI commands
        run: |
          node dist/cli.js --help
          node dist/cli.js --version
          node dist/cli.js list
        working-directory: packages/cli
        shell: bash