/**
 * Better Auth Configuration
 * @module auth
 * @description Main authentication configuration using Better Auth
 */

import { betterAuth } from "better-auth";
import * as crypto from "crypto";
{{#if (eq orm "prisma")}}
import { prismaAdapter } from "better-auth/adapters/prisma";
import { prisma } from "@/db";
{{/if}}
{{#if (eq orm "drizzle")}}
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { db } from "@/db";
import * as schema from "@/db/schema";
{{/if}}
{{#if (eq orm "typeorm")}}
import { typeormAdapter } from "@hedystia/better-auth-typeorm";
import { dataSource } from "@/db";
{{/if}}
{{#if (eq orm "none")}}
{{#if (ne database "none")}}
import dbConnection from "@/features/auth/db-connection{{#if typescript}}.js{{/if}}";
{{/if}}
{{/if}}

/**
 * Better Auth configuration instance
 * @description Configured with email/password auth, social providers, and optimized for development/production
 */
export const auth = betterAuth({
  baseURL: process.env.BETTER_AUTH_URL || "http://localhost:{{#if (and backend (ne backend "none"))}}3001{{else}}3000{{/if}}",
  basePath: "/api/auth",
  secret: process.env.BETTER_AUTH_SECRET,
  trustedOrigins: (request{{#if typescript}}: Request{{/if}}) => {
    const staticOrigins = [
      process.env.CLIENT_URL || "http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}",
      process.env.BETTER_AUTH_URL || "http://localhost:{{#if (and backend (ne backend "none"))}}3001{{else}}3000{{/if}}",
      "http://localhost:3000",
      "http://localhost:3001", 
      "http://localhost:5173",
      "http://localhost:4200",
      "http://localhost:4321",
      ...(process.env.PRODUCTION_URL ? [process.env.PRODUCTION_URL] : []),
    ];
    
    const origin = request.headers.get('origin');
    
    if (!origin) {
      return staticOrigins;
    }
    
    const dynamicOrigins{{#if typescript}}: string[]{{/if}} = [];
    
    if (origin.match(/^https?:\/\/[a-z0-9-]+\.(ngrok-free\.app|ngrok\.app|ngrok\.io|ngrok\.com)$/)) {
      dynamicOrigins.push(origin);
    }
    
    if (origin.match(/\.trycloudflare\.com$/)) {
      dynamicOrigins.push(origin);
    }
    
    if (origin.match(/^http:\/\/localhost:\d+$/)) {
      dynamicOrigins.push(origin);
    }
    
    return [...staticOrigins, ...dynamicOrigins];
  },
  {{#if (ne orm "none")}}
  database: {{#if (eq orm "prisma")}}prismaAdapter(prisma, {
    provider: "{{#if (eq database "postgres")}}postgresql{{else if (eq database "mysql")}}mysql{{else}}sqlite{{/if}}",
  }){{else if (eq orm "drizzle")}}drizzleAdapter(db, {
    provider: "{{#if (eq database "postgres")}}pg{{else if (eq database "mysql")}}mysql2{{else}}better-sqlite3{{/if}}",
    schema: schema,
  }){{else if (eq orm "typeorm")}}typeormAdapter(dataSource){{/if}},
  {{else}}
  {{#if (ne database "none")}}
  database: dbConnection,
  {{/if}}
  {{/if}}
  emailAndPassword: {
    enabled: true,
    autoSignIn: true,
    requireEmailVerification: process.env.NODE_ENV === "production",
    minPasswordLength: 8,
    maxPasswordLength: 128,
    // Password strength requirements
    passwordStrength: {
      minLength: 8,
      requireUppercase: true,
      requireLowercase: true,
      requireNumbers: true,
      requireSpecialChars: false, // Optional but recommended
    },
  },
  socialProviders: {
    github: {
      clientId: process.env.GITHUB_CLIENT_ID || "",
      clientSecret: process.env.GITHUB_CLIENT_SECRET || "",
    },
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID || "",
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || "",
    },
  },
  session: {
    expiresIn: 60 * 60 * 24 * 7, // 7 days
    updateAge: 60 * 60 * 24, // 1 day
    cookieCache: {
      enabled: true,
      maxAge: 5 * 60, // 5 minutes
    },
  },
  rateLimit: {
    enabled: true,
    window: 15 * 60, // 15 minutes
    max: 5, // Max 5 attempts per window
    storage: "memory", // Use Redis in production
  },
  advanced: {
    useSecureCookies: process.env.NODE_ENV === "production"{{#if (or (includes powerups "ngrok") (includes powerups "traefik") (includes powerups "cloudflare-tunnel"))}} || true{{/if}},
    defaultCookieAttributes: {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production"{{#if (or (includes powerups "ngrok") (includes powerups "traefik") (includes powerups "cloudflare-tunnel"))}} || true{{/if}},
      sameSite: {{#if (or (includes powerups "ngrok") (includes powerups "traefik") (includes powerups "cloudflare-tunnel"))}}"none"{{else}}(process.env.NODE_ENV === "production" ? "strict" : "lax"){{/if}},
      domain: undefined,
      path: "/",
    },
    // Additional security settings
    disableCSRFCheck: false, // Always enable CSRF protection
    database: {
      generateId: () => crypto.randomUUID(), // Use cryptographically secure IDs
    },
  },
});

/**
 * Auth type for TypeScript inference
 */
export type Auth = typeof auth;