/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    optimizePackageImports: ['@/components', '@/lib', '@/utils'],
  },{{#if (or (eq deploymentMethod "github-pages") (and (or (eq deploymentMethod "cloudflare-pages") (eq deploymentMethod "netlify")) (eq backend "none") (eq database "none")))}}
  // Static export configuration for {{deploymentMethod}}
  output: 'export',
  trailingSlash: true,
  images: {
    unoptimized: true,
  },{{/if}}{{#if (and (includes powerups "ngrok") (not (or (eq deploymentMethod "github-pages") (and (or (eq deploymentMethod "cloudflare-pages") (eq deploymentMethod "netlify")) (eq backend "none") (eq database "none")))))}}
  // Configure for ngrok tunnel support
  allowedDevOrigins: [
    "localhost:3000",
    "*.ngrok.app",
    "*.ngrok-free.app", 
    "*.ngrok.io",
    "*.ngrok.com"
  ],
  async headers() {
    return [
      {
        // Apply headers to all routes
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN',
          },
          {
            key: 'Access-Control-Allow-Origin',
            value: '*',
          },
        ],
      },
    ];
  },{{/if}}
};

export default nextConfig;