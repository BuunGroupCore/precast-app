import cors from "cors";
import { config } from "dotenv";
import express, { Request, Response, json, urlencoded } from "express";
import helmet from "helmet";

{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
import healthRoutes from "./api/routes/health{{#if typescript}}.js{{/if}}";
{{/if}}
import { 
  APP_CONFIG, 
  SERVER_CONFIG, 
  CORS_CONFIG, 
  HEALTH_CHECK_CONFIG 
} from "./config/constants{{#if typescript}}.js{{/if}}";

config();

const app = express();

// Middleware
app.use(helmet());
app.use(cors(CORS_CONFIG));
app.use(json());
app.use(urlencoded({ extended: true }));

// Routes
{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
app.use("/api", healthRoutes);
{{/if}}

app.get(HEALTH_CHECK_CONFIG.path, (req: Request, res: Response) => {
  res.json({ 
    status: "ok", 
    message: HEALTH_CHECK_CONFIG.message,
    timestamp: new Date().toISOString(),
    version: APP_CONFIG.version,
    environment: APP_CONFIG.environment
  });
});

app.get(`${SERVER_CONFIG.apiPrefix}/hello`, (req: Request, res: Response) => {
  res.json({ 
    message: `Hello from ${APP_CONFIG.name}!`,
    version: APP_CONFIG.version
  });
});

// 404 handler
app.use("*", (req: Request, res: Response) => {
  res.status(404).json({ 
    error: "Route not found",
    path: req.originalUrl
  });
});

// Error handler
app.use((err: Error, req: Request, res: Response) => {
  // Log error in development only
  if (process.env.NODE_ENV === "development") {
    // eslint-disable-next-line no-console
    console.error(err.stack);
  }
  res.status(500).json({ 
    error: "Internal server error",
    message: process.env.NODE_ENV === "development" ? err.message : "Something went wrong"
  });
});

app.listen(SERVER_CONFIG.port, () => {
  // eslint-disable-next-line no-console
  console.log(`🚀 Server running on http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}`);
  // eslint-disable-next-line no-console
  console.log(`📋 Health check: http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}${HEALTH_CHECK_CONFIG.path}`);
  // eslint-disable-next-line no-console
  console.log(`🌍 Environment: ${APP_CONFIG.environment}`);
});