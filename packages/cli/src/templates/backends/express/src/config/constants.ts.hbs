/**
 * @fileoverview Express API configuration constants
 */

/**
 * Application configuration
 */
export const APP_CONFIG = {
  name: '{{name}}-api',
  displayName: '{{name}} API',
  description: '{{name}} API Server',
  version: '1.0.0',
  environment: process.env.NODE_ENV || 'development',
} as const;

/**
 * Server configuration
 */
export const SERVER_CONFIG = {
  port: parseInt(process.env.PORT || '3001', 10),
  host: process.env.HOST || 'localhost',
  apiPrefix: '/api',
} as const;

/**
 * CORS configuration
 */
export const CORS_CONFIG = {
  {{#if (or (includes powerups "ngrok") (includes powerups "cloudflare-tunnel"))}}
  origin: (origin: string | undefined, callback: (err: Error | null, origin?: boolean | string) => void) => {
    // Allow requests with no origin (like mobile apps or curl)
    if (!origin) {
      return callback(null, true);
    }
    
    // Check if origin matches allowed patterns
    const allowedOrigins = [
      'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
      'http://localhost:3000',
      'http://localhost:4200',
      'http://localhost:5173',
    ];
    
    // Check for exact matches
    if (allowedOrigins.includes(origin)) {
      return callback(null, origin);
    }
    
    {{#if (includes powerups "ngrok")}}
    // Check for ngrok domains
    if (origin.match(/^https?:\/\/[a-z0-9-]+\.(ngrok-free\.app|ngrok\.app|ngrok\.io)$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    {{#if (includes powerups "cloudflare-tunnel")}}
    // Check for Cloudflare tunnel domains
    if (origin.match(/\.trycloudflare\.com$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    // Check for custom CLIENT_URL
    if (process.env.CLIENT_URL && origin === process.env.CLIENT_URL) {
      return callback(null, origin);
    }
    
    // Reject other origins
    callback(new Error('Not allowed by CORS'));
  },
  {{else}}
  origin: process.env.CLIENT_URL || process.env.CORS_ORIGIN?.split(',') || [
    'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
    'http://localhost:3000',
    'http://localhost:4200',
    'http://localhost:5173',
  ],
  {{/if}}
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'{{#if (includes powerups "ngrok")}}, 'ngrok-skip-browser-warning'{{/if}}],
  exposedHeaders: ['Content-Type', 'Authorization'],
};

/**
 * Health check configuration
 */
export const HEALTH_CHECK_CONFIG = {
  path: `${SERVER_CONFIG.apiPrefix}/health`,
  message: `${APP_CONFIG.displayName} is running`,
} as const;