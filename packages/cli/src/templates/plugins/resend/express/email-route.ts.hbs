/**
 * Email Service Routes
 * @module emailRoutes
 * @description Express routes for email functionality using Resend
 */

import { Router, Request, Response } from 'express';

import { sendEmail, sendWelcomeEmail, sendPasswordResetEmail, sendNotificationEmail } from '@/services/email';

const router = Router();

// Email validation helper
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// POST /api/email - Send email
router.post('/email', async (req: Request, res: Response) => {
  try {
    const { to, subject, html, text, type } = req.body;

    // Validate required fields
    if (!to || !subject) {
      return res.status(400).json({
        error: 'Missing required fields: to, subject'
      });
    }

    // Validate email format
    const emails = Array.isArray(to) ? to : [to];
    const invalidEmails = emails.filter((email: string) => !validateEmail(email));
    
    if (invalidEmails.length > 0) {
      return res.status(400).json({
        error: `Invalid email addresses: ${invalidEmails.join(', ')}`
      });
    }

    // Send email based on type
    let result;
    switch (type) {
      case 'welcome': {
        const { name } = req.body;
        if (!name) {
          return res.status(400).json({
            error: 'Name is required for welcome emails'
          });
        }
        result = await sendWelcomeEmail(to, name);
        break;
      }

      case 'password-reset': {
        const { resetToken, resetUrl } = req.body;
        if (!resetToken || !resetUrl) {
          return res.status(400).json({
            error: 'resetToken and resetUrl are required for password reset emails'
          });
        }
        result = await sendPasswordResetEmail(to, resetToken, resetUrl);
        break;
      }

      case 'notification': {
        const { title, message } = req.body;
        if (!title || !message) {
          return res.status(400).json({
            error: 'title and message are required for notification emails'
          });
        }
        result = await sendNotificationEmail(to, title, message);
        break;
      }

      default:
        // Custom email
        if (!html && !text) {
          return res.status(400).json({
            error: 'Either html or text content is required'
          });
        }
        result = await sendEmail({ to, subject, html, text });
        break;
    }

    res.json({
      success: true,
      message: 'Email sent successfully',
      id: result.id,
    });

  } catch (error) {
    console.error('Email API error:', error);
    res.status(500).json({
      error: 'Failed to send email',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// GET /api/email/health - Health check
router.get('/email/health', (req: Request, res: Response) => {
  res.json({
    service: 'Email Service',
    status: 'healthy',
    provider: 'Resend',
    timestamp: new Date().toISOString(),
  });
});

export default router;