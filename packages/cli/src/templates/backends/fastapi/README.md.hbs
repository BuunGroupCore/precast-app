# {{projectName}} - FastAPI Backend

A modern FastAPI backend application generated with Precast CLI.

## Features

- ⚡ **FastAPI** - Modern, fast web framework for building APIs
- 🔍 **Type Safety** - Full TypeScript-like experience with Python type hints
- 📊 **Interactive Docs** - Automatic API documentation with Swagger/OpenAPI
{{#if config.database}}
{{#unless (eq config.database "none")}}
- 🗃️ **Database** - {{config.database}} with {{#if config.orm}}{{config.orm}}{{else}}SQLAlchemy{{/if}} ORM
{{/unless}}
{{/if}}
{{#if config.auth}}
- 🔐 **Authentication** - JWT-based authentication with secure password hashing
{{/if}}
- 🧪 **Testing** - Comprehensive test suite with pytest and coverage
- 📦 **Docker** - Production-ready containerization
- 🔧 **Development Tools** - Ruff for linting, mypy for type checking

## Quick Start

### Prerequisites

- Python 3.11 or higher
- pip or pipenv

### Installation

1. **Install dependencies:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Set up environment variables:**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

{{#if config.database}}
{{#unless (eq config.database "none")}}
3. **Set up database:**
   ```bash
   # Run database migrations
   alembic upgrade head
   ```
{{/unless}}
{{/if}}

4. **Start development server:**
   ```bash
   uvicorn app.main:app --reload
   ```

The API will be available at `http://localhost:8000`

## API Documentation

Once the server is running, you can access:

- **Interactive API docs (Swagger):** http://localhost:8000/docs
- **Alternative docs (ReDoc):** http://localhost:8000/redoc
- **OpenAPI schema:** http://localhost:8000/openapi.json

## Development

### Code Quality

```bash
# Run linting
ruff check .

# Format code
ruff format .

# Type checking
mypy app/

# Run all quality checks
ruff check . && ruff format --check . && mypy app/
```

### Testing

```bash
# Run tests
pytest

# Run tests with coverage
pytest --cov=app

# Run tests in watch mode
pytest-watch
```

### Development Dependencies

Install development dependencies:

```bash
pip install -r requirements-dev.txt
```

## Project Structure

```
{{projectName}}/
├── app/                    # Main application package
│   ├── __init__.py
│   ├── main.py            # Application entry point
│   ├── core/              # Core configuration
│   │   ├── config.py      # Settings management
│   │   ├── database.py    # Database connection
│   │   └── security.py    # Authentication utilities
│   ├── api/               # API layer
│   │   ├── deps.py        # Common dependencies
│   │   └── v1/            # API version 1
│   │       ├── router.py  # Main API router
│   │       └── endpoints/ # API endpoints
│   ├── models/            # Database models
│   ├── schemas/           # Pydantic schemas
│   ├── crud/              # Database operations
│   └── utils/             # Utility functions
├── tests/                 # Test suite
├── alembic/              # Database migrations
├── requirements.txt      # Production dependencies
├── requirements-dev.txt  # Development dependencies
└── Dockerfile           # Docker configuration
```

## Configuration

The application uses environment variables for configuration. Copy `.env.example` to `.env` and update the values:

{{#if config.database}}
```bash
# Database
DATABASE_URL="{{#if (eq config.database "postgres")}}postgresql+asyncpg://user:password@localhost:5432/{{projectName}}{{/if}}{{#if (eq config.database "mysql")}}mysql+aiomysql://user:password@localhost:3306/{{projectName}}{{/if}}{{#if (eq config.database "sqlite")}}sqlite+aiosqlite:///./{{projectName}}.db{{/if}}{{#if (eq config.database "mongodb")}}mongodb://localhost:27017/{{projectName}}{{/if}}"
```
{{/if}}

{{#if config.auth}}
```bash
# Authentication
SECRET_KEY="your-secret-key-here"
ACCESS_TOKEN_EXPIRE_MINUTES=30
```
{{/if}}

## Deployment

### Docker

Build and run with Docker:

```bash
# Build image
docker build -t {{projectName}} .

# Run container
docker run -p 8000:8000 {{projectName}}
```

### Production Server

For production deployment, use Gunicorn with Uvicorn workers:

```bash
gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
```

## API Endpoints

### Health Check
- `GET /` - Root endpoint
- `GET /health` - Basic health check
{{#if config.database}}
{{#unless (eq config.database "none")}}
- `GET /api/v1/health/detailed` - Detailed health check with database status
{{/unless}}
{{/if}}

{{#if config.auth}}
### Authentication
- `POST /api/v1/auth/register` - User registration
- `POST /api/v1/auth/login` - User login (returns JWT token)
- `POST /api/v1/auth/test-token` - Test JWT token validity
{{/if}}

{{#if config.database}}
{{#unless (eq config.database "none")}}
### Users
- `GET /api/v1/users/me` - Get current user profile
- `PUT /api/v1/users/me` - Update current user profile

### Items (Example CRUD)
- `GET /api/v1/items/` - List items
- `POST /api/v1/items/` - Create item
- `GET /api/v1/items/{id}` - Get item by ID
- `PUT /api/v1/items/{id}` - Update item
- `DELETE /api/v1/items/{id}` - Delete item
{{/unless}}
{{/if}}

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests and linting
5. Submit a pull request

## License

MIT License - see LICENSE file for details.

---

Generated with [Precast CLI](https://precast.dev) 🚀