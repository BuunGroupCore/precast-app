import { Router } from "express";
import { handlers, auth } from "@/lib/auth";
{{#if (or (and orm (ne orm "none")) (and database (ne database "none")))}}
import { handleSignup } from "@/lib/signup-route";
{{/if}}

const authRouter = Router();

{{#if (or (and orm (ne orm "none")) (and database (ne database "none")))}}
// Custom signup endpoint (not part of Auth.js) - MUST be before wildcard routes
authRouter.post("/auth/signup", async (req, res) => {
  try {
    const { email, password, name } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Email and password are required" });
    }

    const result = await handleSignup(email, password, name);
    
    if (!result.success) {
      return res.status(result.status || 400).json({ error: result.error });
    }

    res.json({ 
      success: true, 
      user: result.user,
      message: "User created successfully. Please sign in."
    });
  } catch (error) {
    console.error("Signup error:", error);
    res.status(500).json({ error: "Failed to create user" });
  }
});
{{/if}}

// Helper endpoints for testing
authRouter.get("/auth/session", async (req, res) => {
  try {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const headers = new Headers();
    
    for (const [key, value] of Object.entries(req.headers)) {
      if (value && !Array.isArray(value)) {
        headers.append(key, value);
      }
    }

    const request = new Request(url, {
      method: "GET",
      headers,
    });

    const session = await auth(request);
    res.json(session);
  } catch (error) {
    console.error("Session error:", error);
    res.status(500).json({ error: "Failed to get session" });
  }
});

authRouter.get("/auth/providers", (req, res) => {
  res.json({
    providers: ["credentials", "github", "google"],
  });
});

// Handle all Auth.js requests - MUST be after specific routes
authRouter.all("/auth/*", async (req, res) => {
  try {
    // Convert Express request to Web API Request
    const url = new URL(req.url, `http://${req.headers.host}`);
    const headers = new Headers();
    
    for (const [key, value] of Object.entries(req.headers)) {
      if (value) {
        if (Array.isArray(value)) {
          value.forEach(v => headers.append(key, v));
        } else {
          headers.append(key, value as string);
        }
      }
    }

    const body = req.method !== "GET" && req.method !== "HEAD" 
      ? JSON.stringify(req.body)
      : undefined;

    const request = new Request(url, {
      method: req.method,
      headers,
      body,
    });

    const method = req.method as 'GET' | 'POST';
    const handler = method === 'GET' ? handlers.GET : handlers.POST;
    const response = await handler(request);
    
    // Convert Web API Response back to Express response
    res.status(response.status);
    
    response.headers.forEach((value, key) => {
      res.setHeader(key, value);
    });

    const responseBody = await response.text();
    res.send(responseBody);
  } catch (error) {
    console.error("Auth error:", error);
    res.status(500).json({ error: "Authentication error" });
  }
});

export default authRouter;