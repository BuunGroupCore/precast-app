/**
 * Email Service Routes for Hono
 * @module emailRoutes
 * @description Hono routes for email functionality using Resend
 */

import { Hono } from 'hono';
import { validator } from 'hono/validator';
import { sendEmail, sendWelcomeEmail, sendPasswordResetEmail, sendNotificationEmail } from '@/services/email';

const emailApp = new Hono();

// Email validation helper
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// POST /api/email - Send email
emailApp.post('/email', 
  validator('json', (value, c) => {
    const { to, subject } = value;
    
    if (!to || !subject) {
      return c.json({ error: 'Missing required fields: to, subject' }, 400);
    }

    // Validate email format
    const emails = Array.isArray(to) ? to : [to];
    const invalidEmails = emails.filter((email: string) => !validateEmail(email));
    
    if (invalidEmails.length > 0) {
      return c.json({ 
        error: `Invalid email addresses: ${invalidEmails.join(', ')}` 
      }, 400);
    }

    return value;
  }),
  async (c) => {
    try {
      const { to, subject, html, text, type, name, resetToken, resetUrl, title, message } = await c.req.json();

      // Send email based on type
      let result;
      switch (type) {
        case 'welcome': {
          if (!name) {
            return c.json({
              error: 'Name is required for welcome emails'
            }, 400);
          }
          result = await sendWelcomeEmail(to, name);
          break;
        }

        case 'password-reset': {
          if (!resetToken || !resetUrl) {
            return c.json({
              error: 'resetToken and resetUrl are required for password reset emails'
            }, 400);
          }
          result = await sendPasswordResetEmail(to, resetToken, resetUrl);
          break;
        }

        case 'notification': {
          if (!title || !message) {
            return c.json({
              error: 'title and message are required for notification emails'
            }, 400);
          }
          result = await sendNotificationEmail(to, title, message);
          break;
        }

        default:
          // Custom email
          if (!html && !text) {
            return c.json({
              error: 'Either html or text content is required'
            }, 400);
          }
          result = await sendEmail({ to, subject, html, text });
          break;
      }

      return c.json({
        success: true,
        message: 'Email sent successfully',
        id: result.id,
      });

    } catch (error) {
      console.error('Email API error:', error);
      return c.json({
        error: 'Failed to send email',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, 500);
    }
  }
);

// GET /api/email/health - Health check
emailApp.get('/email/health', (c) => {
  return c.json({
    service: 'Email Service',
    status: 'healthy',
    provider: 'Resend',
    timestamp: new Date().toISOString(),
  });
});

export default emailApp;