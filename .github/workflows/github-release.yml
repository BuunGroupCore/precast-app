name: GitHub Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for (e.g., v1.0.0)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        continue-on-error: true
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.tag || github.ref }}
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Packages
        run: |
          echo "Building packages..."
          pnpm --filter @precast/ui run build
          pnpm --filter create-precast-app run build
          pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Create GitHub Release
        run: |
          # Get versions from all packages
          CLI_VERSION=$(node -p "require('./packages/cli/package.json').version")
          WEBSITE_VERSION=$(node -p "require('./packages/website/package.json').version")
          UI_VERSION=$(node -p "require('./packages/ui/package.json').version")
          UTILS_VERSION=$(node -p "require('./packages/utils/package.json').version")

          # Determine release tag
          if [ -n "${{ inputs.tag }}" ]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="v${CLI_VERSION}"
          fi

          echo "Creating release for tag: ${RELEASE_TAG}"

          # Check if release already exists
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Release ${RELEASE_TAG} already exists, skipping..."
            exit 0
          fi

          # Create release archives
          echo "📦 Creating release archives..."

          # Full repository archive with all built assets
          tar --exclude='.git' \
              --exclude='node_modules' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.turbo' \
              --exclude='*.tsbuildinfo' \
              -czf precast-app-${RELEASE_TAG}.tar.gz .

          # CLI standalone archive
          cd packages/cli
          tar --exclude='node_modules' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='*.tsbuildinfo' \
              -czf ../../precast-cli-${RELEASE_TAG}.tar.gz .
          cd ../..

          # Get changelog for this version if it exists
          CHANGELOG_CONTENT=""
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog for this version
            CHANGELOG_CONTENT=$(awk "/^## ${CLI_VERSION}/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md || echo "")
          fi

          # Create release notes
          cat > RELEASE.md << EOF
          # Precast App ${RELEASE_TAG}

          ## 📦 Package Versions
          - **CLI**: v${CLI_VERSION}
          - **Website**: v${WEBSITE_VERSION}
          - **UI Library**: v${UI_VERSION}
          - **Utils**: v${UTILS_VERSION}

          ## 🚀 Installation from Source

          ### Download and Build
          \`\`\`bash
          # Download and extract this release
          wget https://github.com/BunnGroupCore/precast-app/releases/download/${RELEASE_TAG}/precast-app-${RELEASE_TAG}.tar.gz
          tar -xzf precast-app-${RELEASE_TAG}.tar.gz
          cd precast-app

          # Install dependencies
          bun install  # or pnpm install

          # Build all packages
          bun run build

          # Link CLI globally for local development
          cd packages/cli
          npm link
          
          # Now you can use the CLI
          create-precast-app my-app
          \`\`\`

          ### Clone from Git Tag
          \`\`\`bash
          # Clone specific release tag
          git clone --branch ${RELEASE_TAG} --depth 1 https://github.com/BunnGroupCore/precast-app.git
          cd precast-app
          
          # Install and build
          bun install
          bun run build
          \`\`\`

          ## 📋 What's Included

          ### Release Archives
          - \`precast-app-${RELEASE_TAG}.tar.gz\` - Complete monorepo with all packages
          - \`precast-cli-${RELEASE_TAG}.tar.gz\` - CLI package standalone

          ### Packages in this Release
          - **create-precast-app** - CLI tool for scaffolding projects
          - **@precast/website** - Visual builder and documentation site  
          - **@precast/ui** - Shared UI component library
          - **@precast/utils** - Shared utilities
          - **@precast/hooks** - Shared React hooks
          - **@precast/shared** - Shared configuration and types

          ## 📝 What's Changed
          ${CHANGELOG_CONTENT:-"See [CHANGELOG.md](https://github.com/BunnGroupCore/precast-app/blob/${RELEASE_TAG}/CHANGELOG.md) for details."}

          ## ✅ Verify Release

          \`\`\`bash
          # Verify git tag
          git ls-remote --tags https://github.com/BunnGroupCore/precast-app.git ${RELEASE_TAG}

          # Check package versions after building
          node -p "require('./packages/cli/package.json').version"
          \`\`\`

          ## 🔗 Links
          - **Repository**: https://github.com/BunnGroupCore/precast-app
          - **Documentation**: https://precast.app/docs
          - **Full Changelog**: [CHANGELOG.md](https://github.com/BunnGroupCore/precast-app/blob/${RELEASE_TAG}/CHANGELOG.md)

          ---
          **Commit**: \`${GITHUB_SHA}\`
          EOF

          # Create GitHub release
          echo "🏷️ Creating GitHub release for ${RELEASE_TAG}..."
          gh release create "${RELEASE_TAG}" \
            --title "Precast App ${RELEASE_TAG}" \
            --notes-file RELEASE.md \
            precast-app-${RELEASE_TAG}.tar.gz \
            precast-cli-${RELEASE_TAG}.tar.gz
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}