import { FastifyInstance } from "fastify";
import { handlers, auth } from "@/lib/auth";
{{#if (or (and orm (ne orm "none")) (and database (ne database "none")))}}
import { handleSignup } from "@/lib/signup-route";
{{/if}}

export default async function authRoutes(fastify: FastifyInstance) {
{{#if (or (and orm (ne orm "none")) (and database (ne database "none")))}}
  // Custom signup endpoint (not part of Auth.js) - MUST be before wildcard routes
  fastify.post("/auth/signup", async (request, reply) => {
    try {
      const { email, password, name } = request.body as { email?: string; password?: string; name?: string };

      if (!email || !password) {
        return reply.status(400).send({ error: "Email and password are required" });
      }

      const result = await handleSignup(email, password, name);
      
      if (!result.success) {
        return reply.status(result.status || 400).send({ error: result.error });
      }

      return reply.send({ 
        success: true, 
        user: result.user,
        message: "User created successfully. Please sign in."
      });
    } catch (error) {
      console.error("Signup error:", error);
      return reply.status(500).send({ error: "Failed to create user" });
    }
  });
{{/if}}

  // Helper endpoints for testing
  fastify.get("/auth/session", async (request, reply) => {
    try {
      const url = new URL(request.url, `http://${request.headers.host}`);
      const headers = new Headers();
      
      for (const [key, value] of Object.entries(request.headers)) {
        if (value && !Array.isArray(value)) {
          headers.append(key, value);
        }
      }

      const webRequest = new Request(url, {
        method: "GET",
        headers,
      });

      const session = await auth(webRequest);
      return reply.send(session);
    } catch (error) {
      console.error("Session error:", error);
      return reply.status(500).send({ error: "Failed to get session" });
    }
  });

  fastify.get("/auth/providers", async (request, reply) => {
    return reply.send({
      providers: ["credentials", "github", "google"],
    });
  });

  // Handle all Auth.js requests - MUST be after specific routes
  fastify.all("/auth/*", async (request, reply) => {
    try {
      // Convert Fastify request to Web API Request
      const url = new URL(request.url, `http://${request.headers.host}`);
      const headers = new Headers();
      
      for (const [key, value] of Object.entries(request.headers)) {
        if (value) {
          if (Array.isArray(value)) {
            value.forEach(v => headers.append(key, v));
          } else {
            headers.append(key, value as string);
          }
        }
      }

      const body = request.method !== "GET" && request.method !== "HEAD" && request.body
        ? JSON.stringify(request.body)
        : undefined;

      const webRequest = new Request(url, {
        method: request.method,
        headers,
        body,
      });

      const method = request.method as 'GET' | 'POST';
      const handler = method === 'GET' ? handlers.GET : handlers.POST;
      const response = await handler(webRequest);
      
      // Convert Web API Response back to Fastify response
      reply.code(response.status);
      
      response.headers.forEach((value, key) => {
        reply.header(key, value);
      });

      const responseBody = await response.text();
      return reply.send(responseBody);
    } catch (error) {
      console.error("Auth error:", error);
      return reply.status(500).send({ error: "Authentication error" });
    }
  });
}