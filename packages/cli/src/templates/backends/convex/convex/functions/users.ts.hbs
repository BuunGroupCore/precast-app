{{#if config.auth}}
import { query, mutation } from "../_generated/server";
import { v } from "convex/values";
import { Doc } from "../_generated/dataModel";

/**
 * Get current user based on authentication
 */
export const currentUser = query({
  args: {},
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return null;
    }
    
    return await ctx.db
      .query("users")
      .withIndex("by_token", (q) => 
        q.eq("tokenIdentifier", identity.tokenIdentifier)
      )
      .unique();
  },
});

/**
 * Store user information from authentication provider
 */
export const storeUser = mutation({
  args: {},
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Called storeUser without authentication present");
    }

    // Check if user already exists
    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) => 
        q.eq("tokenIdentifier", identity.tokenIdentifier)
      )
      .unique();

    if (user !== null) {
      // User exists, update last seen
      await ctx.db.patch(user._id, {
        lastSeen: Date.now(),
        updatedAt: Date.now(),
      });
      return user._id;
    }

    // Create new user
    return await ctx.db.insert("users", {
      tokenIdentifier: identity.tokenIdentifier,
      name: identity.name!,
      email: identity.email!,
      avatar: identity.pictureUrl,
      isActive: true,
      createdAt: Date.now(),
      updatedAt: Date.now(),
      lastSeen: Date.now(),
    });
  },
});

/**
 * Get user by ID
 */
export const getUser = query({
  args: { id: v.id("users") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.id);
  },
});

/**
 * Update user profile
 */
export const updateProfile = mutation({
  args: { 
    name: v.optional(v.string()),
    avatar: v.optional(v.id("_storage")),
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Not authenticated");
    }

    const user = await ctx.db
      .query("users")
      .withIndex("by_token", (q) => 
        q.eq("tokenIdentifier", identity.tokenIdentifier)
      )
      .unique();

    if (!user) {
      throw new Error("User not found");
    }

    const updates: Partial<Doc<"users">> = {
      updatedAt: Date.now(),
    };

    if (args.name !== undefined) {
      updates.name = args.name;
    }

    if (args.avatar !== undefined) {
      updates.avatar = args.avatar;
    }

    await ctx.db.patch(user._id, updates);
    return user._id;
  },
});

/**
 * List all users (admin function example)
 */
export const listUsers = query({
  args: { 
    limit: v.optional(v.number()),
    paginationOpts: v.optional(v.object({
      numItems: v.number(),
      cursor: v.union(v.string(), v.null()),
    }))
  },
  handler: async (ctx, args) => {
    // In a real app, you'd want to check admin permissions here
    const limit = args.limit ?? 20;
    
    return await ctx.db
      .query("users")
      .order("desc")
      .take(limit);
  },
});
{{else}}
import { query, mutation } from "../_generated/server";
import { v } from "convex/values";

// User functions without authentication
// These are placeholder functions - implement based on your needs

/**
 * Get user by ID (placeholder)
 */
export const getUser = query({
  args: { id: v.string() },
  handler: async (ctx, args) => {
    // TODO: Implement user retrieval logic
    return {
      id: args.id,
      name: "Placeholder User",
      email: "user@example.com",
    };
  },
});

/**
 * Create user (placeholder)
 */
export const createUser = mutation({
  args: { 
    name: v.string(),
    email: v.string(),
  },
  handler: async (ctx, args) => {
    // TODO: Implement user creation logic
    return {
      id: "placeholder-id",
      name: args.name,
      email: args.email,
      message: "User creation not implemented - no auth configured"
    };
  },
});
{{/if}}