/**
 * Database Setup Script
 * @module dbSetup
 * @description Automated database setup and migration for Drizzle ORM
 */

{{#if (eq database "postgres")}}
import { Client } from 'pg'
{{else if (eq database "mysql")}}
import mysql from 'mysql2/promise'
{{/if}}
import * as dotenv from 'dotenv'

dotenv.config()

async function setupDatabase() {
  console.log('[DB] Setting up database...')
  
  {{#if (eq database "postgres")}}
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  })

  try {
    await client.connect()
    console.log('[DB] Connected to PostgreSQL database')
    
    // Create users table
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email TEXT NOT NULL UNIQUE,
        name TEXT,
        password TEXT,
        created_at TIMESTAMP DEFAULT NOW() NOT NULL,
        updated_at TIMESTAMP DEFAULT NOW() NOT NULL
      )
    `)
    
    console.log('[DB] Users table created successfully')
    
    {{#if (includes authProvider "auth")}}
    // Create Auth.js tables if needed
    await client.query(`
      CREATE TABLE IF NOT EXISTS accounts (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        type TEXT NOT NULL,
        provider TEXT NOT NULL,
        provider_account_id TEXT NOT NULL,
        refresh_token TEXT,
        access_token TEXT,
        expires_at INTEGER,
        token_type TEXT,
        scope TEXT,
        id_token TEXT,
        session_state TEXT,
        UNIQUE(provider, provider_account_id)
      )
    `)
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS sessions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        session_token TEXT NOT NULL UNIQUE,
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        expires TIMESTAMP NOT NULL
      )
    `)
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS verification_tokens (
        identifier TEXT NOT NULL,
        token TEXT NOT NULL UNIQUE,
        expires TIMESTAMP NOT NULL,
        PRIMARY KEY (identifier, token)
      )
    `)
    
    console.log('[DB] Auth.js tables created successfully')
    {{/if}}
    
  } catch (error) {
    console.error('[ERROR] Database setup failed:', error)
    process.exit(1)
  } finally {
    await client.end()
    console.log('[DB] Database connection closed')
  }
  {{else if (eq database "mysql")}}
  const connection = await mysql.createConnection(process.env.DATABASE_URL!)

  try {
    console.log('[DB] Connected to MySQL database')
    
    // Create users table
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
        email VARCHAR(255) NOT NULL UNIQUE,
        name VARCHAR(255),
        password VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL
      )
    `)
    
    console.log('[DB] Users table created successfully')
    
  } catch (error) {
    console.error('[ERROR] Database setup failed:', error)
    process.exit(1)
  } finally {
    await connection.end()
    console.log('[DB] Database connection closed')
  }
  {{else if (eq database "sqlite")}}
  console.log('[INFO] SQLite database will be created automatically when the app starts')
  console.log('[INFO] No manual setup required for SQLite')
  {{else}}
  console.log('[WARN] Database setup not configured for {{database}}')
  {{/if}}
}

setupDatabase()