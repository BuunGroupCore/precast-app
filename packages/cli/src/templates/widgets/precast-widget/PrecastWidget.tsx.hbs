{{#if (eq framework "next")}}'use client';

{{/if}}/**
 * PrecastWidget - Main Orchestrator Component
 * Refactored version using modular components and hooks
 * Maintains exact same functionality as original monolithic version
 */

/* eslint-disable @typescript-eslint/no-unused-vars, react-hooks/exhaustive-deps */
import React, { useState, useEffect } from 'react';

// Types
import { AuthMode } from '@/components/precast/types';

// Hooks
import { usePrecastConfig } from '@/components/precast/hooks/usePrecastConfig';
import { useSystemInfo } from '@/components/precast/hooks/useSystemInfo';
import { useServiceRegistry } from '@/components/precast/hooks/useServiceRegistry';
import { useGenericTesting } from '@/components/precast/hooks/useGenericTesting';

// Components
import { FloatingButton } from '@/components/precast/components/FloatingButton';
import { ServicePanel } from '@/components/precast/components/ServicePanel';

// Services
import { testApiHealth } from '@/components/precast/services/apiService';
import { testDatabaseConnection } from '@/components/precast/services/databaseService';
import { testDockerHealth } from '@/components/precast/services/dockerService';
import { testEmailService } from '@/components/precast/services/emailService';
import { testAuthService, testAuthStatus } from '@/components/precast/services/authService';

// Utils
import { isDevelopment } from '@/components/precast/utils/environmentUtils';

/**
 * PrecastWidget - Modular service validation and testing widget
 * Validates that Docker containers, databases, and other services are working correctly
 */
export function PrecastWidget() {
  // UI State
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [activeTab, setActiveTab] = useState<string>("{{#if database}}database{{else}}api{{/if}}");

  {{#if authProvider}}
  // Auth testing state (must be at top level)
  const [authMode, setAuthMode] = useState<AuthMode>('signup');
  const [authEmail, setAuthEmail] = useState('test@example.com');
  const [authPassword, setAuthPassword] = useState('TestPassword123!');
  const [authName, setAuthName] = useState('Test User');
  {{/if}}

  // Custom hooks
  const { precastConfig } = usePrecastConfig();
  const { systemInfo, setSystemInfo, refetch: fetchSystemInfo } = useSystemInfo();
  const { services, defaultActiveTab } = useServiceRegistry(precastConfig);
  const { testResults, loading, addTestResult, setLoading } = useGenericTesting();

  // Only show in development
  const isDev = isDevelopment();

  // Set default active tab when services change
  useEffect(() => {
    if (defaultActiveTab && !activeTab) {
      setActiveTab(defaultActiveTab);
    }
  }, [defaultActiveTab]);

  // Effect to check Docker status when config is loaded
  useEffect(() => {
    if (precastConfig?.docker && services.docker) {
      handleTestDocker();
    }
  }, [precastConfig]);
  
  {{#if authProvider}}
  // Effect to check auth status when config is loaded
  useEffect(() => {
    if (precastConfig && services.auth) {
      handleTestAuthStatus();
    }
  }, [precastConfig]);
  {{/if}}

  // Initialize panel state from localStorage
  useEffect(() => {
    const savedState = localStorage.getItem("adminPanelOpen");
    if (savedState === "true") {
      setIsOpen(true);
    }
  }, []);

  if (!isDev) {
    return null;
  }

  // Panel toggle handler
  const togglePanel = () => {
    const newState = !isOpen;
    setIsOpen(newState);
    localStorage.setItem("adminPanelOpen", String(newState));
    if (newState) {
      setIsMinimized(false);
      fetchSystemInfo();
    }
  };

  const handleMinimize = () => {
    setIsMinimized(!isMinimized);
  };

  // Service test handlers - exact copies from original
  {{#if database}}
  const handleTestDatabase = () => {
    testDatabaseConnection(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if backend}}
  const handleTestApi = () => {
    testApiHealth(setLoading, addTestResult, setSystemInfo, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if docker}}
  const handleTestDocker = () => {
    testDockerHealth(setLoading, addTestResult, services, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if (includes plugins 'resend')}}
  const handleTestEmail = () => {
    testEmailService(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  {{#if authProvider}}
  const handleTestAuth = () => {
    testAuthService(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001', authMode, authEmail, authPassword, authName);
  };

  const handleTestAuthStatus = () => {
    testAuthStatus(setLoading, addTestResult, systemInfo?.apiPort ? `http://localhost:${systemInfo.apiPort}` : 'http://localhost:3001');
  };
  {{/if}}

  return (
    <>
      <FloatingButton 
        isOpen={isOpen}
        onToggle={togglePanel}
      />

      <ServicePanel
        isOpen={isOpen}
        isMinimized={isMinimized}
        services={services}
        activeTab={activeTab}
        testResults={testResults}
        loading={loading}
        systemInfo={systemInfo}
        onToggle={togglePanel}
        onMinimize={handleMinimize}
        onTabChange={setActiveTab}
        {{#if database}}
        onTestDatabase={handleTestDatabase}
        {{/if}}
        {{#if backend}}
        onTestApi={handleTestApi}
        {{/if}}
        {{#if docker}}
        onTestDocker={handleTestDocker}
        {{/if}}
        {{#if (includes plugins 'resend')}}
        onTestEmail={handleTestEmail}
        {{/if}}
        {{#if authProvider}}
        onTestAuth={handleTestAuth}
        onTestAuthStatus={handleTestAuthStatus}
        authMode={authMode}
        authEmail={authEmail}
        authPassword={authPassword}
        authName={authName}
        onAuthModeChange={setAuthMode}
        onAuthEmailChange={setAuthEmail}
        onAuthPasswordChange={setAuthPassword}
        onAuthNameChange={setAuthName}
        {{/if}}
      />
    </>
  );
}