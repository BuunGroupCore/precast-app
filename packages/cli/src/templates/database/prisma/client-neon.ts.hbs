import { PrismaClient } from "@prisma/client";

/**
 * Global variable to store Prisma Client instance
 * @description Prevents multiple instances in development with hot reloading
 */
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

/**
 * Prisma Client instance for Neon serverless PostgreSQL
 * @description Pre-configured client optimized for Neon's serverless architecture
 */
export const db =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: process.env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
    {{#if (eq runtime "deno")}}
    // Deno-specific configuration for edge compatibility
    __internal: {
      engine: {
        closePromise: undefined,
      },
    },
    {{/if}}
  });

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = db;

/**
 * Database health check
 * @description Verifies Neon database connection is working
 */
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    await db.$queryRaw`SELECT 1`;
    return true;
  } catch (error) {
    console.error("Neon database connection failed:", error);
    return false;
  }
}

/**
 * Connection info  
 * @description Display connection information for debugging
 */
export async function getDatabaseInfo() {
  try {
    const result = await db.$queryRaw`SELECT version(), current_database()` as Array<{
      version: string;
      current_database: string;
    }>;
    
    return {
      type: "neon-postgresql",
      version: result[0]?.version,
      database: result[0]?.current_database,
      status: "connected"
    };
  } catch (error) {
    return {
      type: "neon-postgresql", 
      status: "error",
      error: error instanceof Error ? error.message : "Unknown error"
    };
  }
}

/**
 * Graceful shutdown
 * @description Properly disconnect from database on app shutdown
 */
process.on("SIGINT", async () => {
  await db.$disconnect();
  process.exit(0);
});

/**
 * Export for use in API routes and server components
 */
export default db;