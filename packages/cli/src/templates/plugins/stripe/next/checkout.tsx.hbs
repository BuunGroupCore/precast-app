'use client';

{{#if typescript}}
import React, { useState, FormEvent, useEffect } from "react";
import {
  PaymentElement,
  Elements,
  useStripe,
  useElements,
} from "@stripe/react-stripe-js";
import { loadStripe, Stripe, StripeElementsOptions } from "@stripe/stripe-js";

// Initialize Stripe
const stripePromise: Promise<Stripe | null> = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || ""
);

interface CheckoutFormProps {
  amount: number;
  currency?: string;
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

function CheckoutFormContent({ 
  amount, 
  currency = "usd", 
  onSuccess, 
  onError 
}: CheckoutFormProps) {
  const stripe = useStripe();
  const elements = useElements();
  const [error, setError] = useState<string | null>(null);
  const [processing, setProcessing] = useState(false);
  const [succeeded, setSucceeded] = useState(false);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setProcessing(true);
    setError(null);

    try {
      // Create payment intent on your server
      const response = await fetch("/api/stripe/create-intent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ amount, currency }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const { clientSecret } = await response.json();

      if (!clientSecret) {
        throw new Error("No client secret returned from server");
      }

      // Confirm payment with Stripe
      const result = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/payment/success`,
        },
        redirect: "if_required",
      });

      if (result.error) {
        const errorMessage = result.error.message || "An error occurred during payment";
        setError(errorMessage);
        onError?.(errorMessage);
      } else if (result.paymentIntent?.status === "succeeded") {
        setSucceeded(true);
        onSuccess?.();
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "An unexpected error occurred";
      setError(errorMessage);
      onError?.(errorMessage);
    } finally {
      setProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="stripe-checkout-form space-y-4">
      <PaymentElement 
        options=\{{
          layout: "tabs"
        }}
      />
      
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md" role="alert">
          <strong className="font-medium">Payment Error:</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      <button 
        disabled={!stripe || processing || succeeded}
        className={`w-full py-3 px-4 rounded-md font-medium transition-colors ${
          processing || !stripe || succeeded
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500'
        } text-white`}
      >
        {processing 
          ? "Processing..." 
          : succeeded 
          ? "Payment Successful!" 
          : `Pay $${(amount / 100).toFixed(2)} ${currency.toUpperCase()}`
        }
      </button>

      {succeeded && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md">
          <strong className="font-medium">Success!</strong>
          <span className="block sm:inline"> Payment completed successfully. Thank you!</span>
        </div>
      )}
    </form>
  );
}

export default function CheckoutForm({ 
  amount, 
  currency = "usd", 
  onSuccess, 
  onError 
}: CheckoutFormProps) {
  const [clientSecret, setClientSecret] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [initError, setInitError] = useState<string | null>(null);

  useEffect(() => {
    let isCancelled = false;

    // Create PaymentIntent as soon as the component loads
    const createPaymentIntent = async () => {
      try {
        const response = await fetch("/api/stripe/create-intent", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount, currency }),
        });

        if (!response.ok) {
          throw new Error(`Failed to create payment intent: ${response.status}`);
        }

        const data = await response.json();
        
        if (!isCancelled) {
          setClientSecret(data.clientSecret);
          setLoading(false);
        }
      } catch (err) {
        if (!isCancelled) {
          const errorMessage = err instanceof Error ? err.message : "Failed to initialize payment";
          setInitError(errorMessage);
          setLoading(false);
          onError?.(errorMessage);
        }
      }
    };

    createPaymentIntent();

    return () => {
      isCancelled = true;
    };
  }, [amount, currency, onError]);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Initializing payment...</span>
      </div>
    );
  }

  if (initError) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
        <strong className="font-medium">Initialization Error:</strong>
        <span className="block sm:inline"> {initError}</span>
      </div>
    );
  }

  const options: StripeElementsOptions = {
    clientSecret,
    appearance: {
      theme: "stripe",
      variables: {
        colorPrimary: "#0570de",
        colorBackground: "#ffffff",
        colorText: "#30313d",
        colorDanger: "#df1b41",
        fontFamily: "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
        borderRadius: "6px",
        spacingUnit: "4px",
      },
      rules: {
        ".Input": {
          borderColor: "#d1d5db",
          borderRadius: "6px",
        },
        ".Input:focus": {
          borderColor: "#0570de",
          boxShadow: "0 0 0 2px rgba(5, 112, 222, 0.1)",
        },
        ".Label": {
          color: "#374151",
          fontSize: "14px",
          fontWeight: "500",
        },
      },
    },
  };

  return (
    <div className="checkout-container max-w-md mx-auto bg-white p-6 rounded-lg shadow-sm border">
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Complete your payment
        </h3>
        <p className="text-sm text-gray-600">
          Amount: <span className="font-medium">${(amount / 100).toFixed(2)} {currency.toUpperCase()}</span>
        </p>
      </div>
      
      {clientSecret && (
        <Elements options={options} stripe={stripePromise}>
          <CheckoutFormContent 
            amount={amount} 
            currency={currency} 
            onSuccess={onSuccess}
            onError={onError}
          />
        </Elements>
      )}
    </div>
  );
}

/**
 * Stripe Checkout Form
 * @module CheckoutForm
 * @description Complete Stripe payment component with Elements integration
 */
{{else}}
import React, { useState, useEffect } from "react";
import {
  PaymentElement,
  Elements,
  useStripe,
  useElements,
} from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

// Initialize Stripe
const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || ""
);

function CheckoutFormContent({ amount, currency = "usd", onSuccess, onError }) {
  const stripe = useStripe();
  const elements = useElements();
  const [error, setError] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [succeeded, setSucceeded] = useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setProcessing(true);
    setError(null);

    try {
      // Create payment intent on your server
      const response = await fetch("/api/stripe/create-intent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ amount, currency }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const { clientSecret } = await response.json();

      if (!clientSecret) {
        throw new Error("No client secret returned from server");
      }

      // Confirm payment with Stripe
      const result = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/payment/success`,
        },
        redirect: "if_required",
      });

      if (result.error) {
        const errorMessage = result.error.message || "An error occurred during payment";
        setError(errorMessage);
        onError && onError(errorMessage);
      } else if (result.paymentIntent && result.paymentIntent.status === "succeeded") {
        setSucceeded(true);
        onSuccess && onSuccess();
      }
    } catch (err) {
      const errorMessage = err.message || "An unexpected error occurred";
      setError(errorMessage);
      onError && onError(errorMessage);
    } finally {
      setProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="stripe-checkout-form space-y-4">
      <PaymentElement 
        options=\{{
          layout: "tabs"
        }}
      />
      
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md" role="alert">
          <strong className="font-medium">Payment Error:</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      <button 
        disabled={!stripe || processing || succeeded}
        className={`w-full py-3 px-4 rounded-md font-medium transition-colors ${
          processing || !stripe || succeeded
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500'
        } text-white`}
      >
        {processing 
          ? "Processing..." 
          : succeeded 
          ? "Payment Successful!" 
          : `Pay $${(amount / 100).toFixed(2)} ${currency.toUpperCase()}`
        }
      </button>

      {succeeded && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md">
          <strong className="font-medium">Success!</strong>
          <span className="block sm:inline"> Payment completed successfully. Thank you!</span>
        </div>
      )}
    </form>
  );
}

export default function CheckoutForm({ amount, currency = "usd", onSuccess, onError }) {
  const [clientSecret, setClientSecret] = useState("");
  const [loading, setLoading] = useState(true);
  const [initError, setInitError] = useState(null);

  useEffect(() => {
    let isCancelled = false;

    // Create PaymentIntent as soon as the component loads
    const createPaymentIntent = async () => {
      try {
        const response = await fetch("/api/stripe/create-intent", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount, currency }),
        });

        if (!response.ok) {
          throw new Error(`Failed to create payment intent: ${response.status}`);
        }

        const data = await response.json();
        
        if (!isCancelled) {
          setClientSecret(data.clientSecret);
          setLoading(false);
        }
      } catch (err) {
        if (!isCancelled) {
          const errorMessage = err.message || "Failed to initialize payment";
          setInitError(errorMessage);
          setLoading(false);
          onError && onError(errorMessage);
        }
      }
    };

    createPaymentIntent();

    return () => {
      isCancelled = true;
    };
  }, [amount, currency, onError]);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-3 text-gray-600">Initializing payment...</span>
      </div>
    );
  }

  if (initError) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
        <strong className="font-medium">Initialization Error:</strong>
        <span className="block sm:inline"> {initError}</span>
      </div>
    );
  }

  const options = {
    clientSecret,
    appearance: {
      theme: "stripe",
      variables: {
        colorPrimary: "#0570de",
        colorBackground: "#ffffff",
        colorText: "#30313d",
        colorDanger: "#df1b41",
        fontFamily: "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
        borderRadius: "6px",
        spacingUnit: "4px",
      },
      rules: {
        ".Input": {
          borderColor: "#d1d5db",
          borderRadius: "6px",
        },
        ".Input:focus": {
          borderColor: "#0570de",
          boxShadow: "0 0 0 2px rgba(5, 112, 222, 0.1)",
        },
        ".Label": {
          color: "#374151",
          fontSize: "14px",
          fontWeight: "500",
        },
      },
    },
  };

  return (
    <div className="checkout-container max-w-md mx-auto bg-white p-6 rounded-lg shadow-sm border">
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Complete your payment
        </h3>
        <p className="text-sm text-gray-600">
          Amount: <span className="font-medium">${(amount / 100).toFixed(2)} {currency.toUpperCase()}</span>
        </p>
      </div>
      
      {clientSecret && (
        <Elements options={options} stripe={stripePromise}>
          <CheckoutFormContent 
            amount={amount} 
            currency={currency} 
            onSuccess={onSuccess}
            onError={onError}
          />
        </Elements>
      )}
    </div>
  );
}
{{/if}}