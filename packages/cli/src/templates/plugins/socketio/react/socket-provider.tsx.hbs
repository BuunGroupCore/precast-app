/**
 * Socket.io React Provider
 * @module socket-provider
 * @description React context provider for Socket.io connection management
 */

import React, { createContext, useContext, useEffect, useState } from 'react';
import { io, Socket } from 'socket.io-client';

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
}

const SocketContext = createContext<SocketContextType>({
  socket: null,
  isConnected: false,
});

interface SocketProviderProps {
  children: React.ReactNode;
  serverUrl?: string;
}

/**
 * Socket.io context provider component
 * @param {SocketProviderProps} props - Provider props
 * @returns {JSX.Element} Provider wrapper with socket context
 */
export const SocketProvider: React.FC<SocketProviderProps> = ({
  children,
  serverUrl = process.env.REACT_APP_SOCKET_SERVER_URL || 'http://localhost:3001',
}) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    const socketInstance = io(serverUrl, {
      transports: ['websocket', 'polling'],
      withCredentials: true,
    });

    socketInstance.on('connect', () => {
      console.log('Socket connected:', socketInstance.id);
      setIsConnected(true);
    });

    socketInstance.on('disconnect', (reason) => {
      console.log('Socket disconnected:', reason);
      setIsConnected(false);
    });

    socketInstance.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
      setIsConnected(false);
    });

    socketInstance.on('reconnect', (attemptNumber) => {
      console.log('Socket reconnected after', attemptNumber, 'attempts');
      setIsConnected(true);
    });

    setSocket(socketInstance);

    return () => {
      socketInstance.close();
      setSocket(null);
      setIsConnected(false);
    };
  }, [serverUrl]);

  const value = {
    socket,
    isConnected,
  };

  return (
    <SocketContext.Provider value={value}>
      {children}
    </SocketContext.Provider>
  );
};

/**
 * Hook to access socket context
 * @returns {SocketContextType} Socket context value
 * @throws {Error} When used outside SocketProvider
 */
export const useSocketContext = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocketContext must be used within a SocketProvider');
  }
  return context;
};

/**
 * Connection status indicator component
 * @returns {JSX.Element} Visual connection status indicator
 */
export const ConnectionStatus: React.FC = () => {
  const { isConnected } = useSocketContext();

  return (
    <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
      isConnected 
        ? 'bg-green-100 text-green-800' 
        : 'bg-red-100 text-red-800'
    }`}>
      <div 
        className={`w-2 h-2 rounded-full mr-1 ${
          isConnected ? 'bg-green-400' : 'bg-red-400'
        }`} 
      />
      {isConnected ? 'Connected' : 'Disconnected'}
    </div>
  );
};