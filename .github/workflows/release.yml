name: Release

on:
  push:
    branches:
      - main
    paths:
      - "packages/website/**"
      - ".changeset/**"
      - "package.json"
      - "pnpm-lock.yaml"
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'Deploy to Cloudflare Pages only (skip release)'
        required: false
        default: false
        type: boolean

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release & Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.deploy_only)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Workspace Dependencies
        run: pnpm --filter @precast/ui build

      - name: Build Website
        run: pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Run Tests
        run: pnpm --filter website test

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
          commit: "chore: release website"
          title: "chore: release website"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}

      - name: Send Slack notification
        if: steps.changesets.outputs.published == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                text: `ðŸš€ PRECAST Website released! Version: ${steps.changesets.outputs.publishedPackages[0].version}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Workspace Dependencies
        run: pnpm --filter @precast/ui build

      - name: Build Website for Production
        run: pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: precast-website
          directory: packages/website/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: "3"

      - name: Update PostHog with deployment
        run: |
          curl -X POST ${{ secrets.POSTHOG_HOST }}/capture/ \
            -H 'Content-Type: application/json' \
            -d '{
              "api_key": "${{ secrets.POSTHOG_API_KEY }}",
              "event": "website_deployed",
              "properties": {
                "environment": "production",
                "commit": "${{ github.sha }}",
                "deployment_platform": "cloudflare_pages"
              },
              "distinct_id": "github-actions"
            }'
