{{#if config.auth}}
from datetime import timedelta
from typing import Any
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
{{#if config.database}}
{{#unless (eq config.database "none")}}
{{#if (eq config.database "mongodb")}}
from app.core.database import get_database
{{else}}
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import get_db
{{/if}}
from app.crud.user import user_crud
{{/unless}}
{{/if}}
from app.core.security import create_access_token, verify_password
from app.core.config import settings
from app.schemas.auth import Token, UserCreate, UserResponse
from app.api.deps import get_current_active_user

router = APIRouter()


@router.post("/register", response_model=UserResponse)
async def register(
    *,
    {{#if config.database}}
    {{#unless (eq config.database "none")}}
    {{#if (eq config.database "mongodb")}}
    db = Depends(get_database),
    {{else}}
    db: AsyncSession = Depends(get_db),
    {{/if}}
    {{/unless}}
    {{/if}}
    user_in: UserCreate,
) -> Any:
    """Register a new user"""
    {{#if config.database}}
    {{#unless (eq config.database "none")}}
    # Check if user already exists
    user = await user_crud.get_by_email(db, email=user_in.email)
    if user:
        raise HTTPException(
            status_code=400,
            detail="The user with this username already exists in the system.",
        )
    
    # Create user
    user = await user_crud.create(db, obj_in=user_in)
    return user
    {{else}}
    # TODO: Implement user registration without database
    raise HTTPException(
        status_code=501,
        detail="User registration not implemented - no database configured"
    )
    {{/unless}}
    {{/if}}


@router.post("/login", response_model=Token)
async def login_for_access_token(
    {{#if config.database}}
    {{#unless (eq config.database "none")}}
    {{#if (eq config.database "mongodb")}}
    db = Depends(get_database),
    {{else}}
    db: AsyncSession = Depends(get_db),
    {{/if}}
    {{/unless}}
    {{/if}}
    form_data: OAuth2PasswordRequestForm = Depends()
) -> Any:
    """OAuth2 compatible token login, get an access token for future requests"""
    {{#if config.database}}
    {{#unless (eq config.database "none")}}
    user = await user_crud.authenticate(
        db, email=form_data.username, password=form_data.password
    )
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    elif not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, 
            detail="Inactive user"
        )
    
    access_token_expires = timedelta(minutes=settings.access_token_expire_minutes)
    return {
        "access_token": create_access_token(
            data={"sub": str(user.id)}, expires_delta=access_token_expires
        ),
        "token_type": "bearer",
    }
    {{else}}
    # TODO: Implement authentication without database
    raise HTTPException(
        status_code=501,
        detail="Authentication not implemented - no database configured"
    )
    {{/unless}}
    {{/if}}


@router.post("/test-token", response_model=UserResponse)
async def test_token(current_user = Depends(get_current_active_user)) -> Any:
    """Test access token"""
    return current_user
{{else}}
# Authentication not configured
from fastapi import APIRouter

router = APIRouter()

# Placeholder router - authentication not configured
# Add your authentication endpoints here if needed later
{{/if}}