/**
 * Cloudinary Integration
 * @module cloudinary
 * @description Image upload, optimization, and display components using Cloudinary
 */

import { AdvancedImage, lazyload, responsive, placeholder } from '@cloudinary/react';
import { Cloudinary } from '@cloudinary/url-gen';
import { auto } from '@cloudinary/url-gen/actions/resize';
import { autoGravity } from '@cloudinary/url-gen/qualifiers/gravity';
import { format, quality } from '@cloudinary/url-gen/actions/delivery';
import { auto as autoFormat } from '@cloudinary/url-gen/qualifiers/format';
import { auto as autoQuality } from '@cloudinary/url-gen/qualifiers/quality';

const cld = new Cloudinary({
  cloud: {
    cloudName: import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || '',
  },
});

/**
 * Cloudinary upload widget component
 * @param {object} props - Component props
 * @returns {JSX.Element} Upload widget button
 */
export function CloudinaryUploadWidget({
  onUpload,
  uploadPreset = 'default',
  folder = '',
}: {
  onUpload: (result: any) => void;
  uploadPreset?: string;
  folder?: string;
}) {
  const showWidget = () => {
    if (typeof window !== 'undefined' && (window as any).cloudinary) {
      const widget = (window as any).cloudinary.createUploadWidget(
        {
          cloudName: import.meta.env.VITE_CLOUDINARY_CLOUD_NAME,
          uploadPreset: uploadPreset,
          folder: folder,
          sources: ['local', 'url', 'camera', 'google_drive', 'dropbox'],
          multiple: true,
          maxFiles: 5,
          clientAllowedFormats: ['image', 'video'],
          maxFileSize: 10000000, // 10MB
        },
        (error: any, result: any) => {
          if (!error && result && result.event === 'success') {
            onUpload(result.info);
          } else if (error) {
            console.error('Upload error:', error);
          }
        }
      );
      widget.open();
    } else {
      console.error('Cloudinary widget script not loaded');
    }
  };

  return (
    <button
      onClick={showWidget}
      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
    >
      Upload to Cloudinary
    </button>
  );
}

/**
 * Optimized Cloudinary image component with automatic transformations
 * @param {object} props - Component props
 * @returns {JSX.Element} Optimized image component
 */
export function CloudinaryImage({
  publicId,
  alt = '',
  width,
  height,
  crop = 'auto',
}: {
  publicId: string;
  alt?: string;
  width?: number;
  height?: number;
  crop?: string;
}) {
  const image = cld
    .image(publicId)
    .resize(auto().gravity(autoGravity()).width(width).height(height))
    .delivery(format(autoFormat()))
    .delivery(quality(autoQuality()));

  return (
    <AdvancedImage
      cldImg={image}
      plugins={[lazyload(), responsive(), placeholder()]}
      alt={alt}
    />
  );
}

/**
 * Generate optimized Cloudinary URL
 * @param {string} publicId - Cloudinary public ID
 * @param {object} options - Transformation options
 * @returns {string} Optimized image URL
 */
export function getCloudinaryUrl(
  publicId: string,
  options: {
    width?: number;
    height?: number;
    crop?: string;
    quality?: string;
    format?: string;
  } = {}
) {
  let image = cld.image(publicId);
  
  if (options.width || options.height) {
    image = image.resize(
      auto()
        .gravity(autoGravity())
        .width(options.width)
        .height(options.height)
    );
  }
  
  image = image
    .delivery(format(autoFormat()))
    .delivery(quality(autoQuality()));
  
  return image.toURL();
}

/**
 * Upload file to Cloudinary
 * @param {File} file - File to upload
 * @param {object} options - Upload options
 * @returns {Promise<object>} Upload result
 */
export async function uploadToCloudinary(file: File, options: any = {}) {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', options.uploadPreset || 'default');
  formData.append('cloud_name', import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || '');
  
  if (options.folder) {
    formData.append('folder', options.folder);
  }
  
  try {
    const response = await fetch(
      `https://api.cloudinary.com/v1_1/${import.meta.env.VITE_CLOUDINARY_CLOUD_NAME}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Upload error:', error);
    throw error;
  }
}

export { cld as cloudinary };