# DuckDB Configuration
# 
# DuckDB is perfect for static web applications - it runs entirely client-side!
# For static sites, you typically don't need server-side configuration.
# The WASM version works great with: Netlify, Vercel, GitHub Pages, etc.

{{#if (hasServerFramework framework)}}
# Server-side DuckDB configuration (Node.js API)
DUCKDB_PATH=./data/database.duckdb
DUCKDB_MEMORY_LIMIT=2GB
DUCKDB_THREADS=4

# Remote data sources (can be public URLs for static sites)
# DATA_SOURCE_URL=https://example.com/data.parquet
# CSV_SOURCE_URL=https://example.com/data.csv
{{/if}}

{{#if (hasClientFramework framework)}}
# Client-side DuckDB configuration (WASM)
# For static web apps, DuckDB WASM runs entirely in the browser
# No server or API required - just deploy static files!

# For multi-threading support, add these headers to your static host:
# Cross-Origin-Embedder-Policy: require-corp
# Cross-Origin-Opener-Policy: same-origin

# Optional: CDN configuration
# DUCKDB_CDN_BASE=https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm

# Data sources for static sites (publicly accessible URLs)
# PUBLIC_DATASET_URL=https://example.com/public-data.parquet
# CSV_DATA_URL=https://example.com/public-data.csv
{{/if}}

{{#if (and (hasServerFramework framework) (hasClientFramework framework))}}
# Hybrid setup environment variables
NODE_ENV=development

# Example: Use client-side for exploration, server-side for heavy processing
# CLIENT_MAX_DATASET_SIZE=100MB
{{/if}}