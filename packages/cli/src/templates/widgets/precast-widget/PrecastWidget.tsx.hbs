/* eslint-disable @typescript-eslint/no-unused-vars, react-hooks/exhaustive-deps */
import React, { useState, useEffect } from 'react';
import { 
  SiPostgresql, 
  SiDocker, 
  SiMongodb, 
  SiMysql,
  SiPrisma,
  SiRedis,
  SiSupabase,
  SiStripe,
  SiCloudflare,
  SiNgrok
} from 'react-icons/si';
import { 
  Server, 
  Database, 
  Mail,
  Activity,
  Container,
  Layers,
  Terminal,
  AlertTriangle,
  Shield,
  User,
  Route,
  Globe,
  Network
} from 'lucide-react';

interface TestResult {
  success: boolean;
  message: string;
  details?: unknown;
  timestamp: string;
}

interface SystemInfo {
  uptime: number;
  environment: string;
  apiPort?: number;
  dbPort?: number;
}

interface PrecastConfig {
  framework?: string;
  backend?: string;
  database?: string;
  orm?: string;
  docker?: boolean;
  powerups?: string[];
  [key: string]: unknown;
}

interface Service {
  name: string;
  type: string;
  icon: string;
  port?: number;
  testEndpoint?: string;
  containers?: Array<{ name: string; port: number; icon: string }>;
}

interface AuthDetails {
  email?: string;
  user?: {
    email?: string;
    [key: string]: unknown;
  };
  session?: unknown;
  token?: unknown;
  [key: string]: unknown;
}

// Framework-specific environment variable access
const getApiUrl = () => {
  {{#if (eq framework "next")}}
  return process.env.NEXT_PUBLIC_API_URL;
  {{else if (eq framework "nuxt")}}
  return process.env.NUXT_PUBLIC_API_URL;
  {{else if (eq framework "react-router")}}
  return process.env.REACT_APP_API_URL;
  {{else}}
  return import.meta.env.VITE_API_URL;
  {{/if}}
};

/**
 * PrecastWidget - Brutalist service validation and testing widget
 * Validates that Docker containers, databases, and other services are working correctly
 */
export function PrecastWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [activeTab, setActiveTab] = useState<string>("{{#if database}}database{{else}}api{{/if}}");
  const [testResults, setTestResults] = useState<Record<string, TestResult>>({});
  const [loading, setLoading] = useState<Record<string, boolean>>({});
  const [systemInfo, setSystemInfo] = useState<SystemInfo | null>(null);
  const [precastConfig, setPrecastConfig] = useState<PrecastConfig | null>(null);

  {{#if authProvider}}
  // Auth testing state (must be at top level)
  const [authMode, setAuthMode] = useState<'signup' | 'signin'>('signup');
  const [authEmail, setAuthEmail] = useState('test@example.com');
  const [authPassword, setAuthPassword] = useState('TestPassword123!');
  const [authName, setAuthName] = useState('Test User');
  {{/if}}

  // Only show in development - framework specific
  {{#if (eq framework "next")}}
  const isDevelopment = process.env.NODE_ENV === 'development';
  {{else if (eq framework "nuxt")}}
  const isDevelopment = process.env.NODE_ENV === 'development';
  {{else if (eq framework "react-router")}}
  const isDevelopment = process.env.NODE_ENV === 'development';
  {{else}}
  const isDevelopment = import.meta.env.DEV || import.meta.env.MODE === 'development';
  {{/if}}

  // Service icon mapping
  const getServiceIcon = (service: string, size: number = 16) => {
    const iconProps = { size, className: "{{#if (eq styling 'tailwind')}}text-black{{else}}icon-black{{/if}}" };
    const iconMap: Record<string, React.ReactNode> = {
      postgres: <SiPostgresql {...iconProps} />,
      postgresql: <SiPostgresql {...iconProps} />,
      mysql: <SiMysql {...iconProps} />,
      mongodb: <SiMongodb {...iconProps} />,
      prisma: <SiPrisma {...iconProps} />,
      docker: <SiDocker {...iconProps} />,
      redis: <SiRedis {...iconProps} />,
      supabase: <SiSupabase {...iconProps} />,
      stripe: <SiStripe {...iconProps} />,
      mail: <Mail {...iconProps} />,
      server: <Server {...iconProps} />,
      database: <Database {...iconProps} />,
      container: <Container {...iconProps} />,
      api: <Activity {...iconProps} />,
      auth: <Shield {...iconProps} />,
      user: <User {...iconProps} />,
      traefik: <Route {...iconProps} />,
      ngrok: <Globe {...iconProps} />,
      "cloudflare-tunnel": <SiCloudflare {...iconProps} />,
      cloudflare: <SiCloudflare {...iconProps} />,
      network: <Network {...iconProps} />,
      tunnel: <Globe {...iconProps} />,
      proxy: <Route {...iconProps} />,
    };
    return iconMap[service.toLowerCase()] || <Layers {...iconProps} />;
  };

  // Use useMemo to rebuild services when precastConfig changes
  const services = React.useMemo(() => {
    // Dynamically build services based on what's configured
    const detectedServices: Record<string, Service> = {};

    {{#if backend}}
    // API service
    const apiUrl = getApiUrl();
    if (apiUrl) {
      detectedServices.api = {
        name: "API",
        type: precastConfig?.backend || "{{backend}}",
        port: apiUrl.includes(":") ? parseInt(apiUrl.split(":").pop() || "3001") : 3001,
        icon: "server",
        testEndpoint: "/health",
      };
    }
    {{/if}}

    {{#if database}}
    // Database service
    if (precastConfig?.database && precastConfig.database !== "none") {
      detectedServices.database = {
        name: "DATABASE",
        type: precastConfig.database,
        port: {{#eq database 'postgres'}}5432{{else if (eq database 'mysql')}}3306{{else if (eq database 'mongodb')}}27017{{else}}5432{{/eq}},
        icon: precastConfig.database,
        testEndpoint: "/health/database",
      };
    }
    {{else}}
    // Fallback database service when no database is configured
    if (precastConfig?.database && precastConfig.database !== "none") {
      detectedServices.database = {
        name: "DATABASE",
        type: precastConfig.database,
        port: 5432,
        icon: precastConfig.database,
        testEndpoint: "/health/database",
      };
    }
    {{/if}}

    {{#if docker}}
    // Docker services - build containers array based on configuration
    if (precastConfig?.docker) {
      const containers: Array<{ name: string; port: number; icon: string }> = [];

      // Add database container
      if (precastConfig.database && precastConfig.database !== "none") {
        switch (precastConfig.database) {
          case "postgres":
          case "postgresql":
            containers.push(
              { name: "postgres:16-alpine", port: 5432, icon: "postgres" },
              { name: "pgadmin4", port: 5050, icon: "database" }
            );
            break;
          case "mysql":
            containers.push(
              { name: "mysql:8", port: 3306, icon: "mysql" },
              { name: "phpmyadmin", port: 8080, icon: "database" }
            );
            break;
          case "mongodb":
            containers.push(
              { name: "mongodb:latest", port: 27017, icon: "mongodb" },
              { name: "mongo-express", port: 8081, icon: "database" }
            );
            break;
        }
      }

      // Add powerup containers
      if (precastConfig.powerups && Array.isArray(precastConfig.powerups)) {
        precastConfig.powerups.forEach((powerup) => {
          switch (powerup) {
            case "traefik":
              containers.push(
                { name: "traefik:v3.0", port: 8080, icon: "traefik" },
                { name: "traefik-proxy", port: 80, icon: "proxy" }
              );
              break;
            case "ngrok":
              containers.push(
                { name: "ngrok/ngrok:alpine", port: 4040, icon: "ngrok" }
              );
              break;
            case "cloudflare-tunnel":
              containers.push(
                { name: "cloudflare/cloudflared", port: 0, icon: "cloudflare-tunnel" }
              );
              break;
          }
        });
      }

      detectedServices.docker = {
        name: "DOCKER",
        type: "compose",
        icon: "docker",
        containers,
      };
    }
    {{else}}
    // Fallback Docker service when docker isn't configured but detected in config
    if (precastConfig?.docker) {
      const containers: Array<{ name: string; port: number; icon: string }> = [];

      // Add database container
      if (precastConfig.database && precastConfig.database !== "none") {
        switch (precastConfig.database) {
          case "postgres":
          case "postgresql":
            containers.push(
              { name: "postgres:16-alpine", port: 5432, icon: "postgres" },
              { name: "pgadmin4", port: 5050, icon: "database" }
            );
            break;
          case "mysql":
            containers.push(
              { name: "mysql:8", port: 3306, icon: "mysql" },
              { name: "phpmyadmin", port: 8080, icon: "database" }
            );
            break;
          case "mongodb":
            containers.push(
              { name: "mongodb:latest", port: 27017, icon: "mongodb" },
              { name: "mongo-express", port: 8081, icon: "database" }
            );
            break;
        }
      }

      // Add powerup containers
      if (precastConfig.powerups && Array.isArray(precastConfig.powerups)) {
        precastConfig.powerups.forEach((powerup) => {
          switch (powerup) {
            case "traefik":
              containers.push(
                { name: "traefik:v3.0", port: 8080, icon: "traefik" },
                { name: "traefik-proxy", port: 80, icon: "proxy" }
              );
              break;
            case "ngrok":
              containers.push(
                { name: "ngrok/ngrok:alpine", port: 4040, icon: "ngrok" }
              );
              break;
            case "cloudflare-tunnel":
              containers.push(
                { name: "cloudflare/cloudflared", port: 0, icon: "cloudflare-tunnel" }
              );
              break;
          }
        });
      }

      detectedServices.docker = {
        name: "DOCKER",
        type: "compose",
        icon: "docker",
        containers,
      };
    }
    {{/if}}
    
    {{#if (includes plugins 'resend')}}
    // Email service
    detectedServices.email = {
      name: "EMAIL",
      type: "resend",
      icon: "mail"
    };
    {{/if}}

    {{#if (includes plugins 'stripe')}}
    // Payment service
    detectedServices.payment = {
      name: "PAYMENT",
      type: "stripe",
      icon: "stripe"
    };
    {{/if}}
    
    {{#if authProvider}}
    // Authentication service
    detectedServices.auth = {
      name: "AUTH",
      type: "{{authProvider}}",
      icon: "auth"
    };
    {{/if}}

    return detectedServices;
  }, [precastConfig]);

  const loadPrecastConfig = async () => {
    try {
      // Try to fetch precast.jsonc from the project root
      const response = await fetch("/precast.jsonc");
      if (response.ok) {
        // Try to parse as JSON first (most precast.jsonc files are valid JSON)
        try {
          const config = await response.json();
          setPrecastConfig(config);
        } catch (jsonError) {
          // If JSON parsing fails, try JSONC parsing
          const text = await response.text();
          const cleanJson = text
            .replace(/\/\*[\s\S]*?\*\//g, "") // Remove multi-line comments
            .replace(/^\s*\/\/.*$/gm, "") // Remove single-line comments (only at start of line)
            .replace(/,\s*([}\]])/g, "$1"); // Remove trailing commas
          
          const config = JSON.parse(cleanJson);
          setPrecastConfig(config);
        }
      } else {
        // Fallback to default config if file not found
        setPrecastConfig({
          docker: {{#if docker}}true{{else}}false{{/if}},
          database: "{{database}}",
          backend: "{{backend}}",
          powerups: [{{#each powerups}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}],
        });
      }
    } catch (error) {
      console.error("Failed to load precast config:", error);
      // Set a default configuration
      setPrecastConfig({
        docker: {{#if docker}}true{{else}}false{{/if}},
        database: "{{database}}",
        backend: "{{backend}}",
        powerups: [{{#each powerups}}"{{this}}"{{#unless @last}},{{/unless}}{{/each}}],
      });
    }
  };

  useEffect(() => {
    // Check if admin panel should be open by default (from localStorage)
    const savedState = localStorage.getItem("adminPanelOpen");
    if (savedState === "true") {
      setIsOpen(true);
    }

    // Load precast configuration
    loadPrecastConfig();

    // Fetch system info
    fetchSystemInfo();
  }, []);

  // Effect to check Docker status when config is loaded
  useEffect(() => {
    if (precastConfig?.docker && services.docker) {
      testDockerHealth();
    }
  }, [precastConfig]);
  
  {{#if authProvider}}
  // Effect to check auth status when config is loaded
  useEffect(() => {
    if (precastConfig && services.auth) {
      testAuthStatus();
    }
  }, [precastConfig]);
  {{/if}}

  if (!isDevelopment) {
    return null;
  }

  const fetchSystemInfo = async () => {
    try {
      const apiUrl = getApiUrl() || "";
      {{#if (includes powerups "ngrok")}}
      const headers: HeadersInit = {};
      
      // Add ngrok header if using ngrok
      if (apiUrl.includes('ngrok')) {
        headers["ngrok-skip-browser-warning"] = "true";
      }
      
      const response = await fetch(`${apiUrl}/api/health`, {
        headers,
      });
      {{else}}
      const response = await fetch(`${apiUrl}/api/health`);
      {{/if}}
      if (response.ok) {
        const data = await response.json();
        setSystemInfo({
          uptime: data.uptime || 0,
          environment: data.environment || 'development',
          apiPort: {{#if backend}}3001{{else}}undefined{{/if}},
          dbPort: {{#if database}}{{#eq database 'postgres'}}5432{{else if (eq database 'mysql')}}3306{{else if (eq database 'mongodb')}}27017{{else}}5432{{/eq}}{{else}}undefined{{/if}}
        });
      }
    } catch (error) {
      console.error("Failed to fetch system info:", error);
      // Set default system info when API is unavailable
      setSystemInfo({
        uptime: 0,
        environment: 'development',
        apiPort: {{#if backend}}3001{{else}}0{{/if}},
        dbPort: {{#if database}}{{#eq database 'postgres'}}5432{{else if (eq database 'mysql')}}3306{{else if (eq database 'mongodb')}}27017{{else}}5432{{/eq}}{{else}}undefined{{/if}}
      });
    }
  };

  const addTestResult = (service: string, result: Omit<TestResult, "timestamp">) => {
    setTestResults((prev) => ({
      ...prev,
      [service]: {
        ...result,
        timestamp: new Date().toISOString(),
      },
    }));
  };

  {{#if database}}
  // Database Connection Test
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testDatabaseConnection = async () => {
    setLoading((prev) => ({ ...prev, database: true }));
    try {
      const apiUrl = getApiUrl() || "";
      {{#if (includes powerups "ngrok")}}
      const headers: HeadersInit = { "Content-Type": "application/json" };
      
      // Add ngrok header if using ngrok
      if (apiUrl.includes('ngrok')) {
        headers["ngrok-skip-browser-warning"] = "true";
      }
      
      const response = await fetch(`${apiUrl}/api/health/database`, {
        method: "GET",
        headers,
        credentials: "include",
      });
      {{else}}
      const response = await fetch(`${apiUrl}/api/health/database`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      {{/if}}

      const data = await response.json();

      if (response.ok) {
        addTestResult("database", {
          success: true,
          message: "DATABASE CONNECTED",
          details: data,
        });
      } else {
        addTestResult("database", {
          success: false,
          message: "CONNECTION FAILED",
          details: data.error,
        });
      }
    } catch (error) {
      addTestResult("database", {
        success: false,
        message: "NETWORK ERROR",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, database: false }));
    }
  };
  {{/if}}

  {{#if backend}}
  // API Health Check
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testApiHealth = async () => {
    setLoading((prev) => ({ ...prev, api: true }));
    try {
      const apiUrl = getApiUrl() || "";
      {{#if (includes powerups "ngrok")}}
      const headers: HeadersInit = {};
      
      // Add ngrok header if using ngrok
      if (apiUrl.includes('ngrok')) {
        headers["ngrok-skip-browser-warning"] = "true";
      }
      
      const response = await fetch(`${apiUrl}/api/health`, {
        headers,
      });
      {{else}}
      const response = await fetch(`${apiUrl}/api/health`);
      {{/if}}
      const data = await response.json();

      if (response.ok) {
        addTestResult("api", {
          success: true,
          message: "API HEALTHY",
          details: data,
        });
        setSystemInfo({
          uptime: data.uptime || 0,
          environment: data.environment || 'development',
          apiPort: 3001,
          dbPort: {{#if database}}{{#eq database 'postgres'}}5432{{else if (eq database 'mysql')}}3306{{else if (eq database 'mongodb')}}27017{{else}}5432{{/eq}}{{else}}undefined{{/if}}
        });
      } else {
        addTestResult("api", {
          success: false,
          message: "API UNHEALTHY",
          details: data,
        });
      }
    } catch (error) {
      addTestResult("api", {
        success: false,
        message: "API UNREACHABLE",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, api: false }));
    }
  };
  {{/if}}

  {{#if docker}}
  // Docker Health Check
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testDockerHealth = async () => {
    setLoading((prev) => ({ ...prev, docker: true }));
    try {
      // Check if database is accessible (which indicates Docker is running)
      const apiUrl = getApiUrl() || "";
      {{#if (includes powerups "ngrok")}}
      const headers: HeadersInit = { "Content-Type": "application/json" };
      
      // Add ngrok header if using ngrok
      if (apiUrl.includes('ngrok')) {
        headers["ngrok-skip-browser-warning"] = "true";
      }
      
      const response = await fetch(`${apiUrl}/api/health/database`, {
        method: "GET",
        headers,
        credentials: "include",
      });
      {{else}}
      const response = await fetch(`${apiUrl}/api/health/database`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      {{/if}}

      if (response.ok) {
        const data = await response.json();
        addTestResult("docker", {
          success: true,
          message: "DOCKER RUNNING",
          details: {
            status: "Containers are running",
            database: data.database || "Connected",
            services: services.docker?.containers || []
          },
        });
      } else if (response.status === 500 || response.status === 503) {
        // Database connection failed - likely Docker is not running
        addTestResult("docker", {
          success: false,
          message: "DOCKER NOT RUNNING",
          details: "Docker containers may not be running. Run: cd docker && docker compose up -d",
        });
      } else {
        addTestResult("docker", {
          success: false,
          message: "DOCKER STATUS UNKNOWN",
          details: "Unable to determine Docker status",
        });
      }
    } catch (error) {
      addTestResult("docker", {
        success: false,
        message: "DOCKER CHECK FAILED",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, docker: false }));
    }
  };
  {{/if}}

  {{#if (includes plugins 'resend')}}
  // Email Service Test
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testEmailService = async () => {
    setLoading((prev) => ({ ...prev, email: true }));
    try {
      const apiUrl = getApiUrl() || "";
      
      // First test email service health
      const healthResponse = await fetch(`${apiUrl}/api/email/health`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });

      if (!healthResponse.ok) {
        throw new Error("Email service unavailable");
      }

      // Then send a test email
      const testResponse = await fetch(`${apiUrl}/api/email`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          type: "notification",
          to: "test@example.com", // This would normally come from config
          subject: "{{name}} - Email Service Test",
          title: "Email Service Test",
          message: "This is a test email from your {{name}} application. Email service is working correctly!"
        }),
      });

      const data = await testResponse.json();

      if (testResponse.ok) {
        addTestResult("email", {
          success: true,
          message: "EMAIL SERVICE ACTIVE",
          details: {
            provider: "Resend",
            status: "Email sent successfully",
            id: data.id,
          },
        });
      } else {
        addTestResult("email", {
          success: false,
          message: "EMAIL SEND FAILED",
          details: data.error || "Failed to send test email",
        });
      }
    } catch (error) {
      addTestResult("email", {
        success: false,
        message: "EMAIL SERVICE ERROR",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, email: false }));
    }
  };
  {{/if}}

  {{#if authProvider}}

  /**
   * Test authentication status endpoint
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testAuthStatus = async () => {
    setLoading((prev) => ({ ...prev, authStatus: true }));
    try {
      const apiUrl = getApiUrl() || "";
      
      {{#if (eq authProvider 'better-auth')}}
      // Try Better Auth's built-in ok endpoint
      const okResponse = await fetch(`${apiUrl}/api/auth/ok`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });

      if (okResponse.ok) {
        const data = await okResponse.text();
        addTestResult("authStatus", {
          success: true,
          message: "AUTH SERVICE HEALTHY",
          details: {
            endpoint: "/api/auth/ok",
            response: data,
            status: "Better Auth is responding correctly"
          },
        });
      } else {
        addTestResult("authStatus", {
          success: false,
          message: "AUTH SERVICE UNHEALTHY",
          details: `Auth health check returned ${okResponse.status}`,
        });
      }
      {{else if (eq authProvider 'auth.js')}}
      // Test Auth.js providers endpoint
      const response = await fetch(`${apiUrl}/api/auth/providers`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      
      if (response.ok) {
        const providers = await response.json();
        addTestResult("authStatus", {
          success: true,
          message: "AUTH.JS SERVICE HEALTHY",
          details: {
            endpoint: "/api/auth/providers",
            providers: providers.providers || [],
            status: "Auth.js is responding correctly"
          },
        });
      } else {
        addTestResult("authStatus", {
          success: false,
          message: "AUTH.JS SERVICE UNHEALTHY",
          details: `Auth.js health check returned ${response.status}`,
        });
      }
      {{else}}
      // Generic auth health check
      const response = await fetch(`${apiUrl}/api/health/auth`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      
      if (response.ok) {
        const data = await response.json();
        addTestResult("authStatus", {
          success: true,
          message: "AUTH SERVICE HEALTHY",
          details: data
        });
      } else {
        addTestResult("authStatus", {
          success: false,
          message: "AUTH SERVICE UNHEALTHY",
          details: `Auth health check returned ${response.status}`,
        });
      }
      {{/if}}
    } catch (error) {
      addTestResult("authStatus", {
        success: false,
        message: "AUTH SERVICE UNREACHABLE",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, authStatus: false }));
    }
  };

  /**
   * Test authentication endpoints with user input
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const testAuthService = async () => {
    setLoading((prev) => ({ ...prev, auth: true }));
    try {
      const apiUrl = getApiUrl() || "";
      
      {{#if (eq authProvider 'better-auth')}}
      let response;
      let responseData;
      
      if (authMode === 'signup') {
        // Test registration endpoint
        response = await fetch(`${apiUrl}/api/auth/sign-up/email`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword,
            name: authName
          }),
        });
      } else {
        // Test signin endpoint
        response = await fetch(`${apiUrl}/api/auth/sign-in/email`, {
          method: "POST", 
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword
          }),
        });
      }
      {{else if (eq authProvider 'auth.js')}}
      let response;
      let responseData;
      
      if (authMode === 'signup') {
        // Auth.js doesn't have built-in signup, use custom endpoint
        response = await fetch(`${apiUrl}/api/auth/signup`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword,
            name: authName
          }),
        });
      } else {
        // Get CSRF token first
        const csrfResponse = await fetch(`${apiUrl}/api/auth/csrf`, {
          credentials: "include",
        });
        const { csrfToken } = await csrfResponse.json();
        
        // Test signin endpoint with credentials provider
        response = await fetch(`${apiUrl}/api/auth/callback/credentials`, {
          method: "POST", 
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword,
            csrfToken,
            redirect: false,
            json: true
          }),
        });
      }
      {{else}}
      // Generic auth test for other providers
      let response;
      let responseData;
      
      if (authMode === 'signup') {
        response = await fetch(`${apiUrl}/api/auth/signup`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword,
            name: authName
          }),
        });
      } else {
        response = await fetch(`${apiUrl}/api/auth/signin`, {
          method: "POST", 
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({
            email: authEmail,
            password: authPassword
          }),
        });
      }
      {{/if}}

      try {
        responseData = await response.json();
      } catch {
        responseData = await response.text();
      }

      if (response.ok) {
        addTestResult("auth", {
          success: true,
          message: authMode === 'signup' ? "SIGN-UP SUCCESSFUL" : "SIGN-IN SUCCESSFUL",
          details: {
            email: authEmail,
            response: responseData,
            status: response.status
          },
        });
        
        // Test session after successful auth
        const sessionResponse = await fetch(`${apiUrl}/api/auth/get-session`, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
        });
        
        if (sessionResponse.ok) {
          const sessionData = await sessionResponse.json();
          addTestResult("authSession", {
            success: true,
            message: "SESSION ACTIVE",
            details: sessionData,
          });
        }
      } else {
        addTestResult("auth", {
          success: false,
          message: authMode === 'signup' ? "SIGN-UP FAILED" : "SIGN-IN FAILED",
          details: {
            status: response.status,
            error: responseData,
            hint: response.status === 401 ? "Invalid credentials or user doesn't exist" : 
                  response.status === 409 ? "User already exists" : 
                  response.status === 403 ? "CORS issue - check trustedOrigins" : 
                  "Check server logs for details"
          },
        });
      }
    } catch (error) {
      addTestResult("auth", {
        success: false,
        message: "AUTH REQUEST FAILED",
        details: error instanceof Error ? error.message : "Unknown error",
      });
    } finally {
      setLoading((prev) => ({ ...prev, auth: false }));
    }
  };
  {{/if}}

  const togglePanel = () => {
    const newState = !isOpen;
    setIsOpen(newState);
    localStorage.setItem("adminPanelOpen", String(newState));
    if (newState) {
      setIsMinimized(false);
      fetchSystemInfo();
    }
  };


  const ResultDisplay = ({ service }: { service: string }) => {
    const result = testResults[service];
    const [isExpanded, setIsExpanded] = useState(false);
    
    if (!result) return null;

    // Check if this is an auth result with large response data
    const isAuthResult = service === 'auth' || service === 'authSession';
    const hasLargeDetails = result.details && typeof result.details === "object" && 
                           Object.keys(result.details).length > 3;
    const shouldCollapse = isAuthResult && result.success && hasLargeDetails;

    return (
      <div
        className={`{{#if (eq styling 'tailwind')}}mt-3 p-3 border-2 border-black ${result.success ? 'bg-white' : 'bg-yellow-400'}{{else}}result-display{{/if}}`}
        {{#unless (eq styling 'tailwind')}}style=\{{backgroundColor: result.success ? 'var(--color-light)' : 'var(--color-primary)'}}{{/unless}}
      >
        <div className="{{#if (eq styling 'tailwind')}}flex items-start space-x-2{{else}}result-content{{/if}}">
          <div className="{{#if (eq styling 'tailwind')}}w-4 h-4 mt-0.5 bg-black flex items-center justify-center{{else}}result-icon{{/if}}">
            {result.success ? (
              <Activity size={12} className="{{#if (eq styling 'tailwind')}}text-yellow-400{{else}}icon-primary{{/if}}" />
            ) : (
              <AlertTriangle size={12} className="{{#if (eq styling 'tailwind')}}text-yellow-400{{else}}icon-primary{{/if}}" />
            )}
          </div>
          <div className="{{#if (eq styling 'tailwind')}}flex-1 min-w-0{{else}}result-details{{/if}}">
            <p className="{{#if (eq styling 'tailwind')}}font-bold text-black uppercase text-xs tracking-wide break-words{{else}}result-message{{/if}}">
              {result.message}
            </p>
            <p className="{{#if (eq styling 'tailwind')}}text-xs text-black/60 mt-1 font-mono{{else}}result-timestamp{{/if}}">
              {new Date(result.timestamp).toLocaleTimeString()}
            </p>
            
            {result.details && typeof result.details === "object" && result.details !== null ? (
              shouldCollapse ? (
                <div className="{{#if (eq styling 'tailwind')}}mt-2{{else}}collapsible-details{{/if}}">
                  <button
                    onClick={() => setIsExpanded(!isExpanded)}
                    className="{{#if (eq styling 'tailwind')}}w-full text-left px-3 py-2 bg-black text-yellow-400 border-2 border-black hover:bg-gray-800 transition-colors flex items-center justify-between{{else}}expand-btn{{/if}}"
                  >
                    <span className="{{#if (eq styling 'tailwind')}}text-xs font-bold uppercase tracking-wider{{else}}expand-text{{/if}}">
                      {isExpanded ? 'Hide' : 'Show'} Response Details
                    </span>
                    <span className="{{#if (eq styling 'tailwind')}}text-xs font-mono{{else}}expand-arrow{{/if}}">
                      {isExpanded ? '▼' : '▶'}
                    </span>
                  </button>
                  
                  {isExpanded && (
                    <div className="{{#if (eq styling 'tailwind')}}mt-2 p-2 bg-gray-900 border-2 border-black rounded max-h-40 overflow-y-auto{{else}}code-block{{/if}}">
                      <pre className="{{#if (eq styling 'tailwind')}}text-xs font-mono text-green-400 overflow-x-auto max-w-full whitespace-pre-wrap break-all{{else}}json-highlighted{{/if}}">
                        <code 
                          className="language-json"
                          dangerouslySetInnerHTML=\{{
                            __html: JSON.stringify(result.details, null, 2)
                              .replace(/&/g, '&amp;')
                              .replace(/</g, '&lt;')
                              .replace(/>/g, '&gt;')
                              .replace(/("[\w]+"):/g, '<span style="color: #60a5fa">$1</span>:')
                              .replace(/(:\s*"[^"]*")/g, '<span style="color: #fde047">$1</span>')
                              .replace(/(:\s*\d+)/g, '<span style="color: #c084fc">$1</span>')
                              .replace(/(:\s*true|:\s*false)/g, '<span style="color: #f87171">$1</span>')
                              .replace(/(:\s*null)/g, '<span style="color: #9ca3af">$1</span>')
                          }}
                        />
                      </pre>
                    </div>
                  )}
                  
                  {!isExpanded && result.details && (
                    <div className="{{#if (eq styling 'tailwind')}}mt-2 p-2 bg-black/5 border border-black/10 rounded{{else}}summary-box{{/if}}">
                      <p className="{{#if (eq styling 'tailwind')}}text-xs text-black/70 font-mono{{else}}summary-text{{/if}}">
                        ✓ User: {(result.details as AuthDetails).email || (result.details as AuthDetails).user?.email || 'Authenticated'}
                        {Boolean((result.details as AuthDetails).session) && <><br />✓ Session created</>}
                        {Boolean((result.details as AuthDetails).token) && <><br />✓ Token received</>}
                      </p>
                    </div>
                  )}
                </div>
              ) : (
                <div className="{{#if (eq styling 'tailwind')}}mt-2 p-2 bg-black/5 border border-black/10 rounded max-h-40 overflow-y-auto{{else}}result-json{{/if}}">
                  <pre className="{{#if (eq styling 'tailwind')}}text-xs font-mono text-black/70 overflow-x-auto max-w-full whitespace-pre-wrap break-all{{else}}json-content{{/if}}">
                    {JSON.stringify(result.details, null, 2)}
                  </pre>
                </div>
              )
            ) : null}
          </div>
        </div>
      </div>
    );
  };

  return (
    <>
      {/* Floating Button - Minimalistic Bold Design with Logo */}
      {!isOpen && (
        <button
          onClick={togglePanel}
          className="{{#if (eq styling 'tailwind')}}fixed bottom-6 right-6 z-50 bg-yellow-400 border-2 border-black p-3 shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-150 group{{else}}precast-floating-btn{{/if}}"
          title="Open Precast Validator"
        >
          <div className="{{#if (eq styling 'tailwind')}}relative w-6 h-6{{else}}btn-icon{{/if}}">
            <img 
              src="https://precast.dev/logo.png" 
              alt="Precast" 
              className="{{#if (eq styling 'tailwind')}}w-full h-full object-contain{{else}}logo-img{{/if}}"
              onError={(e) => {
                // Fallback to geometric icon if logo fails to load
                e.currentTarget.style.display = 'none';
                e.currentTarget.nextElementSibling?.classList.remove('hidden');
              }}
            />
            <Terminal size={24} className="{{#if (eq styling 'tailwind')}}hidden{{else}}hidden{{/if}}" />
          </div>
        </button>
      )}

      {/* Floating Panel with Side Tabs */}
      {isOpen && (
        <div className="{{#if (eq styling 'tailwind')}}fixed bottom-6 right-6 z-50 flex{{else}}precast-panel-container{{/if}}">
          {/* Side Tab Navigation */}
          {!isMinimized && (
            <div className="{{#if (eq styling 'tailwind')}}flex flex-col mr-0{{else}}side-tabs{{/if}}">
              {Object.entries(services).map(([key, service]) => (
                <button
                  key={key}
                  onClick={() => setActiveTab(key)}
                  className={`{{#if (eq styling 'tailwind')}}w-12 h-12 border-2 border-black border-r-0 flex items-center justify-center transition-all duration-150 ${activeTab === key ? 'bg-yellow-400 shadow-[-2px_0px_0px_0px_rgba(0,0,0,1)]' : 'bg-white hover:bg-gray-100'} ${key === Object.keys(services)[0] ? '' : 'border-t-0'}{{else}}side-tab{{/if}}`}
                  title={service.name}
                  {{#unless (eq styling 'tailwind')}}
                  data-active={activeTab === key}
                  {{/unless}}
                >
                  <div className="{{#if (eq styling 'tailwind')}}transform scale-125{{else}}tab-icon{{/if}}">
                    {getServiceIcon(service.icon, 20)}
                  </div>
                </button>
              ))}
            </div>
          )}

          {/* Main Panel */}
          <div
            className={`{{#if (eq styling 'tailwind')}}bg-white border-2 border-black shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] transition-all duration-200 ${isMinimized ? 'w-72 h-14' : 'w-[420px] max-h-[85vh]'}{{else}}precast-main-panel{{/if}}`}
            {{#unless (eq styling 'tailwind')}}
            data-minimized={isMinimized}
            {{/unless}}
          >
            {/* Header */}
            <div className="{{#if (eq styling 'tailwind')}}flex items-center justify-between p-3 border-b-2 border-black bg-yellow-400{{else}}panel-header{{/if}}">
              <div className="{{#if (eq styling 'tailwind')}}flex items-center space-x-2{{else}}header-title{{/if}}">
                <div className="{{#if (eq styling 'tailwind')}}w-8 h-8 bg-white border-2 border-black flex items-center justify-center p-1{{else}}header-logo{{/if}}">
                  <img 
                    src="https://precast.dev/logo.png" 
                    alt="Precast" 
                    className="{{#if (eq styling 'tailwind')}}w-full h-full object-contain{{else}}logo-img{{/if}}"
                    onError={(e) => {
                      e.currentTarget.style.display = 'none';
                      e.currentTarget.nextElementSibling?.classList.remove('hidden');
                    }}
                  />
                  <div className="{{#if (eq styling 'tailwind')}}w-4 h-4 bg-black hidden{{else}}logo-fallback hidden{{/if}}"></div>
                </div>
                <div>
                  <h3 className="{{#if (eq styling 'tailwind')}}font-bold text-black uppercase tracking-wider text-sm{{else}}panel-title{{/if}}">
                    PRECAST
                  </h3>
                  <p className="{{#if (eq styling 'tailwind')}}text-xs text-black/70 font-mono{{else}}panel-subtitle{{/if}}">
                    {systemInfo?.environment ? `ENV: ${systemInfo.environment.toUpperCase()}` : "VALIDATOR_v1.0"}
                  </p>
                </div>
              </div>
              <div className="{{#if (eq styling 'tailwind')}}flex items-center space-x-1{{else}}header-controls{{/if}}">
                <button
                  onClick={() => setIsMinimized(!isMinimized)}
                  className="{{#if (eq styling 'tailwind')}}w-8 h-8 bg-white border-2 border-black hover:bg-yellow-400 transition-colors flex items-center justify-center{{else}}control-btn{{/if}}"
                  title={isMinimized ? "Expand" : "Minimize"}
                >
                  <span className="{{#if (eq styling 'tailwind')}}font-bold text-lg leading-none{{else}}control-icon{{/if}}">
                    {isMinimized ? "+" : "-"}
                  </span>
                </button>
                <button
                  onClick={togglePanel}
                  className="{{#if (eq styling 'tailwind')}}w-8 h-8 bg-black hover:bg-gray-800 transition-colors flex items-center justify-center{{else}}control-btn control-close{{/if}}"
                  title="Close"
                >
                  <span className="{{#if (eq styling 'tailwind')}}text-white font-bold text-sm{{else}}close-icon{{/if}}">✕</span>
                </button>
              </div>
            </div>

            {/* Content */}
            {!isMinimized && (
              <div className="{{#if (eq styling 'tailwind')}}p-4 overflow-y-auto max-h-[calc(85vh-4rem)] bg-white{{else}}panel-content{{/if}}">
                {/* Dynamic tab content based on active service */}
                {Object.entries(services).map(([key, service]) => 
                  activeTab === key && (
                    <div key={key} className="{{#if (eq styling 'tailwind')}}space-y-4{{else}}tab-content{{/if}}">
                      <div className="{{#if (eq styling 'tailwind')}}border-2 border-black p-4 bg-white{{else}}service-card{{/if}}">
                        <div className="{{#if (eq styling 'tailwind')}}flex items-center justify-between mb-3{{else}}service-header{{/if}}">
                          <div className="{{#if (eq styling 'tailwind')}}flex items-center space-x-2{{else}}service-info{{/if}}">
                            <div className="{{#if (eq styling 'tailwind')}}w-8 h-8 bg-yellow-400 border-2 border-black flex items-center justify-center{{else}}service-icon{{/if}}">
                              {getServiceIcon(service.icon, 20)}
                            </div>
                            <div>
                              <h3 className="{{#if (eq styling 'tailwind')}}font-bold text-black uppercase text-sm{{else}}service-name{{/if}}">
                                {service.type?.toUpperCase() || service.name}
                              </h3>
                              {service.port && (
                                <p className="{{#if (eq styling 'tailwind')}}text-xs text-black/60 font-mono{{else}}service-port{{/if}}">
                                  PORT: {service.port}
                                </p>
                              )}
                            </div>
                          </div>
                          <span
                            className={`{{#if (eq styling 'tailwind')}}px-3 py-1 text-xs font-bold uppercase tracking-wider border-2 border-black ${(key === 'auth' ? testResults.authStatus?.success : testResults[key]?.success) ? 'bg-black text-yellow-400' : 'bg-yellow-400 text-black'}{{else}}status-badge{{/if}}`}
                            {{#unless (eq styling 'tailwind')}}
                            data-success={(key === 'auth' ? testResults.authStatus?.success : testResults[key]?.success)}
                            {{/unless}}
                          >
                            {(key === 'auth' ? testResults.authStatus?.success : testResults[key]?.success) ? "ONLINE" : "UNKNOWN"}
                          </span>
                        </div>
                        
                        {/* Test buttons for services that support testing */}
                        {(key === 'database' || key === 'api' || key === 'email' || key === 'docker') && (
                          <div className="{{#if (eq styling 'tailwind')}}mb-4{{else}}test-btn-container{{/if}}">
                            <button
                              onClick={() => {
                                if (key === 'database') testDatabaseConnection();
                                else if (key === 'api') testApiHealth();
                                {{#if docker}}
                                else if (key === 'docker') testDockerHealth();
                                {{/if}}
                                {{#if (includes plugins 'resend')}}
                                else if (key === 'email') testEmailService();
                                {{/if}}
                              }}
                              disabled={loading[key]}
                              className="{{#if (eq styling 'tailwind')}}w-full px-4 py-3 bg-yellow-400 border-2 border-black text-black font-bold uppercase text-sm tracking-wider shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed{{else}}test-btn{{/if}}"
                            >
                              {loading[key] ? (
                                <span className="{{#if (eq styling 'tailwind')}}flex items-center justify-center{{else}}loading{{/if}}">
                                  <span className="{{#if (eq styling 'tailwind')}}inline-block w-4 h-4 border-2 border-black border-t-transparent animate-spin mr-2{{else}}spinner{{/if}}"></span>
                                  TESTING...
                                </span>
                              ) : (
                                `RUN ${key === 'database' ? 'CONNECTION' : key === 'api' ? 'HEALTH' : key === 'docker' ? 'DOCKER' : key === 'email' ? 'EMAIL' : 'SERVICE'} TEST`
                              )}
                            </button>
                          </div>
                        )}

                        {/* Enhanced Auth Testing UI */}
                        {{#if authProvider}}
                        {key === 'auth' && (
                          <div className="{{#if (eq styling 'tailwind')}}space-y-3{{else}}auth-test-container{{/if}}">
                            {/* Mode selector */}
                            <div className="{{#if (eq styling 'tailwind')}}flex gap-2{{else}}auth-mode-selector{{/if}}">
                              <button
                                onClick={() => setAuthMode('signup')}
                                className={`{{#if (eq styling 'tailwind')}}flex-1 px-3 py-2 border-2 border-black font-bold uppercase text-xs tracking-wider transition-all duration-150 ${authMode === 'signup' ? 'bg-yellow-400 text-black' : 'bg-white text-black hover:bg-gray-100'}{{else}}auth-mode-btn{{/if}}`}
                                {{#unless (eq styling 'tailwind')}}data-active={authMode === 'signup'}{{/unless}}
                              >
                                SIGN UP
                              </button>
                              <button
                                onClick={() => setAuthMode('signin')}
                                className={`{{#if (eq styling 'tailwind')}}flex-1 px-3 py-2 border-2 border-black font-bold uppercase text-xs tracking-wider transition-all duration-150 ${authMode === 'signin' ? 'bg-yellow-400 text-black' : 'bg-white text-black hover:bg-gray-100'}{{else}}auth-mode-btn{{/if}}`}
                                {{#unless (eq styling 'tailwind')}}data-active={authMode === 'signin'}{{/unless}}
                              >
                                SIGN IN
                              </button>
                            </div>

                            {/* Input fields */}
                            <div className="{{#if (eq styling 'tailwind')}}space-y-2{{else}}auth-inputs{{/if}}">
                              <input
                                type="email"
                                value={authEmail}
                                onChange={(e) => setAuthEmail(e.target.value)}
                                placeholder="Email"
                                className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
                              />
                              <input
                                type="password"
                                value={authPassword}
                                onChange={(e) => setAuthPassword(e.target.value)}
                                placeholder="Password"
                                className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
                              />
                              {authMode === 'signup' && (
                                <input
                                  type="text"
                                  value={authName}
                                  onChange={(e) => setAuthName(e.target.value)}
                                  placeholder="Name"
                                  className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
                                />
                              )}
                            </div>

                            {/* Test button */}
                            <button
                              onClick={() => testAuthService()}
                              disabled={loading.auth}
                              className="{{#if (eq styling 'tailwind')}}w-full px-4 py-3 bg-yellow-400 border-2 border-black text-black font-bold uppercase text-sm tracking-wider shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed{{else}}test-btn{{/if}}"
                            >
                              {loading.auth ? (
                                <span className="{{#if (eq styling 'tailwind')}}flex items-center justify-center{{else}}loading{{/if}}">
                                  <span className="{{#if (eq styling 'tailwind')}}inline-block w-4 h-4 border-2 border-black border-t-transparent animate-spin mr-2{{else}}spinner{{/if}}"></span>
                                  TESTING...
                                </span>
                              ) : (
                                `TEST ${authMode === 'signup' ? 'SIGN UP' : 'SIGN IN'}`
                              )}
                            </button>
                          </div>
                        )}
                        {{/if}}

                        {/* Auth status test button */}
                        {{#if authProvider}}
                        {key === 'auth' && (
                          <button
                            onClick={() => testAuthStatus()}
                            disabled={loading.authStatus}
                            className="{{#if (eq styling 'tailwind')}}w-full mt-2 px-4 py-3 bg-white border-2 border-black text-black font-bold uppercase text-sm tracking-wider shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[2px] hover:translate-y-[2px] transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed{{else}}test-btn status-btn{{/if}}"
                          >
                            {loading.authStatus ? (
                              <span className="{{#if (eq styling 'tailwind')}}flex items-center justify-center{{else}}loading{{/if}}">
                                <span className="{{#if (eq styling 'tailwind')}}inline-block w-4 h-4 border-2 border-black border-t-transparent animate-spin mr-2{{else}}spinner{{/if}}"></span>
                                CHECKING...
                              </span>
                            ) : (
                              'CHECK STATUS ENDPOINT'
                            )}
                          </button>
                        )}
                        {{/if}}
                        
                        {/* Docker containers list */}
                        {key === 'docker' && service.containers && Array.isArray(service.containers) && (
                          <div className="{{#if (eq styling 'tailwind')}}max-h-48 overflow-y-auto space-y-2 border border-black/20 rounded p-2{{else}}containers-list{{/if}}">
                            {(service.containers as Array<{name: string; port: number; icon: string}>).map((container, idx: number) => (
                              <div key={idx} className="{{#if (eq styling 'tailwind')}}border border-black p-2 bg-white{{else}}container-item{{/if}}">
                                <div className="{{#if (eq styling 'tailwind')}}flex items-center justify-between{{else}}container-info{{/if}}">
                                  <div className="{{#if (eq styling 'tailwind')}}flex items-center space-x-2{{else}}container-name{{/if}}">
                                    {getServiceIcon(container.icon, 14)}
                                    <span className="{{#if (eq styling 'tailwind')}}text-xs font-mono{{else}}container-text{{/if}}">{container.name}</span>
                                  </div>
                                  <span className="{{#if (eq styling 'tailwind')}}text-xs font-bold text-black bg-yellow-400 px-2 py-1 border border-black{{else}}container-port{{/if}}">
                                    {container.port === 0 ? "N/A" : container.port}
                                  </span>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        <div className="{{#if (eq styling 'tailwind')}}mt-4{{else}}result-display-container{{/if}}">
                          <ResultDisplay service={key} />
                        </div>
                      </div>
                    </div>
                  )
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
}