{{#if config.database}}
{{#unless (eq config.database "none")}}
{{#if (eq config.database "mongodb")}}
from motor.motor_asyncio import AsyncIOMotorClient
from odmantic import AIOEngine
from app.core.config import settings

# MongoDB setup
client = AsyncIOMotorClient(settings.database_url)
database = client[settings.app_name]
engine = AIOEngine(motor_client=client, database=settings.app_name)

async def get_database():
    """Get database session"""
    return engine

{{else}}
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from app.core.config import settings

# Create async engine
engine = create_async_engine(
    settings.database_url,
    {{#if (or (eq config.database "postgres") (eq config.database "mysql"))}}
    pool_size=settings.database_pool_size,
    max_overflow=settings.database_max_overflow,
    {{/if}}
    echo=settings.debug,
)

# Create sessionmaker
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

# Base class for models
Base = declarative_base()


async def get_db() -> AsyncGenerator[AsyncSession, None]:
    """Dependency for getting database session"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()
{{/if}}
{{else}}
# No database configured
# Add your database setup here if needed later
pass
{{/unless}}
{{/if}}