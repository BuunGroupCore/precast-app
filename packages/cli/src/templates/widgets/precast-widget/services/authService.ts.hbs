/**
 * Authentication Service Testing Module
 * @module authService
 * @description Provides authentication testing utilities for the PrecastWidget
 */

import { TestResult, ServiceTestContext, AuthMode } from '../types';
import { getAuthApiUrl } from '../utils/environmentUtils';

{{#if authProvider}}
let currentSession: any = null;
let authStateListeners: (() => void)[] = [];

/**
 * Gets the current authentication session
 * @returns {any} The current session object or null
 */
export const getCurrentSession = () => currentSession;

/**
 * Sets the current authentication session
 * @param {any} session - The session object to store
 */
export const setCurrentSession = (session: any) => {
  currentSession = session;
  // Notify all listeners of auth state change
  authStateListeners.forEach(listener => listener());
  
  // Don't trigger session refresh here - it creates a feedback loop
  // The AuthProvider already manages its own refresh cycle
};

/**
 * Subscribe to auth state changes
 * @param {Function} listener - Function to call when auth state changes
 * @returns {Function} Unsubscribe function
 */
export const subscribeToAuthState = (listener: () => void) => {
  authStateListeners.push(listener);
  return () => {
    authStateListeners = authStateListeners.filter(l => l !== listener);
  };
};
{{/if}}

{{#if authProvider}}
/**
 * Tests the authentication service health status
 * @param {Function} setLoading - Loading state setter
 * @param {Function} addTestResult - Function to add test results
 * @param {string} apiUrl - The API base URL
 * @returns {Promise<void>}
 */
export const testAuthStatus = async (
  setLoading: (updater: (prev: Record<string, boolean>) => Record<string, boolean>) => void,
  addTestResult: (service: string, result: Omit<TestResult, "timestamp">) => void,
  apiUrl: string
): Promise<void> => {
  setLoading((prev) => ({ ...prev, authStatus: true }));
  try {
    {{#if (eq authProvider 'better-auth')}}
    // Try Better Auth's built-in ok endpoint
    const okResponse = await fetch(`${apiUrl}/api/auth/ok`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });

    if (okResponse.ok) {
      const data = await okResponse.text();
      addTestResult("authStatus", {
        success: true,
        message: "AUTH SERVICE HEALTHY",
        details: {
          endpoint: "/api/auth/ok",
          response: data,
          status: "Better Auth is responding correctly"
        },
      });
    } else {
      addTestResult("authStatus", {
        success: false,
        message: "AUTH SERVICE UNHEALTHY",
        details: `Auth health check returned ${okResponse.status}`,
      });
    }
    {{else if (eq authProvider 'auth.js')}}
    // Test Auth.js providers endpoint
    const response = await fetch(`${apiUrl}/api/auth/providers`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });
    
    if (response.ok) {
      const providers = await response.json();
      addTestResult("authStatus", {
        success: true,
        message: "AUTH.JS SERVICE HEALTHY",
        details: {
          endpoint: "/api/auth/providers",
          providers: providers.providers || [],
          status: "Auth.js is responding correctly"
        },
      });
    } else {
      addTestResult("authStatus", {
        success: false,
        message: "AUTH.JS SERVICE UNHEALTHY",
        details: `Auth.js health check returned ${response.status}`,
      });
    }
    {{else}}
    // Generic auth health check
    const response = await fetch(`${apiUrl}/api/health/auth`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });
    
    if (response.ok) {
      const data = await response.json();
      addTestResult("authStatus", {
        success: true,
        message: "AUTH SERVICE HEALTHY",
        details: data
      });
    } else {
      addTestResult("authStatus", {
        success: false,
        message: "AUTH SERVICE UNHEALTHY",
        details: `Auth health check returned ${response.status}`,
      });
    }
    {{/if}}
  } catch (error) {
    addTestResult("authStatus", {
      success: false,
      message: "AUTH SERVICE UNREACHABLE",
      details: error instanceof Error ? error.message : "Unknown error",
    });
  } finally {
    setLoading((prev) => ({ ...prev, authStatus: false }));
  }
};

/**
 * Tests authentication endpoints (sign-up/sign-in)
 * @param {Function} setLoading - Loading state setter
 * @param {Function} addTestResult - Function to add test results
 * @param {string} apiUrl - The API base URL
 * @param {AuthMode} authMode - Authentication mode ('signup' or 'signin')
 * @param {string} authEmail - User email
 * @param {string} authPassword - User password
 * @param {string} authName - User name (for signup)
 * @returns {Promise<void>}
 */
export const testAuthService = async (
  setLoading: (updater: (prev: Record<string, boolean>) => Record<string, boolean>) => void,
  addTestResult: (service: string, result: Omit<TestResult, "timestamp">) => void,
  apiUrl: string,
  authMode: AuthMode,
  authEmail: string,
  authPassword: string,
  authName: string
): Promise<void> => {
  setLoading((prev) => ({ ...prev, auth: true }));
  try {
    {{#if (eq authProvider 'better-auth')}}
    let response;
    let responseData;
    
    if (authMode === 'signup') {
      response = await fetch(`${apiUrl}/api/auth/sign-up/email`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          email: authEmail,
          password: authPassword,
          name: authName
        }),
      });
    } else {
      response = await fetch(`${apiUrl}/api/auth/sign-in/email`, {
        method: "POST", 
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          email: authEmail,
          password: authPassword
        }),
      });
    }
    {{else if (eq authProvider 'auth.js')}}
    let response;
    let responseData;
    
    if (authMode === 'signup') {
      response = await fetch(`${apiUrl}/api/auth/signup`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          email: authEmail,
          password: authPassword,
          name: authName
        }),
      });
    } else {
      const csrfResponse = await fetch(`${apiUrl}/api/auth/csrf`, {
        credentials: "include",
      });
      const { csrfToken } = await csrfResponse.json();
      
      // Test signin endpoint with credentials provider
      // Auth.js expects form-encoded data, not JSON
      const formData = new URLSearchParams();
      formData.append('email', authEmail);
      formData.append('password', authPassword);
      formData.append('csrfToken', csrfToken);
      formData.append('redirect', 'false');
      formData.append('json', 'true');
      
      response = await fetch(`${apiUrl}/api/auth/callback/credentials`, {
        method: "POST", 
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        credentials: "include",
        body: formData.toString(),
      });
    }
    {{else}}
    // Generic auth test for other providers
    let response;
    let responseData;
    
    if (authMode === 'signup') {
      response = await fetch(`${apiUrl}/api/auth/signup`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          email: authEmail,
          password: authPassword,
          name: authName
        }),
      });
    } else {
      response = await fetch(`${apiUrl}/api/auth/signin`, {
        method: "POST", 
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          email: authEmail,
          password: authPassword
        }),
      });
    }
    {{/if}}

    try {
      responseData = await response.json();
    } catch {
      responseData = await response.text();
    }

    if (response.ok) {
      {{#if (eq authProvider 'better-auth')}}
      // Store the auth response which contains user data
      setCurrentSession(responseData);
      
      // Also store in localStorage for cross-domain sharing
      if (typeof window !== 'undefined') {
        // Make sure we're storing valid JSON
        const sessionToStore = typeof responseData === 'string' ? 
          { user: responseData, session: null } : responseData;
        localStorage.setItem('precast-auth-session', JSON.stringify(sessionToStore));
        localStorage.setItem('auth-session-change', Date.now().toString());
      }
      
      // Trigger AuthProvider refresh immediately
      try {
        const { triggerSessionRefresh } = require('@/components/auth/AuthProvider');
        setTimeout(() => triggerSessionRefresh(), 100);
      } catch (error) {
        // Silently handle if AuthProvider is not available
        console.log('AuthProvider not available for session refresh');
      }
      {{/if}}
      
      addTestResult("auth", {
        success: true,
        message: authMode === 'signup' ? "SIGN-UP SUCCESSFUL" : "SIGN-IN SUCCESSFUL",
        details: {
          email: authEmail,
          response: responseData,
          status: response.status
        },
      });
      
      const sessionResponse = await fetch(`${apiUrl}/api/auth/get-session`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });
      
      if (sessionResponse.ok) {
        const sessionData = await sessionResponse.json();
        {{#if (eq authProvider 'better-auth')}}
        // Update session with the full session data if available
        if (sessionData) {
          setCurrentSession(sessionData);
        }
        {{/if}}
        addTestResult("authSession", {
          success: true,
          message: "SESSION ACTIVE",
          details: sessionData,
        });
      }
    } else {
      addTestResult("auth", {
        success: false,
        message: authMode === 'signup' ? "SIGN-UP FAILED" : "SIGN-IN FAILED",
        details: {
          status: response.status,
          error: responseData,
          hint: response.status === 401 ? "Invalid credentials or user doesn't exist" : 
                response.status === 409 ? "User already exists" : 
                response.status === 403 ? "CORS issue - check trustedOrigins" : 
                "Check server logs for details"
        },
      });
    }
  } catch (error) {
    addTestResult("auth", {
      success: false,
      message: "AUTH REQUEST FAILED",
      details: error instanceof Error ? error.message : "Unknown error",
    });
  } finally {
    setLoading((prev) => ({ ...prev, auth: false }));
  }
};

{{#if (eq authProvider 'better-auth')}}
/**
 * Signs out the current user by clearing authentication cookies
 * @param {Function} setLoading - Loading state setter
 * @param {Function} addTestResult - Function to add test results
 * @param {string} apiUrl - The API base URL
 * @returns {Promise<void>}
 * @description Better Auth handles sign-out client-side by clearing cookies
 */
export const testSignOut = async (
  setLoading: (updater: (prev: Record<string, boolean>) => Record<string, boolean>) => void,
  addTestResult: (service: string, result: Omit<TestResult, "timestamp">) => void,
  apiUrl: string
): Promise<void> => {
  setLoading((prev) => ({ ...prev, auth: true }));
  try {
    document.cookie.split(";").forEach((c) => {
      const cookie = c.trim();
      if (cookie.startsWith("better-auth") || cookie.startsWith("__Secure-better-auth")) {
        const eqPos = cookie.indexOf("=");
        const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname}`;
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/`;
      }
    });
    
    setCurrentSession(null);
    {{#if (or (eq authProvider 'better-auth') (eq authProvider 'auth.js'))}}
    // Clear localStorage
    if (typeof window !== 'undefined') {
      localStorage.removeItem('precast-auth-session');
      localStorage.setItem('auth-session-change', Date.now().toString());
    }
    {{/if}}
    const checkResponse = await fetch(`${apiUrl}/api/auth/get-session`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });
    
    const sessionData = await checkResponse.json();
    
    if (!sessionData?.session) {
      addTestResult("auth", {
        success: true,
        message: "SIGN-OUT SUCCESSFUL",
        details: "Session cleared successfully",
      });
    } else {
      addTestResult("auth", {
        success: false,
        message: "SIGN-OUT PARTIAL",
        details: "Session may still be active on server. Try refreshing the page.",
      });
    }
  } catch (error) {
    addTestResult("auth", {
      success: false,
      message: "SIGN-OUT ERROR",
      details: error instanceof Error ? error.message : "Unknown error",
    });
  } finally {
    setLoading((prev) => ({ ...prev, auth: false }));
  }
};

/**
 * Checks the current authentication session status
 * @param {Function} setLoading - Loading state setter
 * @param {Function} addTestResult - Function to add test results
 * @param {string} apiUrl - The API base URL
 * @returns {Promise<void>}
 */
export const checkSession = async (
  setLoading: (updater: (prev: Record<string, boolean>) => Record<string, boolean>) => void,
  addTestResult: (service: string, result: Omit<TestResult, "timestamp">) => void,
  apiUrl: string
): Promise<void> => {
  setLoading((prev) => ({ ...prev, authStatus: true }));
  try {
    const response = await fetch(`${apiUrl}/api/auth/get-session`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
    });

    if (response.ok) {
      const sessionData = await response.json();
      if (sessionData?.session) {
        setCurrentSession(sessionData);
        addTestResult("authStatus", {
          success: true,
          message: "SESSION ACTIVE",
          details: sessionData,
        });
      } else {
        setCurrentSession(null);
        addTestResult("authStatus", {
          success: true,
          message: "NO ACTIVE SESSION",
          details: "User is not logged in",
        });
      }
    } else {
      setCurrentSession(null);
      addTestResult("authStatus", {
        success: false,
        message: "SESSION CHECK FAILED",
        details: `Session check returned ${response.status}`,
      });
    }
  } catch (error) {
    setCurrentSession(null);
    addTestResult("authStatus", {
      success: false,
      message: "SESSION CHECK ERROR",
      details: error instanceof Error ? error.message : "Unknown error",
    });
  } finally {
    setLoading((prev) => ({ ...prev, authStatus: false }));
  }
};
{{/if}}

/**
 * Simplified authentication status test for service registry
 * @param {ServiceTestContext} context - Test context with API URL and headers
 * @returns {Promise<TestResult>} Test result object
 */
export const testAuthStatusSimple = async (context: ServiceTestContext): Promise<TestResult> => {
  try {
    {{#if (eq authProvider 'better-auth')}}
    const response = await fetch(`${context.apiUrl}/api/auth/ok`, {
      method: "GET",
      headers: context.headers,
      credentials: "include",
    });

    if (response.ok) {
      const data = await response.text();
      return {
        success: true,
        message: "AUTH SERVICE HEALTHY",
        details: {
          endpoint: "/api/auth/ok",
          response: data,
          status: "Better Auth is responding correctly"
        },
        timestamp: new Date().toISOString(),
      };
    } else {
      return {
        success: false,
        message: "AUTH SERVICE UNHEALTHY",
        details: `Auth health check returned ${response.status}`,
        timestamp: new Date().toISOString(),
      };
    }
    {{else if (eq authProvider 'auth.js')}}
    const response = await fetch(`${context.apiUrl}/api/auth/providers`, {
      method: "GET",
      headers: context.headers,
      credentials: "include",
    });
    
    if (response.ok) {
      const providers = await response.json();
      return {
        success: true,
        message: "AUTH.JS SERVICE HEALTHY",
        details: {
          endpoint: "/api/auth/providers",
          providers: providers.providers || [],
          status: "Auth.js is responding correctly"
        },
        timestamp: new Date().toISOString(),
      };
    } else {
      return {
        success: false,
        message: "AUTH.JS SERVICE UNHEALTHY",
        details: `Auth.js health check returned ${response.status}`,
        timestamp: new Date().toISOString(),
      };
    }
    {{else}}
    const response = await fetch(`${context.apiUrl}/api/health/auth`, {
      method: "GET",
      headers: context.headers,
      credentials: "include",
    });
    
    if (response.ok) {
      const data = await response.json();
      return {
        success: true,
        message: "AUTH SERVICE HEALTHY",
        details: data,
        timestamp: new Date().toISOString(),
      };
    } else {
      return {
        success: false,
        message: "AUTH SERVICE UNHEALTHY",
        details: `Auth health check returned ${response.status}`,
        timestamp: new Date().toISOString(),
      };
    }
    {{/if}}
  } catch (error) {
    return {
      success: false,
      message: "AUTH SERVICE UNREACHABLE",
      details: error instanceof Error ? error.message : "Unknown error",
      timestamp: new Date().toISOString(),
    };
  }
};

/**
 * Check if auth service is available
 */
export const isAuthServiceAvailable = (): boolean => {
  return true; // Auth service is available when auth provider is configured
};
{{else}}
// No auth provider configured
export const testAuthStatus = async (): Promise<void> => {
  console.warn('Auth service not configured');
};

export const testAuthService = async (): Promise<void> => {
  console.warn('Auth service not configured');
};

export const testAuthStatusSimple = async (): Promise<TestResult> => {
  return {
    success: false,
    message: "AUTH NOT CONFIGURED",
    details: "No authentication provider configured for this project",
    timestamp: new Date().toISOString(),
  };
};

export const isAuthServiceAvailable = (): boolean => {
  return false;
};
{{/if}}