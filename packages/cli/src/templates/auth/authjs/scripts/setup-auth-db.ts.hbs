#!/usr/bin/env node
/**
 * Setup Auth.js database tables for {{database}}
 * Run this script to create the required tables for authentication
 */

{{#if (eq database "postgres")}}
import { Pool } from "pg";
{{else if (eq database "mysql")}}
import mysql from "mysql2/promise";
{{/if}}
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function setupAuthDatabase() {
  {{#if (eq database "postgres")}}
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });
  {{else if (eq database "mysql")}}
  const connection = await mysql.createConnection({
    uri: process.env.DATABASE_URL,
  });
  {{/if}}

  try {
    console.log("[DB] Setting up Auth.js database tables...");

    // Read the migration file
    const migrationPath = path.join(__dirname, "../migrations/001_auth_tables.sql");
    const migrationSQL = fs.readFileSync(migrationPath, "utf-8");

    {{#if (eq database "postgres")}}
    // Execute the migration
    await pool.query(migrationSQL);
    {{else if (eq database "mysql")}}
    // Split and execute statements for MySQL
    const statements = migrationSQL
      .split("DELIMITER")
      .filter(s => s.trim())
      .map(s => s.replace(/\$\$/g, "").trim());
    
    for (const statement of statements) {
      if (statement) {
        await connection.query(statement);
      }
    }
    {{/if}}

    console.log("[AUTH] Auth.js database tables created successfully!");
    console.log("[DB] Created tables: users, accounts, sessions, verification_tokens");
    
    // Check if tables were created
    {{#if (eq database "postgres")}}
    const tableCheck = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('users', 'accounts', 'sessions', 'verification_tokens')
      ORDER BY table_name;
    `);
    
    console.log("\n[DB] Verified tables:");
    tableCheck.rows.forEach(row => {
      console.log(`   ✓ ${row.table_name}`);
    });
    {{else if (eq database "mysql")}}
    const [tables] = await connection.query(`
      SELECT TABLE_NAME as table_name
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME IN ('users', 'accounts', 'sessions', 'verification_tokens')
      ORDER BY TABLE_NAME;
    `);
    
    console.log("\n[DB] Verified tables:");
    (tables as any[]).forEach(row => {
      console.log(`   ✓ ${row.table_name}`);
    });
    {{/if}}

    console.log("\n[SUCCESS] You can now use Auth.js with your {{database}} database!");
    console.log("[INFO] Next steps:");
    console.log("   1. Start your development server: npm run dev");
    console.log("   2. Test authentication at /api/auth/signin");
    console.log("   3. Create new users at /api/auth/signup");

  } catch (error) {
    console.error("[ERROR] Error setting up database:", error);
    console.error("\n[INFO] Troubleshooting tips:");
    console.error("   1. Make sure your DATABASE_URL is correct in .env");
    console.error("   2. Ensure the database exists and is running");
    console.error("   3. Check that you have the necessary permissions");
    process.exit(1);
  } finally {
    {{#if (eq database "postgres")}}
    await pool.end();
    {{else if (eq database "mysql")}}
    await connection.end();
    {{/if}}
  }
}

// Run the setup
setupAuthDatabase();