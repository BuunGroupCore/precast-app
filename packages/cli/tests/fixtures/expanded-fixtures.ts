import type { ProjectFixture } from "./index";

/**
 * Comprehensive test fixtures covering all framework, backend, and feature combinations
 */

// Framework + Backend Combinations
export const FRAMEWORK_BACKEND_FIXTURES: ProjectFixture[] = [
  // React Combinations
  {
    name: "react-express-full",
    config: {
      name: "react-express-full",
      framework: "react",
      backend: "express",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      category: "critical",
      expectedDuration: 10000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.tsx",
      "apps/api/src/index.ts",
      "apps/api/prisma/schema.prisma",
    ],
    expectedDependencies: ["react", "express", "@prisma/client"],
    expectedDevDependencies: ["typescript", "@types/react", "@types/express", "prisma"],
    validationRules: [
      { type: "file-exists", path: "apps/web/src/App.tsx", description: "React App component" },
      { type: "file-exists", path: "apps/api/src/index.ts", description: "Express server entry" },
      { type: "script-exists", script: "dev", description: "Development script" },
    ],
  },
  {
    name: "react-hono-mongodb",
    config: {
      name: "react-hono-mongodb",
      framework: "react",
      backend: "hono",
      database: "mongodb",
      orm: "mongoose",
      styling: "css",
      runtime: "bun",
      typescript: true,
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.tsx",
      "apps/api/src/index.ts",
    ],
    expectedDependencies: ["react", "hono", "mongoose"],
    expectedDevDependencies: ["typescript", "@types/react"],
    validationRules: [
      { type: "file-exists", path: "apps/api/src/index.ts", description: "Hono server entry" },
      { type: "dependency-present", package: "hono", description: "Hono dependency" },
    ],
  },
  {
    name: "react-nestjs-mysql",
    config: {
      name: "react-nestjs-mysql",
      framework: "react",
      backend: "nestjs",
      database: "mysql",
      orm: "typeorm",
      styling: "scss",
      runtime: "node",
      typescript: true,
      category: "common",
      expectedDuration: 10000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/api/src/main.ts",
      "apps/api/tsconfig.json",
    ],
    expectedDependencies: ["react", "@nestjs/core", "@nestjs/common", "typeorm"],
    expectedDevDependencies: ["typescript", "@types/react"],
    validationRules: [
      { type: "file-exists", path: "apps/api/src/main.ts", description: "NestJS main file" },
      { type: "dependency-present", package: "@nestjs/core", description: "NestJS core" },
    ],
  },
  {
    name: "react-koa-duckdb",
    config: {
      name: "react-koa-duckdb",
      framework: "react",
      backend: "koa",
      database: "duckdb",
      orm: "none",
      styling: "styled-components",
      runtime: "node",
      typescript: false,
      category: "edge",
      expectedDuration: 7000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.js",
      "apps/api/src/index.js",
    ],
    expectedDependencies: ["react", "koa", "duckdb", "styled-components"],
    expectedDevDependencies: [],
    validationRules: [
      { type: "file-exists", path: "apps/api/src/index.js", description: "Koa server entry" },
      { type: "dependency-present", package: "koa", description: "Koa dependency" },
    ],
  },

  // Vue Combinations
  {
    name: "vue-express-postgres",
    config: {
      name: "vue-express-postgres",
      framework: "vue",
      backend: "express",
      database: "postgres",
      orm: "drizzle",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.vue",
      "apps/api/src/index.ts",
    ],
    expectedDependencies: ["vue", "express", "drizzle-orm"],
    expectedDevDependencies: ["typescript", "@types/express"],
    validationRules: [
      { type: "file-exists", path: "apps/web/src/App.vue", description: "Vue App component" },
      { type: "dependency-present", package: "vue", description: "Vue dependency" },
    ],
  },

  // Svelte Combinations
  {
    name: "svelte-hono-cloudflare",
    config: {
      name: "svelte-hono-cloudflare",
      framework: "svelte",
      backend: "hono",
      database: "cloudflare-d1",
      orm: "drizzle",
      styling: "tailwind",
      runtime: "bun",
      typescript: true,
      category: "edge",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.svelte",
      "apps/api/src/index.ts",
    ],
    expectedDependencies: ["svelte", "hono", "drizzle-orm"],
    expectedDevDependencies: ["typescript", "@sveltejs/vite-plugin-svelte"],
    validationRules: [
      { type: "file-exists", path: "apps/web/src/App.svelte", description: "Svelte App component" },
      { type: "dependency-present", package: "svelte", description: "Svelte dependency" },
    ],
  },

  // Next.js Combinations
  {
    name: "next-full-stack",
    config: {
      name: "next-full-stack",
      framework: "next",
      backend: "next-api",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      category: "critical",
      expectedDuration: 10000,
    },
    expectedFiles: [
      "package.json",
      "src/app/page.tsx",
      "src/app/api/route.ts",
      "prisma/schema.prisma",
    ],
    expectedDependencies: ["next", "react", "react-dom", "@prisma/client"],
    expectedDevDependencies: ["typescript", "@types/react", "prisma", "tailwindcss"],
    validationRules: [
      { type: "file-exists", path: "src/app/page.tsx", description: "Next.js page" },
      { type: "file-exists", path: "prisma/schema.prisma", description: "Prisma schema" },
      { type: "script-exists", script: "dev", description: "Development script" },
    ],
  },

  // TanStack Router Combinations
  {
    name: "tanstack-router-express",
    config: {
      name: "tanstack-router-express",
      framework: "tanstack-router",
      backend: "express",
      database: "mysql",
      orm: "prisma",
      styling: "css-modules",
      runtime: "node",
      typescript: true,
      category: "common",
      expectedDuration: 9000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/routes/__root.tsx",
      "apps/api/src/index.ts",
    ],
    expectedDependencies: ["react", "@tanstack/react-router", "express", "@prisma/client"],
    expectedDevDependencies: ["typescript", "@types/react", "prisma"],
    validationRules: [
      {
        type: "file-exists",
        path: "apps/web/src/routes/__root.tsx",
        description: "TanStack Router root",
      },
      {
        type: "dependency-present",
        package: "@tanstack/react-router",
        description: "TanStack Router",
      },
    ],
  },

  // React Router v7 Combinations
  {
    name: "react-router-v7-full",
    config: {
      name: "react-router-v7-full",
      framework: "react-router",
      backend: "none",
      database: "postgres",
      orm: "drizzle",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: ["package.json", "app/root.tsx", "app/routes/index.tsx", "vite.config.ts"],
    expectedDependencies: ["react", "react-dom", "react-router", "drizzle-orm"],
    expectedDevDependencies: ["typescript", "@types/react", "vite"],
    validationRules: [
      { type: "file-exists", path: "app/root.tsx", description: "React Router v7 root" },
      { type: "dependency-present", package: "react-router", description: "React Router v7" },
    ],
  },

  // Vite Combinations
  {
    name: "vite-react-backend",
    config: {
      name: "vite-react-backend",
      framework: "vite",
      backend: "express",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      uiFramework: "react",
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/package.json",
      "apps/web/src/App.tsx",
      "apps/web/vite.config.ts",
    ],
    expectedDependencies: ["react", "express", "vite"],
    expectedDevDependencies: ["typescript", "@types/react"],
    validationRules: [
      { type: "file-exists", path: "apps/web/vite.config.ts", description: "Vite config" },
      { type: "dependency-present", package: "vite", description: "Vite dependency" },
    ],
  },

  // Cloudflare Workers
  {
    name: "cloudflare-workers-api",
    config: {
      name: "cloudflare-workers-api",
      framework: "none",
      backend: "cloudflare-workers",
      database: "cloudflare-d1",
      orm: "drizzle",
      styling: "none",
      runtime: "cloudflare",
      typescript: true,
      category: "edge",
      expectedDuration: 6000,
    },
    expectedFiles: ["package.json", "src/index.ts", "wrangler.toml", "drizzle.config.ts"],
    expectedDependencies: ["@cloudflare/workers-types", "drizzle-orm"],
    expectedDevDependencies: ["typescript", "wrangler"],
    validationRules: [
      { type: "file-exists", path: "wrangler.toml", description: "Wrangler config" },
      { type: "dependency-present", package: "wrangler", description: "Wrangler CLI" },
    ],
  },

  // FastAPI (Python backend)
  {
    name: "react-fastapi-postgres",
    config: {
      name: "react-fastapi-postgres",
      framework: "react",
      backend: "fastapi",
      database: "postgres",
      orm: "sqlalchemy",
      styling: "tailwind",
      runtime: "python",
      typescript: false,
      category: "edge",
      expectedDuration: 9000,
    },
    expectedFiles: [
      "package.json",
      "apps/web/package.json",
      "apps/api/requirements.txt",
      "apps/api/app/main.py",
      "apps/web/src/App.jsx",
    ],
    expectedDependencies: ["react"],
    expectedDevDependencies: [],
    validationRules: [
      { type: "file-exists", path: "apps/api/app/main.py", description: "FastAPI main file" },
      {
        type: "file-exists",
        path: "apps/api/requirements.txt",
        description: "Python requirements",
      },
    ],
  },
];

// Docker Configuration Tests
export const DOCKER_FIXTURES: ProjectFixture[] = [
  {
    name: "react-express-docker-postgres",
    config: {
      name: "react-express-docker-postgres",
      framework: "react",
      backend: "express",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      docker: true,
      category: "critical",
      expectedDuration: 12000,
    },
    expectedFiles: [
      "docker-compose.yml",
      "docker/postgres/docker-compose.yml",
      "docker/wait-for-db.sh",
      ".env.docker",
    ],
    expectedDependencies: ["react", "express", "@prisma/client"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "file-exists", path: "docker-compose.yml", description: "Docker Compose file" },
      {
        type: "file-exists",
        path: "docker/postgres/docker-compose.yml",
        description: "Postgres Docker config",
      },
    ],
  },
  {
    name: "next-docker-mysql",
    config: {
      name: "next-docker-mysql",
      framework: "next",
      backend: "none",
      database: "mysql",
      orm: "drizzle",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      docker: true,
      category: "common",
      expectedDuration: 10000,
    },
    expectedFiles: ["docker-compose.yml", "docker/mysql/docker-compose.yml", ".env.docker"],
    expectedDependencies: ["next", "drizzle-orm", "mysql2"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      {
        type: "file-exists",
        path: "docker/mysql/docker-compose.yml",
        description: "MySQL Docker config",
      },
    ],
  },
  {
    name: "docker-mongodb-redis",
    config: {
      name: "docker-mongodb-redis",
      framework: "react",
      backend: "express",
      database: "mongodb",
      orm: "mongoose",
      styling: "css",
      runtime: "node",
      typescript: true,
      docker: true,
      includeRedis: true,
      category: "edge",
      expectedDuration: 11000,
    },
    expectedFiles: ["docker-compose.yml", "docker/mongodb/docker-compose.yml", ".env.docker"],
    expectedDependencies: ["react", "express", "mongoose", "redis"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      {
        type: "file-exists",
        path: "docker/mongodb/docker-compose.yml",
        description: "MongoDB Docker config",
      },
      { type: "dependency-present", package: "redis", description: "Redis client" },
    ],
  },
];

// Powerups Tests
export const POWERUP_FIXTURES: ProjectFixture[] = [
  {
    name: "react-with-testing-powerups",
    config: {
      name: "react-with-testing-powerups",
      framework: "react",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      powerups: ["vitest", "playwright", "cypress"],
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "vitest.config.ts",
      "playwright.config.ts",
      "cypress.config.ts",
      "tests/unit/example.test.ts",
      "tests/e2e/example.spec.ts",
    ],
    expectedDependencies: ["react"],
    expectedDevDependencies: ["vitest", "@playwright/test", "cypress", "@testing-library/react"],
    validationRules: [
      { type: "file-exists", path: "vitest.config.ts", description: "Vitest config" },
      { type: "file-exists", path: "playwright.config.ts", description: "Playwright config" },
      { type: "script-exists", script: "test", description: "Test script" },
    ],
  },
  {
    name: "next-with-dev-powerups",
    config: {
      name: "next-with-dev-powerups",
      framework: "next",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      powerups: ["prettier", "eslint", "husky", "commitizen"],
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: [".prettierrc", ".eslintrc.js", ".husky/pre-commit", ".czrc"],
    expectedDependencies: ["next"],
    expectedDevDependencies: ["prettier", "eslint", "husky", "commitizen"],
    validationRules: [
      { type: "file-exists", path: ".prettierrc", description: "Prettier config" },
      { type: "file-exists", path: ".eslintrc.js", description: "ESLint config" },
      { type: "script-exists", script: "lint", description: "Lint script" },
    ],
  },
  {
    name: "react-with-bundling-powerups",
    config: {
      name: "react-with-bundling-powerups",
      framework: "react",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "css",
      runtime: "node",
      typescript: true,
      powerups: ["bundle-analyzer", "million", "vite-pwa"],
      category: "edge",
      expectedDuration: 7000,
    },
    expectedFiles: ["vite.config.ts", "public/manifest.json", "public/sw.js"],
    expectedDependencies: ["react"],
    expectedDevDependencies: ["webpack-bundle-analyzer", "million", "vite-plugin-pwa"],
    validationRules: [
      { type: "dependency-present", package: "million", description: "Million.js optimizer" },
      { type: "dependency-present", package: "vite-plugin-pwa", description: "PWA plugin" },
    ],
  },
  {
    name: "vue-with-i18n-powerups",
    config: {
      name: "vue-with-i18n-powerups",
      framework: "vue",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      powerups: ["vue-i18n", "vue-router"],
      category: "common",
      expectedDuration: 6000,
    },
    expectedFiles: ["src/i18n/index.ts", "src/router/index.ts", "src/locales/en.json"],
    expectedDependencies: ["vue", "vue-i18n", "vue-router"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "file-exists", path: "src/i18n/index.ts", description: "i18n setup" },
      { type: "dependency-present", package: "vue-i18n", description: "Vue i18n" },
    ],
  },
  {
    name: "monorepo-powerups",
    config: {
      name: "monorepo-powerups",
      framework: "react",
      backend: "express",
      database: "none",
      orm: "none",
      styling: "css",
      runtime: "node",
      typescript: true,
      powerups: ["turborepo", "nx"],
      category: "edge",
      expectedDuration: 9000,
    },
    expectedFiles: ["turbo.json", "nx.json", "apps/web/package.json", "apps/api/package.json"],
    expectedDependencies: ["react", "express"],
    expectedDevDependencies: ["turbo", "nx"],
    validationRules: [
      { type: "file-exists", path: "turbo.json", description: "Turborepo config" },
      { type: "dependency-present", package: "turbo", description: "Turborepo" },
    ],
  },
];

// Plugin Tests
export const PLUGIN_FIXTURES: ProjectFixture[] = [
  {
    name: "react-with-payment-plugins",
    config: {
      name: "react-with-payment-plugins",
      framework: "react",
      backend: "express",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      plugins: ["stripe"],
      category: "critical",
      expectedDuration: 9000,
    },
    expectedFiles: [
      "apps/api/src/routes/stripe.ts",
      "apps/web/src/components/StripeCheckout.tsx",
      ".env.example",
    ],
    expectedDependencies: ["react", "express", "stripe", "@stripe/stripe-js"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "stripe", description: "Stripe SDK" },
      {
        type: "file-exists",
        path: "apps/api/src/routes/stripe.ts",
        description: "Stripe API routes",
      },
    ],
  },
  {
    name: "next-with-email-plugins",
    config: {
      name: "next-with-email-plugins",
      framework: "next",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      plugins: ["resend", "sendgrid"],
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: [
      "src/lib/email/resend.ts",
      "src/lib/email/sendgrid.ts",
      "src/app/api/email/route.ts",
    ],
    expectedDependencies: ["next", "resend", "@sendgrid/mail"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "resend", description: "Resend email SDK" },
      { type: "dependency-present", package: "@sendgrid/mail", description: "SendGrid SDK" },
    ],
  },
  {
    name: "react-with-realtime-plugins",
    config: {
      name: "react-with-realtime-plugins",
      framework: "react",
      backend: "express",
      database: "none",
      orm: "none",
      styling: "css",
      runtime: "node",
      typescript: true,
      plugins: ["socketio"],
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: ["apps/api/src/socket/index.ts", "apps/web/src/hooks/useSocket.ts"],
    expectedDependencies: ["react", "express", "socket.io", "socket.io-client"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "socket.io", description: "Socket.IO server" },
      { type: "dependency-present", package: "socket.io-client", description: "Socket.IO client" },
    ],
  },
  {
    name: "next-with-analytics-plugins",
    config: {
      name: "next-with-analytics-plugins",
      framework: "next",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      plugins: ["posthog", "sentry", "vercel-analytics"],
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "src/lib/analytics/posthog.ts",
      "src/lib/analytics/sentry.ts",
      "src/app/layout.tsx",
    ],
    expectedDependencies: ["next", "posthog-js", "@sentry/nextjs", "@vercel/analytics"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "posthog-js", description: "PostHog analytics" },
      { type: "dependency-present", package: "@sentry/nextjs", description: "Sentry monitoring" },
    ],
  },
  {
    name: "react-with-storage-plugins",
    config: {
      name: "react-with-storage-plugins",
      framework: "react",
      backend: "express",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      plugins: ["cloudinary", "uploadthing"],
      category: "edge",
      expectedDuration: 7500,
    },
    expectedFiles: ["apps/api/src/routes/upload.ts", "apps/web/src/components/FileUpload.tsx"],
    expectedDependencies: ["react", "express", "cloudinary", "uploadthing"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "cloudinary", description: "Cloudinary SDK" },
      { type: "dependency-present", package: "uploadthing", description: "UploadThing SDK" },
    ],
  },
];

// Authentication Tests
export const AUTH_FIXTURES: ProjectFixture[] = [
  {
    name: "next-with-better-auth",
    config: {
      name: "next-with-better-auth",
      framework: "next",
      backend: "none",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      authProvider: "better-auth",
      category: "critical",
      expectedDuration: 9000,
    },
    expectedFiles: [
      "src/lib/auth.ts",
      "src/lib/auth-client.ts",
      "src/app/api/auth/[...auth]/route.ts",
      "src/app/(auth)/login/page.tsx",
    ],
    expectedDependencies: ["next", "better-auth", "@better-auth/client"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "file-exists", path: "src/lib/auth.ts", description: "Auth configuration" },
      { type: "dependency-present", package: "better-auth", description: "Better Auth" },
    ],
  },
  {
    name: "react-with-clerk",
    config: {
      name: "react-with-clerk",
      framework: "react",
      backend: "express",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      authProvider: "clerk",
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: [
      "apps/web/src/components/auth/ClerkProvider.tsx",
      "apps/api/src/middleware/auth.ts",
    ],
    expectedDependencies: ["react", "express", "@clerk/clerk-react", "@clerk/express"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "@clerk/clerk-react", description: "Clerk React" },
      { type: "dependency-present", package: "@clerk/express", description: "Clerk Express" },
    ],
  },
  {
    name: "next-with-supabase-auth",
    config: {
      name: "next-with-supabase-auth",
      framework: "next",
      backend: "none",
      database: "supabase",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      authProvider: "supabase",
      category: "edge",
      expectedDuration: 8000,
    },
    expectedFiles: [
      "src/lib/supabase/client.ts",
      "src/lib/supabase/server.ts",
      "src/app/auth/callback/route.ts",
    ],
    expectedDependencies: ["next", "@supabase/supabase-js", "@supabase/ssr"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      {
        type: "dependency-present",
        package: "@supabase/supabase-js",
        description: "Supabase client",
      },
      {
        type: "file-exists",
        path: "src/lib/supabase/client.ts",
        description: "Supabase client setup",
      },
    ],
  },
];

// UI Library Tests
export const UI_LIBRARY_FIXTURES: ProjectFixture[] = [
  {
    name: "react-with-shadcn",
    config: {
      name: "react-with-shadcn",
      framework: "react",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      uiLibrary: "shadcn",
      category: "critical",
      expectedDuration: 7000,
    },
    expectedFiles: ["components.json", "src/components/ui/button.tsx", "src/lib/utils.ts"],
    expectedDependencies: ["react", "class-variance-authority", "clsx", "tailwind-merge"],
    expectedDevDependencies: ["typescript", "tailwindcss"],
    validationRules: [
      { type: "file-exists", path: "components.json", description: "shadcn config" },
      {
        type: "file-exists",
        path: "src/components/ui/button.tsx",
        description: "Button component",
      },
    ],
  },
  {
    name: "vue-with-daisyui",
    config: {
      name: "vue-with-daisyui",
      framework: "vue",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      uiLibrary: "daisyui",
      category: "common",
      expectedDuration: 6000,
    },
    expectedFiles: ["tailwind.config.js", "src/components/DaisyButton.vue"],
    expectedDependencies: ["vue", "daisyui"],
    expectedDevDependencies: ["typescript", "tailwindcss"],
    validationRules: [
      { type: "dependency-present", package: "daisyui", description: "DaisyUI" },
      { type: "file-exists", path: "tailwind.config.js", description: "Tailwind config" },
    ],
  },
  {
    name: "react-with-mui",
    config: {
      name: "react-with-mui",
      framework: "react",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "emotion",
      runtime: "node",
      typescript: true,
      uiLibrary: "mui",
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: ["src/theme/index.ts", "src/components/ThemeProvider.tsx"],
    expectedDependencies: ["react", "@mui/material", "@emotion/react", "@emotion/styled"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "dependency-present", package: "@mui/material", description: "Material UI" },
      { type: "file-exists", path: "src/theme/index.ts", description: "MUI theme" },
    ],
  },
];

// AI Integration Tests
export const AI_FIXTURES: ProjectFixture[] = [
  {
    name: "react-with-claude-mcp",
    config: {
      name: "react-with-claude-mcp",
      framework: "react",
      backend: "express",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      aiAssistant: "claude",
      mcpServers: ["filesystem", "github-official", "postgresql"],
      category: "common",
      expectedDuration: 8000,
    },
    expectedFiles: [
      ".claude/settings.json",
      ".claude/mcp/filesystem.json",
      ".claude/mcp/github-official.json",
      ".claude/mcp/postgresql.json",
      "CLAUDE.md",
    ],
    expectedDependencies: ["react", "express"],
    expectedDevDependencies: ["typescript"],
    validationRules: [
      { type: "file-exists", path: ".claude/settings.json", description: "Claude settings" },
      { type: "file-exists", path: "CLAUDE.md", description: "Claude documentation" },
    ],
  },
  {
    name: "next-with-cursor-ai",
    config: {
      name: "next-with-cursor-ai",
      framework: "next",
      backend: "none",
      database: "none",
      orm: "none",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      aiAssistant: "cursor",
      category: "edge",
      expectedDuration: 6000,
    },
    expectedFiles: [".cursorrules", ".cursorignore"],
    expectedDependencies: ["next"],
    expectedDevDependencies: ["typescript"],
    validationRules: [{ type: "file-exists", path: ".cursorrules", description: "Cursor rules" }],
  },
];

// Deployment Tests
export const DEPLOYMENT_FIXTURES: ProjectFixture[] = [
  {
    name: "next-vercel-deployment",
    config: {
      name: "next-vercel-deployment",
      framework: "next",
      backend: "none",
      database: "postgres",
      orm: "prisma",
      styling: "tailwind",
      runtime: "node",
      typescript: true,
      deploymentMethod: "vercel",
      category: "common",
      expectedDuration: 7000,
    },
    expectedFiles: ["vercel.json", ".vercelignore"],
    expectedDependencies: ["next"],
    expectedDevDependencies: ["typescript"],
    validationRules: [{ type: "file-exists", path: "vercel.json", description: "Vercel config" }],
  },
  {
    name: "react-cloudflare-pages",
    config: {
      name: "react-cloudflare-pages",
      framework: "react",
      backend: "cloudflare-workers",
      database: "cloudflare-d1",
      orm: "drizzle",
      styling: "tailwind",
      runtime: "cloudflare",
      typescript: true,
      deploymentMethod: "cloudflare-pages",
      category: "edge",
      expectedDuration: 8000,
    },
    expectedFiles: ["wrangler.toml", "_worker.js"],
    expectedDependencies: ["react", "drizzle-orm"],
    expectedDevDependencies: ["typescript", "wrangler"],
    validationRules: [
      { type: "file-exists", path: "wrangler.toml", description: "Wrangler config" },
      { type: "dependency-present", package: "wrangler", description: "Wrangler CLI" },
    ],
  },
];

// Combined comprehensive fixtures
export const ALL_EXPANDED_FIXTURES = [
  ...FRAMEWORK_BACKEND_FIXTURES,
  ...DOCKER_FIXTURES,
  ...POWERUP_FIXTURES,
  ...PLUGIN_FIXTURES,
  ...AUTH_FIXTURES,
  ...UI_LIBRARY_FIXTURES,
  ...AI_FIXTURES,
  ...DEPLOYMENT_FIXTURES,
];
