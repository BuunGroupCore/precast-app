<template>
  <div{{#if (eq styling "tailwind")}} class="bg-white rounded-lg shadow-md p-6"{{else}} class="card"{{/if}}>
    <h2{{#if (eq styling "tailwind")}} class="text-2xl font-semibold text-gray-800 mb-4"{{else}} class="card-title"{{/if}}>Counter Example</h2>
    
    <div{{#if (eq styling "tailwind")}} class="text-center"{{else}} class="counter-content"{{/if}}>
      <p{{#if (eq styling "tailwind")}} class="text-3xl font-bold text-gray-700 mb-4"{{else}} class="count"{{/if}}>
        Count: \{{ count }}
      </p>
      
      <div{{#if (eq styling "tailwind")}} class="space-x-4"{{else}} class="button-group"{{/if}}>
        <button 
          @click="increment"
          {{#if (eq styling "tailwind")}}class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded transition-colors"{{else}}class="button button-primary"{{/if}}
        >
          Increment
        </button>
        
        <button 
          @click="decrement"
          {{#if (eq styling "tailwind")}}class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded transition-colors"{{else}}class="button button-secondary"{{/if}}
        >
          Decrement
        </button>
        
        <button 
          @click="reset"
          {{#if (eq styling "tailwind")}}class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded transition-colors"{{else}}class="button button-reset"{{/if}}
        >
          Reset
        </button>
      </div>
    </div>
  </div>
</template>

<script{{#if typescript}} lang="ts"{{/if}} setup>
/**
 * Counter Component
 * @description Vue 3 composition API counter with increment, decrement, and reset functionality
 */

import { ref } from 'vue'

const count = ref(0)

/**
 * Increments the counter by 1
 */
const increment = () => {
  count.value++
}

/**
 * Decrements the counter by 1
 */
const decrement = () => {
  count.value--
}

/**
 * Resets the counter to 0
 */
const reset = () => {
  count.value = 0
}
</script>

{{#unless (eq styling "tailwind")}}
<style{{#if (eq styling "scss")}} lang="scss"{{/if}} scoped>
.card {
  background: white;
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.card-title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: #333;
}

.counter-content {
  text-align: center;
}

.count {
  font-size: 2rem;
  font-weight: bold;
  color: #555;
  margin-bottom: 1.5rem;
}

.button-group {
  display: flex;
  gap: 1rem;
  justify-content: center;
}

.button {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  
  &:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
  
  &.button-primary {
    background: #42b883;
    color: white;
    
    &:hover {
      background: #38a271;
    }
  }
  
  &.button-secondary {
    background: #e74c3c;
    color: white;
    
    &:hover {
      background: #c0392b;
    }
  }
  
  &.button-reset {
    background: #95a5a6;
    color: white;
    
    &:hover {
      background: #7f8c8d;
    }
  }
}
</style>
{{/unless}}