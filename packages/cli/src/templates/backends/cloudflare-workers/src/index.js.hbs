import { Hono } from 'hono';
import { cors } from '@hono/cors';
import { logger } from 'hono/logger';
import { timing } from 'hono/timing';

import { apiRoutes } from './routes/api.js';
import { healthRoutes } from './routes/health.js';
{{#if authProvider}}
import { authMiddleware } from './middleware/auth.js';
{{/if}}
import { rateLimitMiddleware } from './middleware/rate-limit.js';

const app = new Hono();

// Global middleware
app.use('*', timing());
app.use('*', logger());

// CORS configuration
app.use('*', cors({
  origin: (origin) => {
    const allowedOrigins = process.env.NODE_ENV === 'production'
      ? ['https://{{name}}.com']
      : ['http://localhost:3000', 'http://localhost:5173'];
    return allowedOrigins.includes(origin) ? origin : allowedOrigins[0];
  },
  credentials: true,
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'],
  maxAge: 86400,
}));

// Rate limiting
app.use('/api/*', rateLimitMiddleware);

{{#if authProvider}}
// Authentication middleware for protected routes
app.use('/api/protected/*', authMiddleware);
{{/if}}

// Routes
app.route('/health', healthRoutes);
app.route('/api', apiRoutes);

// Root endpoint
app.get('/', (c) => {
  return c.json({
    message: 'Welcome to {{name}} API',
    version: c.env.API_VERSION || 'v1',
    endpoints: {
      health: '/health',
      api: '/api',
    },
  });
});

// 404 handler
app.notFound((c) => {
  return c.json(
    {
      success: false,
      error: 'Not Found',
      message: `Route ${c.req.path} not found`,
    },
    404
  );
});

// Global error handler
app.onError((err, c) => {
  console.error('Global error:', err);
  
  const status = err.status || 500;
  const message = process.env.NODE_ENV === 'production'
    ? 'Internal Server Error'
    : err.message;

  return c.json(
    {
      success: false,
      error: err.name || 'Error',
      message,
      ...(process.env.NODE_ENV !== 'production' && { stack: err.stack }),
    },
    status
  );
});

export default app;