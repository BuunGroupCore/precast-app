/**
 * Fastify Server Configuration
 * @module server
 * @description Main Fastify server with authentication, API routes, and health checks
 */

import Fastify, { FastifyInstance } from 'fastify';
import cors from '@fastify/cors';
import helmet from '@fastify/helmet';
import dotenv from 'dotenv';
{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
import { healthRoutes } from '@/api/routes/health{{#if typescript}}.js{{/if}}';
{{/if}}
{{#if (includes plugins 'resend')}}
import emailRoutes from '@/api/routes/email{{#if typescript}}.js{{/if}}';
{{/if}}
{{#if authProvider}}
{{#if (eq authProvider "better-auth")}}
import { auth } from '@/features/auth/auth{{#if typescript}}.js{{/if}}';
{{else}}
import { authRoutes } from '@/features/auth/routes{{#if typescript}}.js{{/if}}';
{{/if}}
{{/if}}

dotenv.config();

const fastify: FastifyInstance = Fastify({
  logger: {
    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug'
  }
});

const PORT = Number(process.env.PORT) || 3001;
const HOST = process.env.HOST || 'localhost';

await fastify.register(helmet);
await fastify.register(cors, {
  {{#if (or (includes powerups "ngrok") (includes powerups "cloudflare-tunnel"))}}
  origin: (origin, callback) => {
    if (!origin) {
      return callback(null, true);
    }
    
    const allowedOrigins = [
      'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
      'http://localhost:3000',
      'http://localhost:4200',
      'http://localhost:5173',
      'http://localhost:7000',{{#if (eq framework "tanstack-start")}}{{/if}}
    ];
    
    if (allowedOrigins.includes(origin)) {
      return callback(null, origin);
    }
    
    {{#if (includes powerups "ngrok")}}
    if (origin.match(/^https?:\/\/[a-z0-9-]+\.(ngrok-free\.app|ngrok\.app|ngrok\.io)$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    {{#if (includes powerups "cloudflare-tunnel")}}
    if (origin.match(/\.trycloudflare\.com$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    if (process.env.CLIENT_URL && origin === process.env.CLIENT_URL) {
      return callback(null, origin);
    }
    
    callback(new Error('Not allowed by CORS'));
  },
  {{else}}
  origin: process.env.CLIENT_URL?.split(',') || [
    'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
    'http://localhost:3000',
    'http://localhost:4200',
    'http://localhost:5173',
    'http://localhost:7000',{{#if (eq framework "tanstack-start")}}{{/if}}
  ],
  {{/if}}
  credentials: true,
});

{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
await fastify.register(healthRoutes, { prefix: '/api' });
{{/if}}
{{#if (includes plugins 'resend')}}
await fastify.register(emailRoutes, { prefix: '/api' });
{{/if}}
{{#if authProvider}}
{{#if (eq authProvider "better-auth")}}
// Mount Better Auth for Fastify using direct handler
// toNodeHandler was causing hanging issues
// Use /api/auth* to match both /api/auth and /api/auth/*
fastify.all('/api/auth*', async (request, reply) => {
  try {
    // Create a Web API Request from Fastify request
    // IMPORTANT: Use request.url to get the full path including /api/auth/session
    const url = `${request.protocol}://${request.hostname}${request.url}`;
    const headers{{#if typescript}}: HeadersInit{{/if}} = {};
    
    // Copy headers
    for (const [key, value] of Object.entries(request.headers)) {
      if (typeof value === 'string') {
        headers[key] = value;
      } else if (Array.isArray(value)) {
        headers[key] = value.join(', ');
      }
    }
    
    // Create Request object with credentials for cookies
    const webRequest = new Request(url, {
      method: request.method{{#if typescript}} as string{{/if}},
      headers,
      body: request.method !== 'GET' && request.method !== 'HEAD' 
        ? JSON.stringify(request.body) 
        : undefined,
      credentials: 'include', // Important for cookie-based sessions
    });
    
    // Call Better Auth handler
    const response = await auth.handler(webRequest);
    
    // Copy response headers
    response.headers.forEach((value, key) => {
      reply.header(key, value);
    });
    
    // Set status and send response
    reply.status(response.status);
    const body = await response.text();
    reply.send(body);
    
  } catch (error) {
    request.log.error(error);
    reply.status(500).send({ 
      error: {{#if typescript}}error instanceof Error ? error.message : {{/if}}'Internal server error' 
    });
  }
});
{{else}}
await fastify.register(authRoutes, { prefix: '/api/auth' });
{{/if}}
{{/if}}
{{#unless (or (and plugins plugins.length) (and database (ne database 'none')))}}
fastify.get('/api/health', async (request, reply) => {
  return {
    status: 'ok',
    message: '{{name}} API is running',
    timestamp: new Date().toISOString()
  };
});
{{/unless}}

fastify.get('/api/hello', async (request, reply) => {
  return {
    message: 'Hello from {{name}} API!',
    version: '1.0.0'
  };
});

// 404 handler
fastify.setNotFoundHandler(async (request, reply) => {
  reply.status(404).send({
    error: 'Route not found',
    path: request.url
  });
});

// Error handler
fastify.setErrorHandler(async (error, request, reply) => {
  fastify.log.error(error);
  
  reply.status(500).send({
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

// Start server
const start = async () => {
  try {
    {{#if (or (includes powerups "ngrok") (includes powerups "traefik") (includes powerups "cloudflare-tunnel"))}}
    // Listen on all interfaces (0.0.0.0) to allow tunnel access
    await fastify.listen({ port: PORT, host: '0.0.0.0' });
    console.log(`[SERVER] Server running on http://${HOST}:${PORT}`);
    console.log(`[API] Health check: http://${HOST}:${PORT}/api/health`);
    console.log(`[INFO] Environment: ${process.env.NODE_ENV || 'development'}`);
    {{#if (includes powerups "ngrok")}}
    console.log(`[NETWORK] ngrok tunnel access enabled on 0.0.0.0:${PORT}`);
    {{/if}}
    {{#if (includes powerups "traefik")}}
    console.log(`[NETWORK] Traefik proxy access enabled on 0.0.0.0:${PORT}`);
    {{/if}}
    {{#if (includes powerups "cloudflare-tunnel")}}
    console.log(`[NETWORK] Cloudflare tunnel access enabled on 0.0.0.0:${PORT}`);
    {{/if}}
    {{else}}
    // Listen on localhost only
    await fastify.listen({ port: PORT, host: HOST });
    console.log(`[SERVER] Server running on http://${HOST}:${PORT}`);
    console.log(`[API] Health check: http://${HOST}:${PORT}/api/health`);
    console.log(`[INFO] Environment: ${process.env.NODE_ENV || 'development'}`);
    {{/if}}
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();