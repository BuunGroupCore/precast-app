import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Enable CORS
  app.enableCors({
    origin: (origin, callback) => {
      // Allow requests with no origin (like mobile apps or curl)
      if (!origin) {
        return callback(null, true);
      }
      
      // Check if origin matches allowed patterns
      const allowedOrigins = [
        process.env.CLIENT_URL,
        'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
        'http://localhost:3000',
        'http://localhost:4200',
        'http://localhost:5173',
        'http://localhost:7000',{{#if (eq framework "tanstack-start")}}
        // TanStack Start can use different ports{{/if}}
      ].filter(Boolean);
      
      // Check for exact matches
      if (allowedOrigins.includes(origin)) {
        return callback(null, origin);
      }
      
      {{#if (includes powerups "ngrok")}}
      // Check for ngrok domains
      if (origin.match(/^https?:\/\/[a-z0-9-]+\.(ngrok-free\.app|ngrok\.app|ngrok\.io)$/)) {
        return callback(null, origin);
      }
      {{/if}}
      
      {{#if (includes powerups "cloudflare-tunnel")}}
      // Check for Cloudflare tunnel domains
      if (origin.match(/\.trycloudflare\.com$/)) {
        return callback(null, origin);
      }
      {{/if}}
      
      // Check for custom CLIENT_URL
      if (process.env.CLIENT_URL && origin === process.env.CLIENT_URL) {
        return callback(null, origin);
      }
      
      // Reject other origins
      callback(new Error('Not allowed by CORS'));
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'{{#if (includes powerups "ngrok")}}, 'ngrok-skip-browser-warning'{{/if}}],
  });

  // Global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  // API prefix
  app.setGlobalPrefix('api');

  // Swagger documentation
  const config = new DocumentBuilder()
    .setTitle('{{config.name}} API')
    .setDescription('The {{config.name}} API documentation')
    .setVersion('1.0')
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);

  const port = process.env.PORT || 3001;
  await app.listen(port);
  
  console.log(`[SERVER] {{config.name}} API is running on http://localhost:${port}`);
  console.log(`[API] API Documentation: http://localhost:${port}/api/docs`);
  console.log(`[API] Health check: http://localhost:${port}/api/health`);
}
bootstrap();