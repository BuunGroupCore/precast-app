/**
 * useApiRequest Hook
 * Centralized API request handling with framework-specific headers
 */

import { useCallback } from 'react';
import { getApiUrl, getApiHeaders, getSimpleApiHeaders } from '../utils/environmentUtils';
import { ServiceTestContext } from '../types';

/**
 * Hook for making API requests with proper headers and error handling
 */
export function useApiRequest() {
  /**
   * Get the current API context for service testing
   */
  const getServiceTestContext = useCallback((): ServiceTestContext => {
    const apiUrl = getApiUrl() || "";
    const headers = getApiHeaders(apiUrl);
    
    return {
      apiUrl,
      headers,
      config: null, // Will be set by the calling component
    };
  }, []);

  /**
   * Make a GET request with proper headers
   */
  const get = useCallback(async (endpoint: string, options: RequestInit = {}) => {
    const apiUrl = getApiUrl() || "";
    const headers = getSimpleApiHeaders(apiUrl);
    
    const response = await fetch(`${apiUrl}${endpoint}`, {
      method: 'GET',
      headers: {
        ...headers,
        ...options.headers,
      },
      credentials: 'include',
      ...options,
    });
    
    return response;
  }, []);

  /**
   * Make a POST request with proper headers
   */
  const post = useCallback(async (endpoint: string, body?: any, options: RequestInit = {}) => {
    const apiUrl = getApiUrl() || "";
    const headers = getApiHeaders(apiUrl);
    
    const response = await fetch(`${apiUrl}${endpoint}`, {
      method: 'POST',
      headers: {
        ...headers,
        ...options.headers,
      },
      credentials: 'include',
      body: body ? JSON.stringify(body) : undefined,
      ...options,
    });
    
    return response;
  }, []);

  /**
   * Make a custom request with full control
   */
  const request = useCallback(async (endpoint: string, options: RequestInit = {}) => {
    const apiUrl = getApiUrl() || "";
    const defaultHeaders = options.method === 'POST' ? getApiHeaders(apiUrl) : getSimpleApiHeaders(apiUrl);
    
    const response = await fetch(`${apiUrl}${endpoint}`, {
      headers: {
        ...defaultHeaders,
        ...options.headers,
      },
      credentials: 'include',
      ...options,
    });
    
    return response;
  }, []);

  /**
   * Parse response as JSON with fallback to text
   */
  const parseResponse = useCallback(async (response: Response) => {
    try {
      return await response.json();
    } catch {
      return await response.text();
    }
  }, []);

  /**
   * Check if API is available
   */
  const isApiAvailable = useCallback(() => {
    const apiUrl = getApiUrl();
    return Boolean(apiUrl);
  }, []);

  return {
    get,
    post,
    request,
    parseResponse,
    getServiceTestContext,
    isApiAvailable,
    apiUrl: getApiUrl(),
  };
}