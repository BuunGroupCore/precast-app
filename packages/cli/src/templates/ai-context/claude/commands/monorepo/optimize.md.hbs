---
description: Optimize monorepo structure, dependencies, and performance using research-backed strategies
allowed-tools: Read, Write, Edit, Glob, Grep, Task, Bash
---

Optimize the monorepo structure and performance for this {{packageManager}}-based {{framework}} project using current best practices.

## Research-Driven Monorepo Optimization

### Phase 1: Monorepo Analysis
1. Read @README.md and @CLAUDE.md for project structure
2. Analyze current workspace configuration
3. Review package dependencies and structure
4. Identify performance bottlenecks

### Phase 2: Research Modern Practices
**Research cutting-edge monorepo optimization** using the web-research agent:

```
Use the Task tool to spawn the web-research agent:

Research modern monorepo optimization strategies for: {{packageManager}} workspaces with {{framework}}

Focus research on:
- {{packageManager}} workspace optimization 2024
- Monorepo dependency management best practices
- Build performance optimization strategies
- Package boundary optimization
- Modern CI/CD patterns for monorepos
- Tree-shaking and bundle optimization
- Development workflow improvements

Provide evidence-based optimization recommendations with measurable impact.
```

### Phase 3: Multi-Agent Optimization Strategy
**Launch parallel analysis agents:**

```
Use Task tool to spawn multiple agents simultaneously:

1. **web-research agent**:
   Research latest monorepo tooling and optimization techniques for {{packageManager}}

2. **monorepo-guide agent**:
   Analyze current structure and identify improvement opportunities

3. **architecture-guide agent**:
   Assess package boundaries and architectural optimization potential

4. **standards-enforcer agent**:
   Review dependency management and code quality across packages

Coordinate findings for comprehensive optimization plan.
```

## Optimization Areas

### 1. Dependency Management
**Research-informed dependency optimization:**
- Analyze duplicate dependencies across packages
- Research modern dependency hoisting strategies
- Optimize peer dependencies and version ranges
- Implement efficient workspace protocols

### 2. Build Performance
**Evidence-based build optimization:**
- Research incremental build strategies
- Optimize TypeScript compilation across packages
- Implement build caching strategies
- Research parallel build optimization

### 3. Development Workflow
**Modern development experience improvements:**
- Research hot reload optimization
- Implement efficient watch mode strategies
- Optimize development server coordination
- Research debugging workflow improvements

### 4. Package Structure
**Research-backed package organization:**
- Optimize shared package boundaries
- Research effective code splitting strategies
- Implement efficient barrel exports
- Optimize import/export patterns

### 5. CI/CD Pipeline
**Modern CI/CD optimization:**
- Research efficient testing strategies
- Implement smart build caching
- Optimize deployment pipelines
- Research parallel job execution

## Implementation Phases

### Phase 1: Analysis and Measurement
```bash
# Measure current performance
{{packageManager}} run build --verbose
{{packageManager}} run test --verbose
# Document baseline metrics
```

### Phase 2: Apply Research Findings
Implement research-backed optimizations:
- Update workspace configuration
- Optimize package.json files
- Implement build improvements
- Update development scripts

### Phase 3: Validation and Monitoring
```bash
# Measure improvements
{{packageManager}} run build --verbose
{{packageManager}} run test --verbose
# Compare against baseline metrics
```

## Specific Optimization Checklist

### Workspace Configuration
- [ ] Optimize {{#if (eq packageManager "pnpm")}}pnpm-workspace.yaml{{else if (eq packageManager "yarn")}}.yarnrc.yml{{else if (eq packageManager "bun")}}bunfig.toml{{else}}package.json workspaces{{/if}}
- [ ] Configure efficient hoisting strategies
- [ ] Implement workspace protocols
- [ ] Optimize dependency resolution

### Build System
- [ ] Implement incremental builds
- [ ] Configure build caching
- [ ] Optimize TypeScript project references
- [ ] Set up parallel build execution

### Development Experience
- [ ] Optimize dev server startup time
- [ ] Implement efficient hot reload
- [ ] Configure watch mode optimization
- [ ] Set up debugging workflows

### Package Management
- [ ] Eliminate duplicate dependencies
- [ ] Optimize package boundaries
- [ ] Implement efficient imports
- [ ] Configure tree-shaking

Remember: Use research findings to validate each optimization and measure actual performance improvements.