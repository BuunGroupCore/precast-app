{{#if (eq database "postgres")}}
import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";
{{else if (eq database "mysql")}}
import { drizzle } from "drizzle-orm/mysql2";
import mysql from "mysql2/promise";
{{/if}}
import * as schema from "./schema{{#if typescript}}.js{{/if}}";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL environment variable is required");
}

{{#if (eq database "postgres")}}
/**
 * PostgreSQL connection pool
 */
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
})

/**
 * Drizzle database instance
 * @description Pre-configured Drizzle client for PostgreSQL
 */
export const db = drizzle(pool, { schema });
{{else if (eq database "mysql")}}
/**
 * MySQL connection pool
 */
const connection = mysql.createPool({
  uri: process.env.DATABASE_URL,
  connectionLimit: 20,
});

/**
 * Drizzle database instance  
 * @description Pre-configured Drizzle client for MySQL
 */
export const db = drizzle(connection, { schema, mode: "default" });
{{/if}}

/**
 * Database health check
 * @description Verifies database connection is working
 */
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    {{#if (eq database "postgres")}}
    const result = await db.execute("SELECT 1" as any);
    {{else if (eq database "mysql")}}
    const result = await db.execute("SELECT 1" as any);
    {{/if}}
    return true;
  } catch (error) {
    console.error("Database connection failed:", error);
    return false;
  }
}

/**
 * Graceful shutdown
 * @description Closes database connections properly
 */
process.on("SIGINT", async () => {
  {{#if (eq database "postgres")}}
  await pool.end();
  {{else if (eq database "mysql")}}
  await connection.end();
  {{/if}}
  process.exit(0);
});