{{#if typescript}}import { Context } from 'hono';

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  metadata?: {
    page?: number;
    limit?: number;
    total?: number;
    hasMore?: boolean;
  };
}

/**
 * Standard success response
 */
export function successResponse<T>(
  c: Context,
  data: T,
  status = 200,
  metadata?: ApiResponse['metadata']
): Response {
  const response: ApiResponse<T> = {
    success: true,
    data,
  };
  
  if (metadata) {
    response.metadata = metadata;
  }
  
  return c.json(response, status);
}

/**
 * Standard error response
 */
export function errorResponse(
  c: Context,
  error: string | Error,
  status = 500
): Response {
  const response: ApiResponse = {
    success: false,
    error: error instanceof Error ? error.message : error,
  };
  
  // Add stack trace in development
  if (c.env?.NODE_ENV === 'development' && error instanceof Error) {
    response.message = error.stack;
  }
  
  return c.json(response, status);
}

/**
 * Paginated response helper
 */
export function paginatedResponse<T>(
  c: Context,
  data: T[],
  page: number,
  limit: number,
  total: number
): Response {
  const hasMore = page * limit < total;
  
  return successResponse(c, data, 200, {
    page,
    limit,
    total,
    hasMore,
  });
}

/**
 * Validation error response
 */
export function validationErrorResponse(
  c: Context,
  errors: Record<string, string[]>
): Response {
  return c.json(
    {
      success: false,
      error: 'Validation failed',
      errors,
    },
    400
  );
}

/**
 * Not found response
 */
export function notFoundResponse(
  c: Context,
  resource = 'Resource'
): Response {
  return errorResponse(c, `${resource} not found`, 404);
}

/**
 * Unauthorized response
 */
export function unauthorizedResponse(
  c: Context,
  message = 'Unauthorized'
): Response {
  return errorResponse(c, message, 401);
}

/**
 * Forbidden response
 */
export function forbiddenResponse(
  c: Context,
  message = 'Forbidden'
): Response {
  return errorResponse(c, message, 403);
}{{else}}/**
 * Standard success response
 */
export function successResponse(c, data, status = 200, metadata) {
  const response = {
    success: true,
    data,
  };
  
  if (metadata) {
    response.metadata = metadata;
  }
  
  return c.json(response, status);
}

/**
 * Standard error response
 */
export function errorResponse(c, error, status = 500) {
  const response = {
    success: false,
    error: error instanceof Error ? error.message : error,
  };
  
  return c.json(response, status);
}

/**
 * Paginated response helper
 */
export function paginatedResponse(c, data, page, limit, total) {
  const hasMore = page * limit < total;
  
  return successResponse(c, data, 200, {
    page,
    limit,
    total,
    hasMore,
  });
}{{/if}}