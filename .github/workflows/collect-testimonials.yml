name: Collect Hero Testimonials

on:
  issues:
    types: [labeled]
  workflow_dispatch:

jobs:
  process-testimonial:
    if: contains(github.event.label.name, 'testimonial-approved') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Process Testimonial Issue
        id: process
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');

            // Get all testimonial issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'testimonial-approved',
              state: 'open'
            });

            if (issues.data.length === 0) {
              console.log('No approved testimonials to process');
              return;
            }

            // Read existing testimonials
            const testimonialsPath = path.join(process.env.GITHUB_WORKSPACE, 'packages/website/public/testimonials.json');
            let testimonials = [];

            try {
              const content = await fs.readFile(testimonialsPath, 'utf8');
              testimonials = JSON.parse(content);
            } catch (error) {
              console.log('No existing testimonials file found, creating new one');
            }

            // Process each issue
            for (const issue of issues.data) {
              console.log(`Processing issue #${issue.number}: ${issue.title}`);
              
              // Parse issue body to extract testimonial data
              const body = issue.body || '';
              const lines = body.split('\n');
              
              const testimonialData = {
                id: `gh-${issue.number}`,
                name: '',
                role: '',
                company: '',
                avatarSeed: '',
                content: '',
                rating: 5,
                date: new Date().toISOString().split('T')[0],
                projectType: '',
                highlighted: false
              };
              
              // Extract data from issue body (markdown format)
              let currentSection = '';
              let skipNext = false;
              
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                const nextLine = lines[i + 1] || '';
                
                // Skip comment lines
                if (line.startsWith('<!--') || line.includes('-->')) continue;
                
                // Detect sections by headers
                if (line.includes('**Your Hero Name:**')) {
                  currentSection = 'name';
                  // Check if value is on same line
                  const sameLine = line.split(':**')[1]?.trim();
                  if (sameLine) {
                    testimonialData.name = sameLine;
                    currentSection = '';
                  }
                } else if (line.includes('**Your Role:**')) {
                  currentSection = 'role';
                  const sameLine = line.split(':**')[1]?.trim();
                  if (sameLine) {
                    testimonialData.role = sameLine;
                    currentSection = '';
                  }
                } else if (line.includes('**Your Organization:**')) {
                  currentSection = 'company';
                  const sameLine = line.split(':**')[1]?.trim();
                  if (sameLine) {
                    testimonialData.company = sameLine;
                    currentSection = '';
                  }
                } else if (line.includes('**Avatar Seed:**')) {
                  currentSection = 'avatarSeed';
                  const sameLine = line.split(':**')[1]?.trim();
                  if (sameLine) {
                    testimonialData.avatarSeed = sameLine;
                    currentSection = '';
                  }
                } else if (line.includes('**Project Type:**')) {
                  currentSection = 'projectType';
                  const sameLine = line.split(':**')[1]?.trim();
                  if (sameLine) {
                    testimonialData.projectType = sameLine;
                    currentSection = '';
                  }
                } else if (line.includes('**Tell us about your experience')) {
                  currentSection = 'content';
                  skipNext = true; // Skip the comment line
                } else if (line.includes('**How many stars')) {
                  currentSection = 'rating';
                  skipNext = true; // Skip the comment line
                } else if (currentSection && line.trim() && !line.startsWith('#') && !skipNext) {
                  // Process the value based on current section
                  switch(currentSection) {
                    case 'name':
                      testimonialData.name = line.trim();
                      currentSection = '';
                      break;
                    case 'role':
                      testimonialData.role = line.trim();
                      currentSection = '';
                      break;
                    case 'company':
                      testimonialData.company = line.trim();
                      currentSection = '';
                      break;
                    case 'avatarSeed':
                      testimonialData.avatarSeed = line.trim();
                      currentSection = '';
                      break;
                    case 'projectType':
                      testimonialData.projectType = line.trim();
                      currentSection = '';
                      break;
                    case 'content':
                      // Continue collecting content until we hit another section
                      if (!line.startsWith('###') && !line.includes('**')) {
                        testimonialData.content += line.trim() + ' ';
                      } else {
                        currentSection = '';
                        i--; // Re-process this line
                      }
                      break;
                    case 'rating':
                      if (line.includes('5 stars') || line.includes('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')) testimonialData.rating = 5;
                      else if (line.includes('4 stars') || line.includes('‚≠ê‚≠ê‚≠ê‚≠ê')) testimonialData.rating = 4;
                      else if (line.includes('3 stars') || line.includes('‚≠ê‚≠ê‚≠ê')) testimonialData.rating = 3;
                      currentSection = '';
                      break;
                  }
                } else {
                  skipNext = false;
                }
              }
              
              // Clean up content
              testimonialData.content = testimonialData.content.trim();
              
              // Generate avatarSeed if not provided (use name + company as fallback)
              if (!testimonialData.avatarSeed) {
                testimonialData.avatarSeed = `${testimonialData.name}-${testimonialData.company}`.toLowerCase().replace(/[^a-z0-9]/g, '-');
              }
              
              // Add to testimonials array
              testimonials.push(testimonialData);
              
              // Close the issue with a thank you comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `üéâ Thank you for joining the Hero League, ${testimonialData.name}! Your testimonial has been added to our website. You're now officially a PRECAST superhero! ü¶∏‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏è`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

            // Write updated testimonials
            await fs.writeFile(testimonialsPath, JSON.stringify(testimonials, null, 2));

            // Create branch and PR
            const branchName = `testimonials-update-${Date.now()}`;
            const defaultBranch = context.payload.repository.default_branch;

            // Get the default branch ref
            const ref = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${defaultBranch}`
            });

            // Create new branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: ref.data.object.sha
            });

            // Read file content
            const fileContent = await fs.readFile(testimonialsPath, 'utf8');
            const contentBase64 = Buffer.from(fileContent).toString('base64');

            // Get file SHA if it exists
            let fileSha;
            try {
              const file = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'packages/website/public/testimonials.json',
                ref: defaultBranch
              });
              fileSha = file.data.sha;
            } catch (error) {
              console.log('File does not exist yet, will create it');
            }

            // Create or update file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'packages/website/public/testimonials.json',
              message: `feat: add new hero testimonials`,
              content: contentBase64,
              branch: branchName,
              sha: fileSha
            });

            // Create PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ü¶∏ Update Hero Testimonials',
              body: `This PR adds ${issues.data.length} new hero testimonial(s) to the website.\n\nProcessed issues: ${issues.data.map(i => `#${i.number}`).join(', ')}`,
              head: branchName,
              base: defaultBranch
            });

            console.log(`Created PR #${pr.data.number}`);

      - name: Setup Auto-merge
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Enable auto-merge on the PR
          gh pr merge --auto --squash --delete-branch $(gh pr list --head "testimonials-update-*" --json number --jq '.[0].number')
