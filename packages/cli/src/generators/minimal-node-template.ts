import path from "path";

import fsExtra from "fs-extra";

import type { ProjectConfig } from "../../../shared/stack-config.js";

import { generatePackageJson } from "./base-generator.js";
import { logger } from "../utils/logger.js";

// eslint-disable-next-line import/no-named-as-default-member
const { writeFile, ensureDir } = fsExtra;

/**
 * Generate minimal Node.js project template (fallback for backend=none)
 */
export async function generateMinimalNodeTemplate(
  config: ProjectConfig,
  projectPath: string
): Promise<void> {
  logger.verbose("Creating minimal Node.js project structure...");

  /** Create directory structure for minimal project */
  const directories = ["src", "src/routes", "src/middleware", "src/utils", "tests"];

  for (const dir of directories) {
    await ensureDir(path.join(projectPath, dir));
  }

  /** Generate package.json with minimal dependencies */
  const dependencies: string[] = [];
  const devDependencies: string[] = ["nodemon"];

  if (config.typescript) {
    devDependencies.push("typescript", "@types/node", "ts-node");
  }

  await generatePackageJson(config, projectPath, dependencies, devDependencies, {
    main: config.typescript ? "src/index.ts" : "src/index.js",
    scripts: {
      start: config.typescript ? "node dist/index.js" : "node src/index.js",
      dev: config.typescript ? "nodemon --exec ts-node src/index.ts" : "nodemon src/index.js",
      build: config.typescript ? "tsc" : "echo 'No build step required for JavaScript'",
      test: "echo 'No tests specified'",
    },
  });

  /** Generate main entry point */
  const indexContent = config.typescript
    ? `/**
 * ${config.name} - Backend Application
 * Generated by create-precast-app
 */

/**
 * Main application entry point
 */
function main(): void {
  console.log('Welcome to ${config.name}!');
  console.log('Your minimal Node.js project is ready.');
  console.log('Add your application logic here.');
}

if (require.main === module) {
  main();
}

export default main;
`
    : `/**
 * ${config.name} - Backend Application
 * Generated by create-precast-app
 */

/**
 * Main application entry point
 */
function main() {
  console.log('Welcome to ${config.name}!');
  console.log('Your minimal Node.js project is ready.');
  console.log('Add your application logic here.');
}

if (require.main === module) {
  main();
}

module.exports = main;
`;

  await writeFile(
    path.join(projectPath, "src", config.typescript ? "index.ts" : "index.js"),
    indexContent
  );

  /** Generate README */
  const readmeContent = `# ${config.name}

Minimal Node.js project generated by create-precast-app.

## Getting Started

1. Install dependencies:
   \`\`\`bash
   ${config.packageManager} install
   \`\`\`

2. Start development:
   \`\`\`bash
   ${config.packageManager} run dev
   \`\`\`

3. Build for production${config.typescript ? " (TypeScript only)" : ""}:
   \`\`\`bash
   ${config.packageManager} run build
   \`\`\`

4. Start production:
   \`\`\`bash
   ${config.packageManager} start
   \`\`\`

## Project Structure

\`\`\`
src/
├── index.${config.typescript ? "ts" : "js"}     # Main application entry
├── routes/      # Application routes
├── middleware/  # Custom middleware
└── utils/       # Utility functions
tests/           # Test files
\`\`\`

## Next Steps

This is a minimal Node.js setup. Consider adding:

- A web framework (Express, Fastify, Hono)
- Database integration
- Authentication
- API documentation
- Testing framework
- Environment configuration

You can add these later using:
\`\`\`bash
npx create-precast-app add-features
\`\`\`
`;

  await writeFile(path.join(projectPath, "README.md"), readmeContent);

  if (config.typescript) {
    /** Generate tsconfig.json */
    const tsConfig = {
      compilerOptions: {
        target: "ES2022",
        module: "commonjs",
        outDir: "dist",
        rootDir: "src",
        strict: true,
        esModuleInterop: true,
        skipLibCheck: true,
        forceConsistentCasingInFileNames: true,
        declaration: true,
        declarationMap: true,
        sourceMap: true,
      },
      include: ["src/**/*"],
      exclude: ["node_modules", "dist", "tests"],
    };

    await writeFile(path.join(projectPath, "tsconfig.json"), JSON.stringify(tsConfig, null, 2));
  }

  logger.verbose("Minimal Node.js project structure created!");
}
