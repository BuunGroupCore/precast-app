name: Deploy Website

on:
  push:
    branches:
      - main
    paths:
      - "packages/website/**"
      - "packages/ui/**"
      - ".github/workflows/deploy-website.yml"
  workflow_dispatch:

jobs:
  check-changes:
    name: Check for Website Changes
    runs-on: ubuntu-latest
    outputs:
      website-changed: ${{ steps.filter.outputs.website }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for website changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            website:
              - 'packages/website/**'
              - 'packages/ui/**'

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: check-changes
    if: |
      github.event_name == 'workflow_dispatch' || 
      needs.check-changes.outputs.website-changed == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Packages in Order
        run: |
          echo "Cleaning TypeScript build cache..."
          rm -f packages/*/tsconfig.tsbuildinfo
          echo "Building UI package..."
          pnpm --filter @precast/ui run build
          echo "Contents of UI dist folder:"
          ls -la packages/ui/dist/ || echo "UI dist folder not found"
          echo "Building website..."
          pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Install Wrangler
        run: pnpm add -w -D wrangler@3

      - name: Deploy to Cloudflare Pages
        run: |
          # Check if project exists, create if it doesn't
          if ! pnpm exec wrangler pages project list | grep -q "precast-website"; then
            echo "Creating Cloudflare Pages project..."
            pnpm exec wrangler pages project create precast-website --production-branch=main
          else
            echo "Project already exists, skipping creation..."
          fi

          # Deploy to Cloudflare Pages
          echo "Deploying to Cloudflare Pages..."
          pnpm exec wrangler pages deploy packages/website/dist --project-name=precast-website
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update PostHog with deployment
        run: |
          curl -X POST ${{ secrets.POSTHOG_HOST }}/capture/ \
            -H 'Content-Type: application/json' \
            -d '{
              "api_key": "${{ secrets.POSTHOG_API_KEY }}",
              "event": "website_deployed",
              "properties": {
                "environment": "production",
                "commit": "${{ github.sha }}",
                "deployment_platform": "cloudflare_pages"
              },
              "distinct_id": "github-actions"
            }'
