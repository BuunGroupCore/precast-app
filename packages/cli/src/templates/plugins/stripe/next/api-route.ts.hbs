{{#if typescript}}
/**
 * Stripe Payment API Routes for Next.js
 * @module stripeApi
 * @description Next.js App Router API routes for Stripe payment processing and webhooks
 */

import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2024-06-20',
});

interface CreateIntentRequest {
  amount: number;
  currency?: string;
  metadata?: Record<string, string>;
  customer?: string;
  payment_method_types?: string[];
}

/**
 * Create a payment intent
 * @route POST /api/stripe/create-intent
 * @param {NextRequest} request - Request with payment data
 * @returns {NextResponse} Payment intent with client secret
 */
export async function POST(request: NextRequest) {
  try {
    const body: CreateIntentRequest = await request.json();
    const { amount, currency = 'usd', metadata, customer, payment_method_types } = body;

    if (!amount || amount < 50) {
      return NextResponse.json(
        { error: 'Amount must be at least 50 cents' },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount),
      currency: currency.toLowerCase(),
      metadata: {
        ...metadata,
        created_at: new Date().toISOString(),
      },
      customer,
      payment_method_types: payment_method_types || ['card'],
      automatic_payment_methods: {
        enabled: true,
      },
    });

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
    });

  } catch (error) {
    console.error('Error creating payment intent:', error);
    
    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json(
        { error: error.message, type: error.type },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * Retrieve a payment intent by ID
 * @route GET /api/stripe/payment-intent/[id]
 * @param {NextRequest} request - Request object
 * @param {object} params - Route parameters with payment intent ID
 * @returns {NextResponse} Payment intent details
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const paymentIntentId = params.id;

    if (!paymentIntentId) {
      return NextResponse.json(
        { error: 'Payment intent ID is required' },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);

    return NextResponse.json({
      id: paymentIntent.id,
      status: paymentIntent.status,
      amount: paymentIntent.amount,
      currency: paymentIntent.currency,
      metadata: paymentIntent.metadata,
      created: paymentIntent.created,
    });

  } catch (error) {
    console.error('Error retrieving payment intent:', error);
    
    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json(
        { error: error.message, type: error.type },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * Handle Stripe webhook events
 * @param {NextRequest} request - Webhook request from Stripe
 * @returns {NextResponse} Webhook processing result
 */
export async function handleWebhook(request: NextRequest) {
  const body = await request.text();
  const signature = request.headers.get('stripe-signature');

  if (!signature) {
    return NextResponse.json(
      { error: 'Missing stripe-signature header' },
      { status: 400 }
    );
  }

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET || ''
    );
  } catch (error) {
    console.error('Webhook signature verification failed:', error);
    return NextResponse.json(
      { error: 'Invalid signature' },
      { status: 400 }
    );
  }

  try {
    switch (event.type) {
      case 'payment_intent.succeeded': {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;
        console.log('Payment succeeded:', paymentIntent.id);
        await handleSuccessfulPayment(paymentIntent);
        break;
      }

      case 'payment_intent.payment_failed': {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;
        console.log('Payment failed:', paymentIntent.id);
        await handleFailedPayment(paymentIntent);
        break;
      }

      case 'customer.subscription.created': {
        const subscription = event.data.object as Stripe.Subscription;
        console.log('Subscription created:', subscription.id);
        await handleNewSubscription(subscription);
        break;
      }

      case 'customer.subscription.updated': {
        const subscription = event.data.object as Stripe.Subscription;
        console.log('Subscription updated:', subscription.id);
        await handleSubscriptionUpdate(subscription);
        break;
      }

      case 'customer.subscription.deleted': {
        const subscription = event.data.object as Stripe.Subscription;
        console.log('Subscription cancelled:', subscription.id);
        await handleSubscriptionCancellation(subscription);
        break;
      }

      case 'invoice.payment_succeeded': {
        const invoice = event.data.object as Stripe.Invoice;
        console.log('Invoice payment succeeded:', invoice.id);
        await handleInvoicePaymentSucceeded(invoice);
        break;
      }

      case 'invoice.payment_failed': {
        const invoice = event.data.object as Stripe.Invoice;
        console.log('Invoice payment failed:', invoice.id);
        await handleInvoicePaymentFailed(invoice);
        break;
      }

      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error) {
    console.error('Error handling webhook:', error);
    return NextResponse.json(
      { error: 'Webhook handler failed' },
      { status: 500 }
    );
  }
}

/**
 * Handle successful payment events
 * @param {Stripe.PaymentIntent} paymentIntent - Successful payment intent
 */
async function handleSuccessfulPayment(paymentIntent: Stripe.PaymentIntent) {
  console.log('Processing successful payment:', {
    id: paymentIntent.id,
    amount: paymentIntent.amount,
    currency: paymentIntent.currency,
    customer: paymentIntent.customer,
    metadata: paymentIntent.metadata,
  });
}

/**
 * Handle failed payment events
 * @param {Stripe.PaymentIntent} paymentIntent - Failed payment intent
 */
async function handleFailedPayment(paymentIntent: Stripe.PaymentIntent) {
  console.log('Processing failed payment:', {
    id: paymentIntent.id,
    last_payment_error: paymentIntent.last_payment_error,
  });
}

/**
 * Handle new subscription events
 * @param {Stripe.Subscription} subscription - New subscription
 */
async function handleNewSubscription(subscription: Stripe.Subscription) {
  console.log('Processing new subscription:', {
    id: subscription.id,
    customer: subscription.customer,
    status: subscription.status,
  });
}

/**
 * Handle subscription update events
 * @param {Stripe.Subscription} subscription - Updated subscription
 */
async function handleSubscriptionUpdate(subscription: Stripe.Subscription) {
  console.log('Processing subscription update:', {
    id: subscription.id,
    status: subscription.status,
  });
}

/**
 * Handle subscription cancellation events
 * @param {Stripe.Subscription} subscription - Cancelled subscription
 */
async function handleSubscriptionCancellation(subscription: Stripe.Subscription) {
  console.log('Processing subscription cancellation:', {
    id: subscription.id,
    canceled_at: subscription.canceled_at,
  });
}

/**
 * Handle successful invoice payment events
 * @param {Stripe.Invoice} invoice - Paid invoice
 */
async function handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {
  console.log('Processing successful invoice payment:', {
    id: invoice.id,
    subscription: invoice.subscription,
    amount_paid: invoice.amount_paid,
  });
}

/**
 * Handle failed invoice payment events
 * @param {Stripe.Invoice} invoice - Failed invoice
 */
async function handleInvoicePaymentFailed(invoice: Stripe.Invoice) {
  console.log('Processing failed invoice payment:', {
    id: invoice.id,
    attempt_count: invoice.attempt_count,
  });
}
{{else}}
/**
 * Stripe Payment API Routes for Next.js (JavaScript)
 * @module stripeApi
 * @description Next.js App Router API routes for Stripe payment processing and webhooks
 */

import { NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2024-06-20',
});

/**
 * Create a payment intent
 * @route POST /api/stripe/create-intent
 */
export async function POST(request) {
  try {
    const body = await request.json();
    const { amount, currency = 'usd', metadata, customer, payment_method_types } = body;

    if (!amount || amount < 50) {
      return NextResponse.json(
        { error: 'Amount must be at least 50 cents' },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount),
      currency: currency.toLowerCase(),
      metadata: {
        ...metadata,
        created_at: new Date().toISOString(),
      },
      customer,
      payment_method_types: payment_method_types || ['card'],
      automatic_payment_methods: {
        enabled: true,
      },
    });

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
    });

  } catch (error) {
    console.error('Error creating payment intent:', error);
    
    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json(
        { error: error.message, type: error.type },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * Retrieve a payment intent by ID
 * @route GET /api/stripe/payment-intent/[id]
 */
export async function GET(request, { params }) {
  try {
    const paymentIntentId = params.id;

    if (!paymentIntentId) {
      return NextResponse.json(
        { error: 'Payment intent ID is required' },
        { status: 400 }
      );
    }

    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);

    return NextResponse.json({
      id: paymentIntent.id,
      status: paymentIntent.status,
      amount: paymentIntent.amount,
      currency: paymentIntent.currency,
      metadata: paymentIntent.metadata,
      created: paymentIntent.created,
    });

  } catch (error) {
    console.error('Error retrieving payment intent:', error);
    
    if (error instanceof Stripe.errors.StripeError) {
      return NextResponse.json(
        { error: error.message, type: error.type },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * Handle Stripe webhook events
 */
export async function handleWebhook(request) {
  const body = await request.text();
  const signature = request.headers.get('stripe-signature');

  if (!signature) {
    return NextResponse.json(
      { error: 'Missing stripe-signature header' },
      { status: 400 }
    );
  }

  let event;

  try {
    event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET || ''
    );
  } catch (error) {
    console.error('Webhook signature verification failed:', error);
    return NextResponse.json(
      { error: 'Invalid signature' },
      { status: 400 }
    );
  }

  try {
    switch (event.type) {
      case 'payment_intent.succeeded': {
        const paymentIntent = event.data.object;
        console.log('Payment succeeded:', paymentIntent.id);
        await handleSuccessfulPayment(paymentIntent);
        break;
      }

      case 'payment_intent.payment_failed': {
        const paymentIntent = event.data.object;
        console.log('Payment failed:', paymentIntent.id);
        await handleFailedPayment(paymentIntent);
        break;
      }

      case 'customer.subscription.created': {
        const subscription = event.data.object;
        console.log('Subscription created:', subscription.id);
        await handleNewSubscription(subscription);
        break;
      }

      case 'customer.subscription.updated': {
        const subscription = event.data.object;
        console.log('Subscription updated:', subscription.id);
        await handleSubscriptionUpdate(subscription);
        break;
      }

      case 'customer.subscription.deleted': {
        const subscription = event.data.object;
        console.log('Subscription cancelled:', subscription.id);
        await handleSubscriptionCancellation(subscription);
        break;
      }

      case 'invoice.payment_succeeded': {
        const invoice = event.data.object;
        console.log('Invoice payment succeeded:', invoice.id);
        await handleInvoicePaymentSucceeded(invoice);
        break;
      }

      case 'invoice.payment_failed': {
        const invoice = event.data.object;
        console.log('Invoice payment failed:', invoice.id);
        await handleInvoicePaymentFailed(invoice);
        break;
      }

      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error) {
    console.error('Error handling webhook:', error);
    return NextResponse.json(
      { error: 'Webhook handler failed' },
      { status: 500 }
    );
  }
}

/**
 * Handle successful payment events
 */
async function handleSuccessfulPayment(paymentIntent) {
  console.log('Processing successful payment:', {
    id: paymentIntent.id,
    amount: paymentIntent.amount,
    currency: paymentIntent.currency,
    customer: paymentIntent.customer,
    metadata: paymentIntent.metadata,
  });
}

/**
 * Handle failed payment events
 */
async function handleFailedPayment(paymentIntent) {
  console.log('Processing failed payment:', {
    id: paymentIntent.id,
    last_payment_error: paymentIntent.last_payment_error,
  });
}

/**
 * Handle new subscription events
 */
async function handleNewSubscription(subscription) {
  console.log('Processing new subscription:', {
    id: subscription.id,
    customer: subscription.customer,
    status: subscription.status,
  });
}

/**
 * Handle subscription update events
 */
async function handleSubscriptionUpdate(subscription) {
  console.log('Processing subscription update:', {
    id: subscription.id,
    status: subscription.status,
  });
}

/**
 * Handle subscription cancellation events
 */
async function handleSubscriptionCancellation(subscription) {
  console.log('Processing subscription cancellation:', {
    id: subscription.id,
    canceled_at: subscription.canceled_at,
  });
}

/**
 * Handle successful invoice payment events
 */
async function handleInvoicePaymentSucceeded(invoice) {
  console.log('Processing successful invoice payment:', {
    id: invoice.id,
    subscription: invoice.subscription,
    amount_paid: invoice.amount_paid,
  });
}

/**
 * Handle failed invoice payment events
 */
async function handleInvoicePaymentFailed(invoice) {
  console.log('Processing failed invoice payment:', {
    id: invoice.id,
    attempt_count: invoice.attempt_count,
  });
}
{{/if}}