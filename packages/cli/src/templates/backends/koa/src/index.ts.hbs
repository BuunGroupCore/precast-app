import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';
import cors from 'koa-cors';
import helmet from 'koa-helmet';
import dotenv from 'dotenv';

dotenv.config();

const app = new Koa();
const router = new Router();

const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors());
app.use(bodyParser());

// Error handling middleware
app.use(async (ctx, next) => {
  try {
    await next();
  } catch (err: any) {
    ctx.status = err.status || 500;
    ctx.body = {
      error: 'Internal server error',
      message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
    };
    console.error('Error:', err);
  }
});

// Routes
router.get('/api/health', async (ctx) => {
  ctx.body = {
    status: 'ok',
    message: '{{config.name}} API is running',
    timestamp: new Date().toISOString()
  };
});

router.get('/api/hello', async (ctx) => {
  ctx.body = {
    message: 'Hello from {{config.name}} API!',
    version: '1.0.0'
  };
});

// 404 handler
app.use(async (ctx, next) => {
  await next();
  if (ctx.status === 404) {
    ctx.status = 404;
    ctx.body = {
      error: 'Route not found',
      path: ctx.path
    };
  }
});

// Apply routes
app.use(router.routes());
app.use(router.allowedMethods());

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“‹ Health check: http://localhost:${PORT}/api/health`);
});