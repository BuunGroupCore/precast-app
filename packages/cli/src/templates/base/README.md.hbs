# {{name}}

Built with [Create Precast App](https://github.com/precast/create-precast-app)

## 🚀 Tech Stack

- **Framework**: {{capitalize framework}}
{{#if (not (eq backend "none"))}}
- **Backend**: {{capitalize backend}}
{{/if}}
{{#if (not (eq database "none"))}}
- **Database**: {{capitalize database}}
{{/if}}
{{#if (not (eq orm "none"))}}
- **ORM**: {{capitalize orm}}
{{/if}}
- **Styling**: {{capitalize styling}}
- **Language**: {{#if typescript}}TypeScript{{else}}JavaScript{{/if}}
{{#if docker}}
- **Containerization**: Docker
{{/if}}

## 📋 Prerequisites

- Node.js 20 or higher
- npm, yarn, pnpm, or bun
{{#if docker}}
- Docker and Docker Compose
{{/if}}
{{#if (eq database "postgres")}}
- PostgreSQL 14+ (or use Docker)
{{/if}}
{{#if (eq database "mysql")}}
- MySQL 8+ (or use Docker)
{{/if}}
{{#if (eq database "mongodb")}}
- MongoDB 5+ (or use Docker)
{{/if}}

## 🛠️ Installation

1. Clone the repository:
   ```bash
   git clone <your-repo-url>
   cd {{name}}
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Set up environment variables:
   ```bash
   cp .env.example .env
   ```
   Edit `.env` with your configuration.

{{#if (not (eq database "none"))}}
4. Set up the database:
   {{#if docker}}
   ```bash
   # Start database with Docker
   npm run docker:up
   # Or directly:
   docker compose -f docker/{{database}}/docker-compose.yml up -d
   ```
   {{else}}
   Make sure your {{database}} server is running.
   {{/if}}

   {{#if (eq orm "prisma")}}
   ```bash
   # Run migrations
   npm run db:migrate
   
   # Generate Prisma client
   npm run db:generate
   ```
   {{/if}}
   {{#if (eq orm "drizzle")}}
   ```bash
   # Run migrations
   npm run db:migrate
   ```
   {{/if}}
{{/if}}

## 🚀 Development

Start the development server:

```bash
npm run dev
```

{{#if (not (eq backend "none"))}}
The application will be available at:
- Frontend: http://localhost:3000
- Backend: http://localhost:3001
{{else}}
The application will be available at http://localhost:3000
{{/if}}

## 📦 Building

Build for production:

```bash
npm run build
```

Run production build:

```bash
npm start
```

{{#if docker}}
## 🐳 Docker

{{#if (not (eq database "none"))}}
### Database Services

Start database services:

```bash
npm run docker:up
# Or directly:
docker compose -f docker/{{database}}/docker-compose.yml up -d
```

Stop database services:

```bash
npm run docker:down
# Or directly:
docker compose -f docker/{{database}}/docker-compose.yml down
```

View logs:

```bash
npm run docker:logs
```

Reset database (removes all data):

```bash
npm run docker:reset
```

**Note**: Database credentials are stored in `docker/{{database}}/.env`. Change these before deploying to production!
{{/if}}
{{/if}}

## 📚 Available Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
{{#if docker}}
{{#if (not (eq database "none"))}}
- `npm run docker:up` - Start Docker services
- `npm run docker:down` - Stop Docker services  
- `npm run docker:logs` - View Docker logs
- `npm run docker:reset` - Reset database (removes all data)
{{/if}}
{{/if}}
{{#if typescript}}
- `npm run type-check` - Run TypeScript type checking
{{/if}}
{{#if (eq orm "prisma")}}
- `npm run db:generate` - Generate Prisma client
- `npm run db:migrate` - Run database migrations
- `npm run db:studio` - Open Prisma Studio
{{/if}}
{{#if (eq orm "drizzle")}}
- `npm run db:generate` - Generate SQL migrations
- `npm run db:migrate` - Run database migrations
- `npm run db:studio` - Open Drizzle Studio
{{/if}}

## 📁 Project Structure

```
{{name}}/
├── src/              # Source code
{{#if (not (eq backend "none"))}}
├── server/           # Backend code
{{/if}}
├── public/           # Static assets
├── package.json      # Dependencies
{{#if typescript}}
├── tsconfig.json     # TypeScript config
{{/if}}
{{#if (eq styling "tailwind")}}
├── tailwind.config.js # Tailwind config
{{/if}}
{{#if docker}}
├── docker/           # Docker configuration
{{#if (not (eq database "none"))}}
│   └── {{database}}/  # {{capitalize database}} specific config
│       ├── docker-compose.yml
│       └── .env      # Database credentials
{{/if}}
{{/if}}
└── .env.example      # Environment variables template
```

## 🤝 Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License.