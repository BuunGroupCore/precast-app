import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';
import cors from 'koa-cors';
import helmet from 'koa-helmet';
import dotenv from 'dotenv';

dotenv.config();

const app = new Koa();
const router = new Router();

const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors({
  origin: (ctx) => {
    const origin = ctx.request.headers.origin;
    // Allow requests with no origin (like mobile apps or curl)
    if (!origin) return true;
    
    // Development origins based on framework
    const allowedOrigins = [
      process.env.CLIENT_URL,
      'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
      'http://localhost:3000',
      'http://localhost:4200',
      'http://localhost:5173',
      'http://localhost:7000',{{#if (eq framework "tanstack-start")}}
      // TanStack Start can use different ports{{/if}}
      {{#if (includes powerups "ngrok")}}
      // Allow ngrok domains
      ...(['ngrok-free.app', 'ngrok.app', 'ngrok.io'].some(domain => origin.includes(domain)) ? [origin] : []),
      {{/if}}
      {{#if (includes powerups "cloudflare-tunnel")}}
      // Allow Cloudflare tunnel domains
      ...(origin.includes('trycloudflare.com') ? [origin] : []),
      {{/if}}
    ].filter(Boolean);
    
    return allowedOrigins.includes(origin);
  },
  credentials: true,
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'{{#if (includes powerups "ngrok")}}, 'ngrok-skip-browser-warning'{{/if}}],
}));
app.use(bodyParser());

// Error handling middleware
app.use(async (ctx, next) => {
  try {
    await next();
  } catch (err: any) {
    ctx.status = err.status || 500;
    ctx.body = {
      error: 'Internal server error',
      message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
    };
    console.error('Error:', err);
  }
});

// Routes
router.get('/api/health', async (ctx) => {
  ctx.body = {
    status: 'ok',
    message: '{{config.name}} API is running',
    timestamp: new Date().toISOString()
  };
});

router.get('/api/hello', async (ctx) => {
  ctx.body = {
    message: 'Hello from {{config.name}} API!',
    version: '1.0.0'
  };
});

// 404 handler
app.use(async (ctx, next) => {
  await next();
  if (ctx.status === 404) {
    ctx.status = 404;
    ctx.body = {
      error: 'Route not found',
      path: ctx.path
    };
  }
});

// Apply routes
app.use(router.routes());
app.use(router.allowedMethods());

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“‹ Health check: http://localhost:${PORT}/api/health`);
});