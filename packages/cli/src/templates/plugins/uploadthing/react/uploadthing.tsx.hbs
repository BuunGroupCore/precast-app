/**
 * UploadThing Integration
 * @module uploadthing
 * @description File upload components and utilities using UploadThing
 */

import {
  generateUploadButton,
  generateUploadDropzone,
} from "@uploadthing/react";
import type { FileRouter } from "../server/uploadthing.server";

export const UploadButton = generateUploadButton<FileRouter>();
export const UploadDropzone = generateUploadDropzone<FileRouter>();

/**
 * Example file upload component demonstrating UploadThing usage
 * @returns {JSX.Element} File upload example component
 */
export function FileUploadExample() {
  return (
    <div className="flex flex-col gap-4">
      <UploadButton
        endpoint="imageUploader"
        onClientUploadComplete={(res) => {
          console.log("Files uploaded successfully:", res);
          alert("Upload Completed");
        }}
        onUploadError={(error: Error) => {
          console.error("Upload error:", error);
          alert(`Upload failed: ${error.message}`);
        }}
        onUploadBegin={(name) => {
          console.log("Upload started for:", name);
        }}
      />
      
      <UploadDropzone
        endpoint="imageUploader"
        onClientUploadComplete={(res) => {
          console.log("Files uploaded successfully:", res);
          alert("Upload Completed");
        }}
        onUploadError={(error: Error) => {
          console.error("Upload error:", error);
          alert(`Upload failed: ${error.message}`);
        }}
        onDrop={(acceptedFiles) => {
          console.log("Files dropped:", acceptedFiles);
        }}
      />
    </div>
  );
}

/**
 * Custom hook for file upload functionality
 * @param {keyof FileRouter} endpoint - Upload endpoint to use
 * @param {object} opts - Upload options and callbacks
 * @returns {object} Upload utilities
 */
export function useUploadThing(
  endpoint: keyof FileRouter,
  opts?: {
    onClientUploadComplete?: (res: any) => void;
    onUploadError?: (error: Error) => void;
    onUploadProgress?: (progress: number) => void;
  }
) {
  const startUpload = async (files: File[]) => {
    try {
      const formData = new FormData();
      files.forEach((file) => formData.append('files', file));
      
      const response = await fetch(`/api/uploadthing/${endpoint}`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`Upload failed: ${response.statusText}`);
      }
      
      const result = await response.json();
      opts?.onClientUploadComplete?.(result);
      return result;
    } catch (error) {
      const uploadError = error instanceof Error ? error : new Error('Upload failed');
      opts?.onUploadError?.(uploadError);
      throw uploadError;
    }
  };
  
  return { startUpload, isUploading: false };
}