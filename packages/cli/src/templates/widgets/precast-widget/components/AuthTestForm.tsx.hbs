/**
 * AuthTestForm Component
 * Extracted from PrecastWidget - authentication testing UI
 */

import React from 'react';
import { AuthMode } from '../types';
import { TestButton } from './TestButton';
{{#if authProvider}}
import { getCurrentSession } from '../services/authService';
{{#if (or (eq authProvider 'better-auth') (eq authProvider 'auth.js'))}}
import { useAuth, triggerSessionRefresh } from '@/components/auth/AuthProvider';
{{/if}}
{{/if}}

interface AuthTestFormProps {
  authMode: AuthMode;
  authEmail: string;
  authPassword: string;
  authName: string;
  isLoading: boolean;
  onModeChange: (mode: AuthMode) => void;
  onEmailChange: (email: string) => void;
  onPasswordChange: (password: string) => void;
  onNameChange: (name: string) => void;
  onTest: () => void;
  onStatusTest: () => void;
  isStatusLoading: boolean;
  {{#if authProvider}}
  isLoggedIn?: boolean;
  {{/if}}
}

{{#if authProvider}}
/**
 * Authentication Testing Form Component
 * Exact copy from original PrecastWidget (lines 1237-1321)
 */
export function AuthTestForm({
  authMode,
  authEmail,
  authPassword,
  authName,
  isLoading,
  onModeChange,
  onEmailChange,
  onPasswordChange,
  onNameChange,
  onTest,
  onStatusTest,
  isStatusLoading,
  {{#if authProvider}}
  isLoggedIn,
  {{/if}}
}: AuthTestFormProps) {
  {{#if authProvider}}
  {{#if (or (eq authProvider 'better-auth') (eq authProvider 'auth.js'))}}
  const { user, session, isAuthenticated } = useAuth();
  {{/if}}
  const currentSession = getCurrentSession();
  
  // Use AuthProvider state as primary, fallback to widget state
  {{#if (or (eq authProvider 'better-auth') (eq authProvider 'auth.js'))}}
  const userLoggedIn = isAuthenticated || (isLoggedIn ?? !!(currentSession?.session || currentSession?.user || currentSession?.token));
  const displayUser = user || currentSession?.user || currentSession?.session?.user;
  {{else}}
  const userLoggedIn = isLoggedIn ?? !!(currentSession?.session || currentSession?.user || currentSession?.token);
  const displayUser = currentSession?.user || currentSession?.session?.user;
  {{/if}}
  
  // If user is logged in, show user info and logout button
  if (userLoggedIn) {
    return (
      <div className="{{#if (eq styling 'tailwind')}}space-y-3{{else}}auth-test-container{{/if}}">
        {/* User Info Display */}
        <div className="{{#if (eq styling 'tailwind')}}p-3 border-2 border-black bg-green-100{{else}}user-info-display{{/if}}">
          <div className="{{#if (eq styling 'tailwind')}}flex items-center justify-between mb-2{{else}}user-info-header{{/if}}">
            <span className="{{#if (eq styling 'tailwind')}}font-bold text-xs uppercase tracking-wider{{else}}status-label{{/if}}">LOGGED IN</span>
            <span className="{{#if (eq styling 'tailwind')}}px-2 py-1 bg-green-500 text-white text-xs font-bold border border-black{{else}}status-badge{{/if}}">
              AUTHENTICATED
            </span>
          </div>
          {displayUser && (
            <div className="{{#if (eq styling 'tailwind')}}space-y-1 text-sm font-mono{{else}}user-details{{/if}}">
              {displayUser.email && <div><strong>Email:</strong> {displayUser.email}</div>}
              {displayUser.name && <div><strong>Name:</strong> {displayUser.name}</div>}
              {displayUser.id && <div><strong>ID:</strong> {displayUser.id}</div>}
            </div>
          )}
        </div>

        {/* Dashboard Button */}
        <TestButton
          onClick={() => window.open('/dashboard', '_blank')}
          isLoading={false}
          variant="primary"
        >
          VIEW DASHBOARD
        </TestButton>

        {/* Logout Button */}
        <TestButton
          onClick={onTest}
          isLoading={isLoading}
          variant="secondary"
        >
          LOGOUT
        </TestButton>

        {/* Auth status test button */}
        <TestButton
          onClick={onStatusTest}
          isLoading={isStatusLoading}
          variant="secondary"
          className="{{#if (eq styling 'tailwind')}}mt-2{{else}}status-btn{{/if}}"
        >
          CHECK STATUS ENDPOINT
        </TestButton>
      </div>
    );
  }

  // If user is not logged in, show login/signup form
  {{/if}}
  return (
    <div className="{{#if (eq styling 'tailwind')}}space-y-3{{else}}auth-test-container{{/if}}">
      {/* Mode selector */}
      <div className="{{#if (eq styling 'tailwind')}}flex gap-2{{else}}auth-mode-selector{{/if}}">
        <button
          onClick={() => onModeChange('signup')}
          className={`{{#if (eq styling 'tailwind')}}flex-1 px-3 py-2 border-2 border-black font-bold uppercase text-xs tracking-wider transition-all duration-150 ${authMode === 'signup' ? 'bg-yellow-400 text-black' : 'bg-white text-black hover:bg-gray-100'}{{else}}auth-mode-btn{{/if}}`}
          {{#unless (eq styling 'tailwind')}}data-active={authMode === 'signup'}{{/unless}}
        >
          SIGN UP
        </button>
        <button
          onClick={() => onModeChange('signin')}
          className={`{{#if (eq styling 'tailwind')}}flex-1 px-3 py-2 border-2 border-black font-bold uppercase text-xs tracking-wider transition-all duration-150 ${authMode === 'signin' ? 'bg-yellow-400 text-black' : 'bg-white text-black hover:bg-gray-100'}{{else}}auth-mode-btn{{/if}}`}
          {{#unless (eq styling 'tailwind')}}data-active={authMode === 'signin'}{{/unless}}
        >
          SIGN IN
        </button>
      </div>

      {/* Input fields */}
      <div className="{{#if (eq styling 'tailwind')}}space-y-2{{else}}auth-inputs{{/if}}">
        <input
          type="email"
          value={authEmail}
          onChange={(e) => onEmailChange(e.target.value)}
          placeholder="Email"
          className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
        />
        <input
          type="password"
          value={authPassword}
          onChange={(e) => onPasswordChange(e.target.value)}
          placeholder="Password"
          className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
        />
        {authMode === 'signup' && (
          <input
            type="text"
            value={authName}
            onChange={(e) => onNameChange(e.target.value)}
            placeholder="Name"
            className="{{#if (eq styling 'tailwind')}}w-full px-3 py-2 border-2 border-black text-sm font-mono{{else}}input-field{{/if}}"
          />
        )}
      </div>

      {/* Test button */}
      <TestButton
        onClick={onTest}
        isLoading={isLoading}
        variant="primary"
      >
        {`TEST ${authMode === 'signup' ? 'SIGN UP' : 'SIGN IN'}`}
      </TestButton>

      {/* Auth status test button */}
      <TestButton
        onClick={onStatusTest}
        isLoading={isStatusLoading}
        variant="secondary"
        className="{{#if (eq styling 'tailwind')}}mt-2{{/if}}"
      >
        CHECK STATUS ENDPOINT
      </TestButton>
    </div>
  );
}
{{else}}
// Auth not configured - return empty component
export function AuthTestForm() {
  return null;
}
{{/if}}