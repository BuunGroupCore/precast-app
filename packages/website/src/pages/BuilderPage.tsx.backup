import React, { useState, useEffect } from "react";
import { db, type SavedProject } from "../lib/db";
import { motion } from "framer-motion";
import { BuilderPageSEO } from "../components/SEO";
import { ComicDialog } from "../components/ComicDialog";
import { ServiceTooltip } from "../components/ServiceTooltip";
import {
  FaCopy,
  FaCheck,
  FaRocket,
  FaDice,
  FaHistory,
  FaMagic,
  FaLightbulb,
  FaBolt,
  FaDocker,
  FaDatabase,
  FaGitAlt,
  FaNpm,
  FaYarn,
  FaRobot,
  FaBrain,
  FaPaintBrush,
} from "react-icons/fa";
import { SiTypescript, SiBun, SiPnpm, SiDaisyui, SiShadcnui, SiChakraui, SiMui, SiAntdesign, SiMantine } from "react-icons/si";
import { BiPackage } from "react-icons/bi";
import { BsRobot } from "react-icons/bs";
import {
  frameworks,
  backends,
  databases,
  orms,
  stylings,
  validateConfiguration,
} from "../lib/stack-config";

// Icon component for loading SVGs from public folder
const PublicIcon = ({ name, className = "" }: { name: string; className?: string }) => {
  return (
    <img 
      src={`/icons/${name}.svg`} 
      alt={name} 
      className={`w-6 h-6 ${className}`}
    />
  );
};

// Extended config type to include AI and UI libraries
interface ExtendedProjectConfig extends Omit<SavedProject, 'id' | 'createdAt' | 'updatedAt'> {
  aiAssistant?: string;
  uiLibrary?: string;
  autoInstall?: boolean;
  packageManager?: string;
  deploymentMethod?: string;
}

// AI Assistant options
interface AIAssistant {
  id: string;
  name: string;
  icon: React.ComponentType<{ className?: string }> | string | null;
  color: string;
  description: string;
  files?: string[];
}

const aiAssistants: AIAssistant[] = [
  {
    id: "none",
    name: "None",
    icon: null,
    color: "text-gray-500",
    description: "No AI assistance",
  },
  {
    id: "claude",
    name: "Claude Code",
    icon: "claude-color",
    color: "text-purple-600",
    description: "Claude project settings (.claude folder)",
    files: [".claude/project.json", ".claude/instructions.md"],
  },
  {
    id: "copilot",
    name: "GitHub Copilot",
    icon: "githubcopilot",
    color: "text-gray-800",
    description: "Copilot instructions (.github/copilot-instructions.md)",
    files: [".github/copilot-instructions.md"],
  },
  {
    id: "cursor",
    name: "Cursor",
    icon: "cursor",
    color: "text-blue-600",
    description: "Cursor AI configuration (.cursorrules)",
    files: [".cursorrules"],
  },
  {
    id: "gemini",
    name: "Gemini CLI",
    icon: "gemini-color",
    color: "text-blue-500",
    description: "Gemini project instructions (gemini.md)",
    files: ["gemini.md"],
  },
];

// UI Component Libraries with framework dependencies
interface UILibrary {
  id: string;
  name: string;
  icon: React.ComponentType<{ className?: string }> | string | null;
  color: string;
  description: string;
  frameworks: string[];
  requires?: string[];
}

// Package manager options
const packageManagers = [
  {
    id: "npm",
    name: "npm",
    icon: FaNpm,
    color: "text-red-600",
    description: "Node Package Manager",
  },
  {
    id: "pnpm",
    name: "pnpm",
    icon: SiPnpm,
    color: "text-orange-500",
    description: "Fast, disk space efficient package manager",
  },
  {
    id: "bun",
    name: "Bun",
    icon: SiBun,
    color: "text-gray-800",
    description: "All-in-one JavaScript runtime & toolkit",
  },
];

// Deployment method options
const deploymentMethods = [
  {
    id: "none",
    name: "None",
    icon: null,
    color: "text-gray-500",
    description: "No deployment configuration",
  },
  {
    id: "cloudflare-pages",
    name: "Cloudflare Pages",
    icon: "cloudflare-color",
    color: "text-orange-500",
    description: "Fast, secure sites on Cloudflare's edge network",
  },
  {
    id: "azure-static",
    name: "Azure Static Web Apps",
    icon: "microsoft-color",
    color: "text-blue-600",
    description: "Full-stack web apps with serverless APIs",
  },
  {
    id: "vercel",
    name: "Vercel",
    icon: "vercel",
    color: "text-black",
    description: "The platform for frontend developers",
  },
  {
    id: "netlify",
    name: "Netlify",
    icon: "netlify",
    color: "text-teal-500",
    description: "Build and deploy modern web projects",
  },
  {
    id: "github-pages",
    name: "GitHub Pages",
    icon: FaGithub,
    color: "text-gray-800",
    description: "Host directly from your GitHub repository",
  },
];

const uiLibraries: UILibrary[] = [
  {
    id: "none",
    name: "None",
    icon: null,
    color: "text-gray-500",
    description: "No UI library",
    frameworks: ["*"], // Available for all
  },
  {
    id: "daisyui",
    name: "DaisyUI",
    icon: SiDaisyui,
    color: "text-pink-500",
    description: "Tailwind CSS component library",
    frameworks: ["*"], // Available for all frameworks
    requires: ["tailwind"], // Requires Tailwind CSS
  },
  {
    id: "shadcn",
    name: "shadcn/ui",
    icon: SiShadcnui,
    color: "text-gray-800",
    description: "Copy-paste React components",
    frameworks: ["react", "next", "remix", "vite"],
    requires: ["tailwind"],
  },
  {
    id: "mui",
    name: "Material UI",
    icon: SiMui,
    color: "text-blue-500",
    description: "React component library",
    frameworks: ["react", "next", "remix", "vite"],
  },
  {
    id: "chakra",
    name: "Chakra UI",
    icon: SiChakraui,
    color: "text-teal-500",
    description: "Modular React component library",
    frameworks: ["react", "next", "remix", "vite"],
  },
  {
    id: "ant",
    name: "Ant Design",
    icon: SiAntdesign,
    color: "text-blue-600",
    description: "Enterprise React UI library",
    frameworks: ["react", "next", "remix", "vite"],
  },
  {
    id: "mantine",
    name: "Mantine",
    icon: SiMantine,
    color: "text-blue-400",
    description: "Full-featured React components",
    frameworks: ["react", "next", "remix", "vite"],
  },
  {
    id: "brutalist",
    name: "Brutalist UI",
    icon: FaPaintBrush,
    color: "text-yellow-600",
    description: "Bold, stark design components",
    frameworks: ["*"], // Available for all
    requires: ["tailwind"], // Best with Tailwind
  },
];

export function BuilderPage() {
  const [config, setConfig] = useState<ExtendedProjectConfig>({
    name: "my-awesome-project",
    framework: "react",
    backend: "node",
    database: "postgres",
    orm: "prisma",
    styling: "tailwind",
    typescript: true,
    git: true,
    docker: false,
    aiAssistant: "none",
    uiLibrary: "none",
    autoInstall: true,
    packageManager: "pnpm",
    deploymentMethod: "none",
  });

  const [copied, setCopied] = useState(false);
  const [savedProjects, setSavedProjects] = useState<any[]>([]);
  const [showSaved, setShowSaved] = useState(false);
  const [showTooltip, setShowTooltip] = useState("");
  const [packageManager, setPackageManager] = useState<"npx" | "npm" | "yarn" | "pnpm" | "bun">("npx");
  const [dialog, setDialog] = useState<{
    isOpen: boolean;
    title: string;
    message: string;
    type: "success" | "error" | "info";
  }>({
    isOpen: false,
    title: "",
    message: "",
    type: "info",
  });

  // Cool project name generator
  const heroAdjectives = [
    "super",
    "mighty",
    "epic",
    "ultra",
    "mega",
    "turbo",
    "hyper",
    "quantum",
    "cosmic",
    "atomic",
  ];
  const heroNouns = [
    "hero",
    "builder",
    "creator",
    "forge",
    "craft",
    "labs",
    "studio",
    "workshop",
    "factory",
    "engine",
  ];
  const techWords = [
    "next",
    "react",
    "node",
    "web",
    "app",
    "stack",
    "dev",
    "code",
    "tech",
    "digital",
  ];

  const generateRandomName = () => {
    const templates = [
      () =>
        `${heroAdjectives[Math.floor(Math.random() * heroAdjectives.length)]}-${heroNouns[Math.floor(Math.random() * heroNouns.length)]}-${Math.floor(Math.random() * 999)}`,
      () =>
        `${techWords[Math.floor(Math.random() * techWords.length)]}-${heroNouns[Math.floor(Math.random() * heroNouns.length)]}`,
      () =>
        `project-${heroAdjectives[Math.floor(Math.random() * heroAdjectives.length)]}-${Math.floor(Math.random() * 9999)}`,
    ];

    const template = templates[Math.floor(Math.random() * templates.length)];
    setConfig({ ...config, name: template() });
  };

  // Load saved projects on mount
  useEffect(() => {
    const loadSavedProjects = async () => {
      const projects = await db.savedProjects.toArray();
      setSavedProjects(projects);
    };
    loadSavedProjects();
  }, []);

  // Filter UI libraries based on selected framework
  const getAvailableUILibraries = () => {
    return uiLibraries.filter(lib => {
      if (lib.frameworks.includes("*")) return true;
      return lib.frameworks.includes(config.framework);
    }).filter(lib => {
      // Check if required styling is selected
      if (lib.requires && !lib.requires.every(req => config.styling === req)) {
        return lib.id === "none"; // Only show "None" if requirements not met
      }
      return true;
    });
  };

  const generateCommand = () => {
    let prefix = "";
    switch (packageManager) {
      case "npx":
        prefix = "npx create-precast-app";
        break;
      case "npm":
        prefix = "npm create precast-app@latest";
        break;
      case "yarn":
        prefix = "yarn create precast-app";
        break;
      case "pnpm":
        prefix = "pnpm create precast-app";
        break;
      case "bun":
        prefix = "bun create precast-app";
        break;
    }
    const parts = [prefix];

    parts.push(config.name);
    parts.push(`--framework=${config.framework}`);

    if (config.backend !== "none") {
      parts.push(`--backend=${config.backend}`);
    }

    if (config.database !== "none") {
      parts.push(`--database=${config.database}`);
    }

    if (config.orm !== "none" && config.database !== "none") {
      parts.push(`--orm=${config.orm}`);
    }

    parts.push(`--styling=${config.styling}`);

    if (!config.typescript) {
      parts.push("--no-typescript");
    }

    if (!config.git) {
      parts.push("--no-git");
    }

    if (config.docker) {
      parts.push("--docker");
    }

    if (config.aiAssistant && config.aiAssistant !== "none") {
      parts.push(`--ai=${config.aiAssistant}`);
    }

    if (config.uiLibrary && config.uiLibrary !== "none") {
      parts.push(`--ui=${config.uiLibrary}`);
    }

    if (!config.autoInstall) {
      parts.push("--no-install");
    }

    if (config.packageManager && config.packageManager !== "pnpm") {
      parts.push(`--pm=${config.packageManager}`);
    }

    if (config.deploymentMethod && config.deploymentMethod !== "none") {
      parts.push(`--deploy=${config.deploymentMethod}`);
    }

    return parts.join(" ");
  };

  const copyToClipboard = async () => {
    await navigator.clipboard.writeText(generateCommand());
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div>
      <BuilderPageSEO />
      <main className="pb-8 px-4">
        <div className="max-w-7xl mx-auto">
          {/* Action Title */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            className="text-center mb-6 sm:mb-8"
          >
            <h2 className="action-text text-4xl sm:text-6xl text-comic-red mb-4">
              CHOOSE YOUR POWERS!
            </h2>
            <p className="font-comic text-xl">
              Build your super project with style!
            </p>
          </motion.div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Left Column - Configuration */}
            <div className="space-y-6">
              {/* Preset Templates */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                className="comic-card bg-comic-purple text-comic-white"
              >
                <h3 className="font-display text-2xl mb-4 flex items-center gap-2">
                  <FaMagic />
                  QUICK START TEMPLATES
                </h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                  <button
                    onClick={() =>
                      setConfig({
                        name: "next-fullstack-app",
                        framework: "next",
                        backend: "node",
                        database: "postgres",
                        orm: "prisma",
                        styling: "tailwind",
                        typescript: true,
                        git: true,
                        docker: true,
                        aiAssistant: "copilot",
                        uiLibrary: "shadcn",
                      })
                    }
                    className="filter-btn-comic bg-comic-white text-comic-black hover:bg-comic-yellow text-xs"
                  >
                    NEXT.JS FULL
                  </button>
                  <button
                    onClick={() =>
                      setConfig({
                        name: "react-spa",
                        framework: "react",
                        backend: "none",
                        database: "none",
                        orm: "none",
                        styling: "tailwind",
                        typescript: true,
                        git: true,
                        docker: false,
                        aiAssistant: "claude",
                        uiLibrary: "daisyui",
                      })
                    }
                    className="filter-btn-comic bg-comic-white text-comic-black hover:bg-comic-yellow text-xs"
                  >
                    REACT SPA
                  </button>
                  <button
                    onClick={() =>
                      setConfig({
                        name: "api-server",
                        framework: "vanilla",
                        backend: "express",
                        database: "mongodb",
                        orm: "none",
                        styling: "css",
                        typescript: true,
                        git: true,
                        docker: true,
                        aiAssistant: "cursor",
                        uiLibrary: "none",
                      })
                    }
                    className="filter-btn-comic bg-comic-white text-comic-black hover:bg-comic-yellow text-xs"
                  >
                    API SERVER
                  </button>
                </div>
              </motion.div>

              {/* Project Name */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                className="comic-card"
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-display text-2xl text-comic-black">
                    PROJECT NAME
                  </h3>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setShowSaved(!showSaved)}
                      onMouseEnter={() => setShowTooltip("history")}
                      onMouseLeave={() => setShowTooltip("")}
                      className="filter-btn-comic flex items-center gap-2 text-xs relative"
                    >
                      <FaHistory />
                      {savedProjects.length > 0 && (
                        <span className="badge-comic bg-comic-red text-comic-white">
                          {savedProjects.length}
                        </span>
                      )}
                      {showTooltip === "history" && (
                        <div className="comic-tooltip -top-12 left-1/2 -translate-x-1/2">
                          LOAD SAVED PROJECTS
                        </div>
                      )}
                    </button>
                  </div>
                </div>

                {showSaved && savedProjects.length > 0 && (
                  <div className="mb-4 bg-comic-white border-2 border-comic-black rounded-lg p-2 max-h-40 overflow-y-auto">
                    {savedProjects.map((project) => (
                      <button
                        key={project.id}
                        onClick={() => {
                          const { id, createdAt, updatedAt, ...projectConfig } =
                            project;
                          setConfig(projectConfig);
                          setShowSaved(false);
                        }}
                        className="w-full text-left p-2 hover:bg-comic-yellow/20 rounded font-comic text-sm border-b border-comic-black/10 last:border-0"
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-bold">{project.name}</div>
                            <div className="text-xs text-gray-600">
                              {new Date(project.createdAt).toLocaleDateString()}
                            </div>
                          </div>
                          <div className="flex items-center gap-1">
                            {/* Framework Icon */}
                            {frameworks.find((f) => f.id === project.framework)?.icon && (
                              <div className="p-1">
                                {React.createElement(
                                  frameworks.find((f) => f.id === project.framework)!.icon,
                                  {
                                    size: 16,
                                    className: frameworks.find((f) => f.id === project.framework)!.color,
                                  }
                                )}
                              </div>
                            )}
                            {/* Backend Icon */}
                            {project.backend !== "none" && backends.find((b) => b.id === project.backend)?.icon && (
                              <div className="p-1">
                                {React.createElement(
                                  backends.find((b) => b.id === project.backend)!.icon,
                                  {
                                    size: 16,
                                    className: backends.find((b) => b.id === project.backend)!.color,
                                  }
                                )}
                              </div>
                            )}
                            {/* Database Icon */}
                            {project.database !== "none" && databases.find((d) => d.id === project.database)?.icon && (
                              <div className="p-1">
                                {React.createElement(
                                  databases.find((d) => d.id === project.database)!.icon,
                                  {
                                    size: 16,
                                    className: databases.find((d) => d.id === project.database)!.color,
                                  }
                                )}
                              </div>
                            )}
                            {/* TypeScript Icon */}
                            {project.typescript && (
                              <div className="p-1">
                                <SiTypescript size={16} className="text-blue-600" />
                              </div>
                            )}
                          </div>
                        </div>
                      </button>
                    ))}
                  </div>
                )}

                <div className="relative">
                  <input
                    type="text"
                    className="input-comic w-full pr-24"
                    value={config.name}
                    onChange={(e) =>
                      setConfig({ ...config, name: e.target.value })
                    }
                    placeholder="my-super-project"
                  />
                  <div className="absolute right-2 top-1/2 -translate-y-1/2">
                    <button
                      onClick={generateRandomName}
                      onMouseEnter={() => setShowTooltip("random")}
                      onMouseLeave={() => setShowTooltip("")}
                      className="filter-btn-comic flex items-center gap-1 py-1 px-2 text-sm relative"
                    >
                      <FaDice />
                      <span className="hidden sm:inline">RANDOM</span>
                      {showTooltip === "random" && (
                        <div className="comic-tooltip -top-12 left-1/2 -translate-x-1/2">
                          GENERATE HERO NAME!
                        </div>
                      )}
                    </button>
                  </div>
                </div>

                {config.name && (
                  <div className="mt-2 flex gap-2 flex-wrap">
                    <span className="badge-comic bg-comic-green text-comic-black text-xs">
                      {config.name.length} chars
                    </span>
                    {config.name.includes("-") && (
                      <span className="badge-comic bg-comic-blue text-comic-white text-xs">
                        kebab-case ✓
                      </span>
                    )}
                    {/^[a-z0-9-]+$/.test(config.name) && (
                      <span className="badge-comic bg-comic-purple text-comic-white text-xs">
                        valid ✓
                      </span>
                    )}
                  </div>
                )}
              </motion.div>

              {/* Framework */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.1 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-blue">
                  FRONTEND POWER
                </h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
                  {frameworks.map((fw) => (
                    <ServiceTooltip key={fw.id} serviceId={fw.id}>
                      <button
                        onClick={() =>
                          setConfig({ ...config, framework: fw.id })
                        }
                        data-active={config.framework === fw.id}
                        className="filter-btn-comic flex items-center justify-center gap-2"
                      >
                        {fw.icon && <fw.icon className={fw.color} />}
                        <span>{fw.name}</span>
                      </button>
                    </ServiceTooltip>
                  ))}
                </div>
              </motion.div>

              {/* Backend */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-green">
                  BACKEND STRENGTH
                </h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                  {backends.map((backend) => (
                    <ServiceTooltip key={backend.id} serviceId={backend.id}>
                      <button
                        onClick={() =>
                          setConfig({ ...config, backend: backend.id })
                        }
                        data-active={config.backend === backend.id}
                        className="filter-btn-comic flex items-center justify-center gap-2"
                      >
                        {backend.icon && (
                          <backend.icon className={backend.color} />
                        )}
                        <span>{backend.name}</span>
                      </button>
                    </ServiceTooltip>
                  ))}
                </div>
              </motion.div>

              {/* Database */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-purple">
                  DATA STORAGE
                </h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                  {databases.map((db) => (
                    <ServiceTooltip key={db.id} serviceId={db.id}>
                      <button
                        onClick={() =>
                          setConfig({ ...config, database: db.id })
                        }
                        data-active={config.database === db.id}
                        className="filter-btn-comic flex items-center justify-center gap-2"
                      >
                        {db.icon && <db.icon className={db.color} />}
                        <span>{db.name}</span>
                      </button>
                    </ServiceTooltip>
                  ))}
                </div>
              </motion.div>

              {/* ORM */}
              {config.database !== "none" && (
                <motion.div
                  initial={{ opacity: 0, x: -50 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.4 }}
                  className="comic-card"
                >
                  <h3 className="font-display text-2xl mb-4 text-comic-orange">
                    ORM MAGIC
                  </h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                    {orms.map((orm) => (
                      <ServiceTooltip key={orm.id} serviceId={orm.id}>
                        <button
                          onClick={() => setConfig({ ...config, orm: orm.id })}
                          data-active={config.orm === orm.id}
                          className="filter-btn-comic flex items-center justify-center gap-2"
                        >
                          {orm.icon && <orm.icon className={orm.color} />}
                          <span>{orm.name}</span>
                        </button>
                      </ServiceTooltip>
                    ))}
                  </div>
                </motion.div>
              )}

              {/* Styling */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-pink">
                  STYLE POWER
                </h3>
                <div className="grid grid-cols-2 gap-3">
                  {stylings.map((style) => (
                    <ServiceTooltip key={style.id} serviceId={style.id}>
                      <button
                        onClick={() =>
                          setConfig({ ...config, styling: style.id })
                        }
                        data-active={config.styling === style.id}
                        className="filter-btn-comic flex items-center justify-center gap-2"
                      >
                        {style.icon && <style.icon className={style.color} />}
                        <span>{style.name}</span>
                      </button>
                    </ServiceTooltip>
                  ))}
                </div>
              </motion.div>

              {/* UI Component Library */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.55 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-blue flex items-center gap-2">
                  <FaPaintBrush />
                  UI COMPONENTS
                </h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                  {getAvailableUILibraries().map((lib) => (
                    <button
                      key={lib.id}
                      onClick={() => setConfig({ ...config, uiLibrary: lib.id })}
                      data-active={config.uiLibrary === lib.id}
                      className="filter-btn-comic flex items-center justify-center gap-2"
                      title={lib.description}
                    >
                      {lib.icon && (
                        typeof lib.icon === 'string' ? (
                          <PublicIcon name={lib.icon} className={lib.color} />
                        ) : (
                          <lib.icon className={lib.color} />
                        )
                      )}
                      <span className="text-xs">{lib.name}</span>
                    </button>
                  ))}
                </div>
                {config.styling !== "tailwind" && config.uiLibrary && ["daisyui", "shadcn", "brutalist"].includes(config.uiLibrary) && (
                  <p className="text-xs text-comic-red mt-2 font-comic">
                    ⚠️ This UI library works best with Tailwind CSS
                  </p>
                )}
              </motion.div>

              {/* AI Assistance */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="comic-card bg-comic-purple text-comic-white"
              >
                <h3 className="font-display text-2xl mb-4 flex items-center gap-2">
                  <FaBrain />
                  AI ASSISTANCE
                </h3>
                <div className="grid grid-cols-2 gap-3">
                  {aiAssistants.map((ai) => (
                    <button
                      key={ai.id}
                      onClick={() => setConfig({ ...config, aiAssistant: ai.id })}
                      data-active={config.aiAssistant === ai.id}
                      className={`filter-btn-comic flex items-center justify-center gap-2 ${
                        config.aiAssistant === ai.id
                          ? "bg-comic-yellow text-comic-black"
                          : "bg-comic-white text-comic-black hover:bg-comic-yellow"
                      }`}
                      title={ai.description}
                    >
                      {ai.icon && (
                        typeof ai.icon === 'string' ? (
                          <PublicIcon name={ai.icon} className={ai.color} />
                        ) : (
                          <ai.icon className={ai.color} />
                        )
                      )}
                      <span className="text-xs">{ai.name}</span>
                    </button>
                  ))}
                </div>
                {config.aiAssistant && config.aiAssistant !== "none" && (
                  <div className="mt-3 p-3 bg-comic-white/20 rounded-lg">
                    <p className="text-xs font-comic">
                      {aiAssistants.find(ai => ai.id === config.aiAssistant)?.description}
                    </p>
                    {aiAssistants.find(ai => ai.id === config.aiAssistant)?.files && (
                      <div className="mt-2">
                        <p className="text-xs font-comic font-bold">Creates:</p>
                        <ul className="text-xs font-comic mt-1">
                          {aiAssistants.find(ai => ai.id === config.aiAssistant)?.files?.map(file => (
                            <li key={file}>• {file}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}
              </motion.div>

              {/* Additional Options */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 text-comic-darkBlue">
                  POWER-UPS
                </h3>
                <div className="space-y-4">
                  <ServiceTooltip serviceId="typescript">
                    <label className="flex items-center gap-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={config.typescript}
                        onChange={(e) =>
                          setConfig({ ...config, typescript: e.target.checked })
                        }
                        className="w-6 h-6 rounded border-3 border-comic-black accent-comic-red"
                      />
                      <div className="flex items-center gap-2">
                        <SiTypescript className="text-comic-blue text-xl" />
                        <span className="font-comic font-bold">TypeScript</span>
                      </div>
                    </label>
                  </ServiceTooltip>

                  <ServiceTooltip serviceId="git">
                    <label className="flex items-center gap-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={config.git}
                        onChange={(e) =>
                          setConfig({ ...config, git: e.target.checked })
                        }
                        className="w-6 h-6 rounded border-3 border-comic-black accent-comic-red"
                      />
                      <div className="flex items-center gap-2">
                        <FaGitAlt className="text-comic-orange text-xl" />
                        <span className="font-comic font-bold">
                          Git Repository
                        </span>
                      </div>
                    </label>
                  </ServiceTooltip>

                  <ServiceTooltip serviceId="docker">
                    <label className="flex items-center gap-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={config.docker}
                        onChange={(e) =>
                          setConfig({ ...config, docker: e.target.checked })
                        }
                        className="w-6 h-6 rounded border-3 border-comic-black accent-comic-red"
                      />
                      <div className="flex items-center gap-2">
                        <FaDocker className="text-comic-blue text-xl" />
                        <span className="font-comic font-bold">Docker</span>
                      </div>
                    </label>
                  </ServiceTooltip>
                </div>
              </motion.div>

              {/* Package Manager & Auto Install */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.75 }}
                className="comic-card bg-comic-green text-comic-white"
              >
                <h3 className="font-display text-2xl mb-4 flex items-center gap-2">
                  <BiPackage />
                  INSTALL OPTIONS
                </h3>
                
                {/* Auto Install Toggle */}
                <div className="mb-4">
                  <label className="flex items-center gap-3 cursor-pointer">
                    <div className="relative">
                      <input
                        type="checkbox"
                        checked={config.autoInstall}
                        onChange={(e) =>
                          setConfig({ ...config, autoInstall: e.target.checked })
                        }
                        className="sr-only"
                      />
                      <div className={`w-14 h-8 rounded-full border-3 border-comic-black transition-colors ${
                        config.autoInstall ? 'bg-comic-yellow' : 'bg-comic-white'
                      }`}>
                        <div className={`absolute top-0.5 left-0.5 w-6 h-6 rounded-full bg-comic-black transition-transform ${
                          config.autoInstall ? 'translate-x-6' : 'translate-x-0'
                        }`} />
                      </div>
                    </div>
                    <span className="font-comic font-bold">
                      Auto-install dependencies
                    </span>
                  </label>
                </div>

                {/* Package Manager Selection */}
                <div className="grid grid-cols-3 gap-3">
                  {packageManagers.map((pm) => (
                    <button
                      key={pm.id}
                      onClick={() => setConfig({ ...config, packageManager: pm.id })}
                      data-active={config.packageManager === pm.id}
                      className={`filter-btn-comic flex flex-col items-center justify-center gap-1 py-3 ${
                        config.packageManager === pm.id
                          ? "bg-comic-yellow text-comic-black"
                          : "bg-comic-white text-comic-black hover:bg-comic-yellow"
                      }`}
                      title={pm.description}
                    >
                      <pm.icon className={`text-2xl ${pm.color}`} />
                      <span className="text-xs font-bold">{pm.name}</span>
                    </button>
                  ))}
                </div>
              </motion.div>

              {/* Deployment Options */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.8 }}
                className="comic-card"
              >
                <h3 className="font-display text-2xl mb-4 flex items-center gap-2">
                  <FaRocket className="text-comic-red" />
                  DEPLOYMENT
                </h3>
                <div className="grid grid-cols-2 gap-3">
                  {deploymentMethods.map((deploy) => (
                    <button
                      key={deploy.id}
                      onClick={() => setConfig({ ...config, deploymentMethod: deploy.id })}
                      data-active={config.deploymentMethod === deploy.id}
                      className={`filter-btn-comic flex items-center justify-center gap-2 ${
                        config.deploymentMethod === deploy.id
                          ? "bg-comic-yellow text-comic-black"
                          : "bg-comic-white text-comic-black hover:bg-comic-yellow"
                      }`}
                      title={deploy.description}
                    >
                      {deploy.icon && (
                        typeof deploy.icon === 'string' ? (
                          <PublicIcon name={deploy.icon} className={deploy.color} />
                        ) : (
                          <deploy.icon className={deploy.color} />
                        )
                      )}
                      <span className="text-xs">{deploy.name}</span>
                    </button>
                  ))}
                </div>
                {config.deploymentMethod && config.deploymentMethod !== "none" && (
                  <p className="text-xs font-comic mt-3 text-comic-purple">
                    💡 {deploymentMethods.find(d => d.id === config.deploymentMethod)?.description}
                  </p>
                )}
              </motion.div>
            </div>

            {/* Right Column - Terminal & Actions */}
            <div className="lg:sticky lg:top-28 h-fit space-y-6">
              {/* Stack Summary */}
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.2 }}
                className="comic-panel p-6"
                style={{
                  backgroundColor: "var(--comic-yellow)",
                  transform: "rotate(0deg)",
                }}
              >
                <h3
                  className="font-display text-2xl mb-4 flex items-center justify-center gap-3"
                  style={{ color: "var(--comic-black)" }}
                >
                  <FaLightbulb
                    className="text-3xl"
                    style={{ color: "var(--comic-orange)" }}
                  />
                  YOUR SUPER STACK
                </h3>

                <div className="space-y-4">
                  {/* Project Name */}
                  <div
                    className="bg-comic-white border-3 border-comic-black rounded-lg p-3"
                    style={{
                      backgroundColor: "var(--comic-white)",
                      borderColor: "var(--comic-black)",
                    }}
                  >
                    <div
                      className="font-comic text-xs uppercase mb-1"
                      style={{ color: "var(--comic-gray)" }}
                    >
                      PROJECT NAME
                    </div>
                    <div
                      className="font-display text-lg"
                      style={{ color: "var(--comic-red)" }}
                    >
                      {config.name}
                    </div>
                  </div>

                  {/* Tech Stack */}
                  <div className="space-y-2">
                    <div
                      className="font-comic text-xs uppercase"
                      style={{ color: "var(--comic-black)" }}
                    >
                      TECH STACK
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div
                        className="flex items-center gap-2 p-2 bg-comic-white border-2 border-comic-black rounded"
                        style={{
                          backgroundColor: "var(--comic-white)",
                          borderColor: "var(--comic-black)",
                          transform: "rotate(0deg)",
                        }}
                      >
                        {frameworks.find((f) => f.id === config.framework)
                          ?.icon && (
                          <>
                            {React.createElement(
                              frameworks.find((f) => f.id === config.framework)!
                                .icon,
                              {
                                size: 18,
                                className: frameworks.find(
                                  (f) => f.id === config.framework,
                                )!.color,
                              },
                            )}
                          </>
                        )}
                        <span className="font-comic font-bold text-xs">
                          {config.framework.toUpperCase()}
                        </span>
                      </div>

                      {config.backend !== "none" && (
                        <div
                          className="flex items-center gap-2 p-2 bg-comic-white border-2 border-comic-black rounded"
                          style={{
                            backgroundColor: "var(--comic-white)",
                            borderColor: "var(--comic-black)",
                            transform: "rotate(0deg)",
                          }}
                        >
                          {backends.find((b) => b.id === config.backend)
                            ?.icon && (
                            <>
                              {React.createElement(
                                backends.find((b) => b.id === config.backend)!
                                  .icon,
                                {
                                  size: 18,
                                  className: backends.find(
                                    (b) => b.id === config.backend,
                                  )!.color,
                                },
                              )}
                            </>
                          )}
                          <span className="font-comic font-bold text-xs">
                            {config.backend.toUpperCase()}
                          </span>
                        </div>
                      )}

                      {config.database !== "none" && (
                        <div
                          className="flex items-center gap-2 p-2 bg-comic-white border-2 border-comic-black rounded"
                          style={{
                            backgroundColor: "var(--comic-white)",
                            borderColor: "var(--comic-black)",
                            transform: "rotate(0deg)",
                          }}
                        >
                          {databases.find((d) => d.id === config.database)
                            ?.icon && (
                            <>
                              {React.createElement(
                                databases.find((d) => d.id === config.database)!
                                  .icon,
                                {
                                  size: 18,
                                  className: databases.find(
                                    (d) => d.id === config.database,
                                  )!.color,
                                },
                              )}
                            </>
                          )}
                          <span className="font-comic font-bold text-xs">
                            {config.database.toUpperCase()}
                          </span>
                        </div>
                      )}

                      <div
                        className="flex items-center gap-2 p-2 bg-comic-white border-2 border-comic-black rounded"
                        style={{
                          backgroundColor: "var(--comic-white)",
                          borderColor: "var(--comic-black)",
                          transform: "rotate(0deg)",
                        }}
                      >
                        {stylings.find((s) => s.id === config.styling)
                          ?.icon && (
                          <>
                            {React.createElement(
                              stylings.find((s) => s.id === config.styling)!
                                .icon,
                              {
                                size: 18,
                                className: stylings.find(
                                  (s) => s.id === config.styling,
                                )!.color,
                              },
                            )}
                          </>
                        )}
                        <span className="font-comic font-bold text-xs">
                          {config.styling.toUpperCase()}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* AI & UI */}
                  {(config.aiAssistant !== "none" || config.uiLibrary !== "none") && (
                    <div className="space-y-2">
                      <div
                        className="font-comic text-xs uppercase"
                        style={{ color: "var(--comic-black)" }}
                      >
                        ENHANCEMENTS
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {config.aiAssistant && config.aiAssistant !== "none" && (
                          <div
                            className="flex items-center gap-1 px-2 py-1 bg-comic-white border-2 border-comic-black rounded"
                            style={{
                              backgroundColor: "var(--comic-white)",
                              borderColor: "var(--comic-black)",
                            }}
                          >
                            {aiAssistants.find(ai => ai.id === config.aiAssistant)?.icon && 
                              React.createElement(
                                aiAssistants.find(ai => ai.id === config.aiAssistant)!.icon,
                                { size: 16, className: aiAssistants.find(ai => ai.id === config.aiAssistant)!.color }
                              )
                            }
                            <span className="font-comic font-bold text-xs">
                              {config.aiAssistant.toUpperCase()}
                            </span>
                          </div>
                        )}
                        {config.uiLibrary && config.uiLibrary !== "none" && (
                          <div
                            className="flex items-center gap-1 px-2 py-1 bg-comic-white border-2 border-comic-black rounded"
                            style={{
                              backgroundColor: "var(--comic-white)",
                              borderColor: "var(--comic-black)",
                            }}
                          >
                            {uiLibraries.find(ui => ui.id === config.uiLibrary)?.icon && 
                              React.createElement(
                                uiLibraries.find(ui => ui.id === config.uiLibrary)!.icon,
                                { size: 16, className: uiLibraries.find(ui => ui.id === config.uiLibrary)!.color }
                              )
                            }
                            <span className="font-comic font-bold text-xs">
                              {config.uiLibrary.toUpperCase()}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Power-ups Status */}
                  {(config.typescript || config.git || config.docker) && (
                    <div className="space-y-2">
                      <div
                        className="font-comic text-xs uppercase"
                        style={{ color: "var(--comic-black)" }}
                      >
                        POWER-UPS
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {config.typescript && (
                          <div
                            className="flex items-center gap-1 px-2 py-1 bg-comic-white border-2 border-comic-black rounded"
                            style={{
                              backgroundColor: "var(--comic-white)",
                              borderColor: "var(--comic-black)",
                            }}
                          >
                            <SiTypescript
                              size={16}
                              className="text-comic-blue"
                            />
                            <span className="font-comic font-bold text-xs">
                              TS
                            </span>
                          </div>
                        )}
                        {config.git && (
                          <div
                            className="flex items-center gap-1 px-2 py-1 bg-comic-white border-2 border-comic-black rounded"
                            style={{
                              backgroundColor: "var(--comic-white)",
                              borderColor: "var(--comic-black)",
                            }}
                          >
                            <FaGitAlt size={16} className="text-comic-orange" />
                            <span className="font-comic font-bold text-xs">
                              GIT
                            </span>
                          </div>
                        )}
                        {config.docker && (
                          <div
                            className="flex items-center gap-1 px-2 py-1 bg-comic-white border-2 border-comic-black rounded"
                            style={{
                              backgroundColor: "var(--comic-white)",
                              borderColor: "var(--comic-black)",
                            }}
                          >
                            <FaDocker size={16} className="text-comic-blue" />
                            <span className="font-comic font-bold text-xs">
                              DOCKER
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Fun Stats */}
                  <div
                    className="bg-comic-red text-comic-white rounded-lg p-3 text-center"
                    style={{
                      backgroundColor: "var(--comic-red)",
                      color: "var(--comic-white)",
                    }}
                  >
                    <div className="flex items-center justify-center gap-2">
                      <FaBolt className="text-2xl" />
                      <div className="font-display text-2xl">
                        {
                          Object.values(config).filter(
                            (v) =>
                              v === true ||
                              (typeof v === "string" && v !== "none"),
                          ).length
                        }
                      </div>
                    </div>
                    <div className="font-comic text-xs uppercase mt-1">
                      POWERS ACTIVATED
                    </div>
                  </div>
                </div>
              </motion.div>
              {/* Terminal */}
              <motion.div
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
                className="terminal-comic"
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-display text-xl text-comic-yellow">
                    COMMAND GENERATOR
                  </h3>
                  <div className="flex gap-2">
                    <div className="w-3 h-3 rounded-full bg-comic-red border border-comic-black" />
                    <div className="w-3 h-3 rounded-full bg-comic-yellow border border-comic-black" />
                    <div className="w-3 h-3 rounded-full bg-comic-green border border-comic-black" />
                  </div>
                </div>

                {/* Package Manager Tabs */}
                <div className="flex gap-2 mb-4">
                  <button
                    onClick={() => setPackageManager("npx")}
                    className={`flex items-center gap-2 px-3 py-1 font-comic text-sm font-bold border-2 rounded-lg transition-all ${
                      packageManager === "npx"
                        ? "bg-comic-yellow text-comic-black border-comic-black shadow-comic"
                        : "bg-comic-black text-comic-yellow border-comic-yellow hover:bg-comic-yellow hover:text-comic-black"
                    }`}
                  >
                    <BiPackage className="text-lg" />
                    NPX
                  </button>
                  <button
                    onClick={() => setPackageManager("npm")}
                    className={`flex items-center gap-2 px-3 py-1 font-comic text-sm font-bold border-2 rounded-lg transition-all ${
                      packageManager === "npm"
                        ? "bg-comic-red text-comic-white border-comic-black shadow-comic"
                        : "bg-comic-black text-comic-red border-comic-red hover:bg-comic-red hover:text-comic-white"
                    }`}
                  >
                    <FaNpm className="text-lg" />
                    NPM
                  </button>
                  <button
                    onClick={() => setPackageManager("yarn")}
                    className={`flex items-center gap-2 px-3 py-1 font-comic text-sm font-bold border-2 rounded-lg transition-all ${
                      packageManager === "yarn"
                        ? "bg-comic-blue text-comic-white border-comic-black shadow-comic"
                        : "bg-comic-black text-comic-blue border-comic-blue hover:bg-comic-blue hover:text-comic-white"
                    }`}
                  >
                    <FaYarn className="text-lg" />
                    YARN
                  </button>
                  <button
                    onClick={() => setPackageManager("pnpm")}
                    className={`flex items-center gap-2 px-3 py-1 font-comic text-sm font-bold border-2 rounded-lg transition-all ${
                      packageManager === "pnpm"
                        ? "bg-comic-orange text-comic-white border-comic-black shadow-comic"
                        : "bg-comic-black text-comic-orange border-comic-orange hover:bg-comic-orange hover:text-comic-white"
                    }`}
                  >
                    <SiPnpm className="text-lg" />
                    PNPM
                  </button>
                  <button
                    onClick={() => setPackageManager("bun")}
                    className={`flex items-center gap-2 px-3 py-1 font-comic text-sm font-bold border-2 rounded-lg transition-all ${
                      packageManager === "bun"
                        ? "bg-comic-purple text-comic-white border-comic-black shadow-comic"
                        : "bg-comic-black text-comic-purple border-comic-purple hover:bg-comic-purple hover:text-comic-white"
                    }`}
                  >
                    <SiBun className="text-lg" />
                    BUN
                  </button>
                </div>

                <div className="bg-black/20 rounded p-4 font-mono text-sm">
                  <div className="mb-2 text-xs text-comic-yellow font-comic flex items-center gap-2">
                    <FaLightbulb /> TIP: Click individual flags to copy them!
                  </div>
                  <pre className="whitespace-pre-wrap break-all text-comic-green">
                    <span className="text-comic-yellow">$</span> {generateCommand()}
                  </pre>
                </div>

                <button
                  onClick={copyToClipboard}
                  onMouseEnter={() => !copied && setShowTooltip("copy")}
                  onMouseLeave={() => setShowTooltip("")}
                  className="btn-pow w-full mt-4 flex items-center justify-center gap-2 relative"
                >
                  {copied ? (
                    <>
                      <FaCheck />
                      COPIED!
                    </>
                  ) : (
                    <>
                      <FaCopy />
                      COPY COMMAND
                    </>
                  )}
                  {showTooltip === "copy" && !copied && (
                    <div className="comic-tooltip -top-12 left-1/2 -translate-x-1/2">
                      COPY TO CLIPBOARD!
                    </div>
                  )}
                </button>
              </motion.div>

              {/* Action Buttons */}
              <div className="grid grid-cols-2 gap-4">
                <div
                  className="comic-panel p-6 text-center cursor-pointer relative"
                  onMouseEnter={() => setShowTooltip("launch")}
                  onMouseLeave={() => setShowTooltip("")}
                  onClick={() => {
                    navigator.clipboard.writeText(generateCommand());
                    setDialog({
                      isOpen: true,
                      title: "READY TO LAUNCH!",
                      message:
                        "Command copied! Open your terminal and paste to start building your super project!",
                      type: "success",
                    });
                  }}
                >
                  <FaRocket className="text-4xl text-comic-red mx-auto mb-2" />
                  <h4 className="font-display text-xl">LAUNCH</h4>
                  <p className="font-comic text-sm">Start Building</p>
                  {showTooltip === "launch" && (
                    <div className="comic-tooltip -top-12 left-1/2 -translate-x-1/2">
                      COPY & START PROJECT!
                    </div>
                  )}
                </div>

                <motion.div
                  whileTap={{ scale: 0.95 }}
                  onMouseEnter={() => setShowTooltip("save")}
                  onMouseLeave={() => setShowTooltip("")}
                  onClick={async () => {
                    try {
                      await db.savedProjects.add({
                        ...config,
                        createdAt: new Date(),
                        updatedAt: new Date(),
                      });
                      // Reload saved projects
                      const projects = await db.savedProjects.toArray();
                      setSavedProjects(projects);
                      setDialog({
                        isOpen: true,
                        title: "PROJECT SAVED!",
                        message: `Your configuration "${config.name}" has been saved to your hero vault!`,
                        type: "success",
                      });
                    } catch (error) {
                      console.error("Failed to save project:", error);
                      setDialog({
                        isOpen: true,
                        title: "SAVE FAILED!",
                        message:
                          "Failed to save your project configuration. Please try again!",
                        type: "error",
                      });
                    }
                  }}
                  className="comic-panel p-6 text-center cursor-pointer relative"
                >
                  <FaDatabase className="text-4xl text-comic-blue mx-auto mb-2" />
                  <h4 className="font-display text-xl">SAVE</h4>
                  <p className="font-comic text-sm">For Later</p>
                  {showTooltip === "save" && (
                    <div className="comic-tooltip -top-12 left-1/2 -translate-x-1/2">
                      SAVE TO HERO VAULT!
                    </div>
                  )}
                </motion.div>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Comic Dialog */}
      <ComicDialog
        isOpen={dialog.isOpen}
        onClose={() => setDialog({ ...dialog, isOpen: false })}
        title={dialog.title}
        message={dialog.message}
        type={dialog.type}
      />
    </div>
  );
}