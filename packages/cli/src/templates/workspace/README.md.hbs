# {{name}}

A modern full-stack application built with {{framework}} and {{backend}}.

## Project Structure

```
{{name}}/
├── apps/
│   ├── web/          # Frontend ({{framework}})
{{#if (eq backend "cloudflare-workers")}}│   └── workers/      # Cloudflare Workers
{{else}}│   └── api/          # Backend ({{backend}})
{{/if}}├── packages/
│   └── shared/       # Shared utilities and types
├── package.json      # Root workspace configuration
└── turbo.json        # Turborepo configuration
```

## Getting Started

1. Install dependencies:
   ```bash
   {{packageManager}} install
   ```

{{#if database}}{{#unless (or (eq database "none") (eq database "turso") (eq database "cloudflare-d1") (eq database "firebase") (eq database "supabase"))}}2. Start Docker containers (if using local database):
   ```bash
   {{packageManager}} run docker:up
   ```
   
   Wait for containers to be healthy, then run migrations if needed:
   {{#if (eq orm "prisma")}}
   ```bash
   cd apps/api && npx prisma migrate deploy
   ```
   {{else if (eq orm "drizzle")}}
   ```bash
   cd apps/api && npx drizzle-kit push
   ```
   {{/if}}

3. Start development servers:
{{else}}2. Start development servers:
{{/unless}}{{else}}2. Start development servers:
{{/if}}   ```bash
   {{packageManager}} run dev
   ```

   This will start:
   - Frontend: http://localhost:3000
   - Backend: http://localhost:3001
   
   **Note**: With Turbo's TUI mode, you'll see each task in a separate panel in your terminal!

## Available Scripts

- `{{packageManager}} run dev` - Start development servers
- `{{packageManager}} run build` - Build all applications
- `{{packageManager}} run start` - Start production servers
- `{{packageManager}} run lint` - Lint all packages
- `{{packageManager}} run type-check` - Type check all packages
{{#if database}}{{#unless (or (eq database "none") (eq database "turso") (eq database "cloudflare-d1") (eq database "firebase") (eq database "supabase"))}}
### Docker Scripts
- `{{packageManager}} run docker:up` - Start Docker containers
- `{{packageManager}} run docker:down` - Stop Docker containers
- `{{packageManager}} run docker:logs` - View container logs
- `{{packageManager}} run docker:reset` - Reset database (removes all data)
- `{{packageManager}} run docker:ps` - Show container status
{{/unless}}{{/if}}

## Tech Stack

### Frontend (apps/web)
- **Framework**: {{framework}}
- **Styling**: {{styling}}
{{#if uiLibrary}}- **UI Library**: {{uiLibrary}}{{/if}}
{{#if typescript}}- **Language**: TypeScript{{else}}- **Language**: JavaScript{{/if}}

### Backend (apps/{{#if (eq backend "cloudflare-workers")}}workers{{else}}api{{/if}})
- **Framework**: {{backend}}
{{#if database}}- **Database**: {{database}}{{/if}}
{{#if orm}}- **ORM**: {{orm}}{{/if}}
{{#if typescript}}- **Language**: TypeScript{{else}}- **Language**: JavaScript{{/if}}

## Deployment

Each application can be deployed independently:

- **Frontend**: Deploy `apps/web` to Vercel, Netlify, or similar
{{#if (eq backend "cloudflare-workers")}}- **Workers**: Deploy `apps/workers` to Cloudflare Workers
{{else}}- **Backend**: Deploy `apps/api` to Railway, Render, or similar{{/if}}

## Contributing

1. Create a feature branch
2. Make your changes
3. Run tests and linting
4. Submit a pull request

## License

MIT