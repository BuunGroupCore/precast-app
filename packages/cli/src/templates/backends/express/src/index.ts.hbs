/**
 * Express Server Configuration
 * @module server
 * @description Main Express.js server with authentication, API routes, and health checks
 */

import cors from "cors";
import { config } from "dotenv";
import express, { {{#if typescript}}type {{/if}}Request, {{#if typescript}}type {{/if}}Response, json, urlencoded } from "express";
import helmet from "helmet";

{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
import healthRoutes from "@/api/routes/health{{#if typescript}}.js{{/if}}";
{{/if}}
{{#if (includes plugins 'resend')}}
import emailRoutes from "@/api/routes/email{{#if typescript}}.js{{/if}}";
{{/if}}
{{#if authProvider}}
{{#if (eq authProvider "better-auth")}}
import { auth } from "@/features/auth/auth{{#if typescript}}.js{{/if}}";
{{else}}
import authRoutes from "@/features/auth/routes{{#if typescript}}.js{{/if}}";
{{/if}}
{{/if}}
import { 
  APP_CONFIG, 
  SERVER_CONFIG, 
  CORS_CONFIG, 
  HEALTH_CHECK_CONFIG 
} from "@/config/constants{{#if typescript}}.js{{/if}}";

config();

const app = express();

app.use(helmet());
app.use(cors(CORS_CONFIG));
app.use(json());
app.use(urlencoded({ extended: true }));

{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
app.use("/api", healthRoutes);
{{/if}}
{{#if (includes plugins 'resend')}}
app.use("/api", emailRoutes);
{{/if}}
{{#if authProvider}}
{{#if (eq authProvider "better-auth")}}
/**
 * Better Auth route handler
 * @description Converts Express requests to Web API requests for Better Auth compatibility
 */
app.all("/api/auth*", async (req, res) => {
  try {
    const url = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
    const headers{{#if typescript}}: HeadersInit{{/if}} = {};
    
    for (const [key, value] of Object.entries(req.headers)) {
      if (typeof value === 'string') {
        headers[key] = value;
      } else if (Array.isArray(value)) {
        headers[key] = value.join(', ');
      }
    }
    
    const webRequest = new Request(url, {
      method: req.method,
      headers,
      body: req.method !== 'GET' && req.method !== 'HEAD' 
        ? JSON.stringify(req.body) 
        : undefined,
      credentials: 'include',
    });
    
    const response = await auth.handler(webRequest);
    
    response.headers.forEach((value, key) => {
      res.setHeader(key, value);
    });
    
    res.status(response.status);
    const body = await response.text();
    res.send(body);
    
  } catch (error) {
    console.error('Better Auth handler error:', error);
    res.status(500).json({ 
      error: {{#if typescript}}error instanceof Error ? error.message : {{/if}}'Internal server error' 
    });
  }
});
{{else}}
app.use("/api/auth", authRoutes);
{{/if}}
{{/if}}

/**
 * Health check endpoint
 */
app.get(HEALTH_CHECK_CONFIG.path, (req: Request, res: Response) => {
  res.json({ 
    status: "ok", 
    message: HEALTH_CHECK_CONFIG.message,
    timestamp: new Date().toISOString(),
    version: APP_CONFIG.version,
    environment: APP_CONFIG.environment
  });
});

/**
 * Hello world endpoint
 */
app.get(`${SERVER_CONFIG.apiPrefix}/hello`, (req: Request, res: Response) => {
  res.json({ 
    message: `Hello from ${APP_CONFIG.name}!`,
    version: APP_CONFIG.version
  });
});

/**
 * 404 handler for unmatched routes
 */
app.use("*", (req: Request, res: Response) => {
  res.status(404).json({ 
    error: "Route not found",
    path: req.originalUrl
  });
});

/**
 * Global error handler
 */
app.use((err: Error, req: Request, res: Response) => {
  if (process.env.NODE_ENV === "development") {
    console.error(err.stack);
  }
  res.status(500).json({ 
    error: "Internal server error",
    message: process.env.NODE_ENV === "development" ? err.message : "Something went wrong"
  });
});

{{#if (or (includes powerups "ngrok") (includes powerups "traefik") (includes powerups "cloudflare-tunnel"))}}
/**
 * Start server with tunnel access (all interfaces)
 */
app.listen(SERVER_CONFIG.port, "0.0.0.0", () => {
  console.log(`[SERVER] Server running on http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}`);
  console.log(`[API] Health check: http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}${HEALTH_CHECK_CONFIG.path}`);
  console.log(`[INFO] Environment: ${APP_CONFIG.environment}`);
  {{#if (includes powerups "ngrok")}}
  console.log(`[NETWORK] ngrok tunnel access enabled on 0.0.0.0:${SERVER_CONFIG.port}`);
  {{/if}}
  {{#if (includes powerups "traefik")}}
  console.log(`[NETWORK] Traefik proxy access enabled on 0.0.0.0:${SERVER_CONFIG.port}`);
  {{/if}}
  {{#if (includes powerups "cloudflare-tunnel")}}
  console.log(`[NETWORK] Cloudflare tunnel access enabled on 0.0.0.0:${SERVER_CONFIG.port}`);
  {{/if}}
});
{{else}}
/**
 * Start server on localhost only
 */
app.listen(SERVER_CONFIG.port, SERVER_CONFIG.host, () => {
  console.log(`[SERVER] Server running on http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}`);
  console.log(`[API] Health check: http://${SERVER_CONFIG.host}:${SERVER_CONFIG.port}${HEALTH_CHECK_CONFIG.path}`);
  console.log(`[INFO] Environment: ${APP_CONFIG.environment}`);
});
{{/if}}