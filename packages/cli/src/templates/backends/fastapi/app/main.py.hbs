"""
{{name}} - FastAPI Backend Application
Generated with Precast CLI
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os

app = FastAPI(
    title="{{name}}",
    description="A modern FastAPI backend application",
    version="1.0.0"
)

# CORS Configuration
origins = []

# Development origins based on framework
client_url = os.getenv("CLIENT_URL")
if client_url:
    if "," in client_url:
        origins.extend(client_url.split(","))
    else:
        origins.append(client_url)

# Add default development origins
development_origins = [
    "http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}",
    "http://localhost:3000",
    "http://localhost:4200",
    "http://localhost:5173",
    "http://localhost:7000",{{#if (eq framework "tanstack-start")}}
    # TanStack Start can use different ports{{/if}}
]

# Only add development origins if not in production
if os.getenv("ENVIRONMENT", "development") != "production":
    origins.extend(development_origins)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins if origins else ["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["Content-Type", "Authorization"{{#if (includes powerups "ngrok")}}, "ngrok-skip-browser-warning"{{/if}}],
)

@app.get("/")
async def read_root():
    """Root endpoint - welcome message"""
    return {
        "message": "Welcome to {{name}}!",
        "status": "running",
        "version": "1.0.0"
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "{{name}}"
    }

@app.get("/api/v1/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    """Example endpoint with path and query parameters"""
    return {
        "item_id": item_id,
        "query": q,
        "message": f"You requested item {item_id}"
    }