# ngrok Tunnel Configuration

## üåê Overview

ngrok provides secure tunnels to expose your local development environment to the internet. This is essential for:

- ‚úÖ **Webhook Testing** - Test webhooks from services like Stripe, GitHub, Twilio
- ‚úÖ **OAuth Callbacks** - Handle OAuth redirects that require public URLs
- ‚úÖ **Mobile Testing** - Test your app on real mobile devices
- ‚úÖ **Client Demos** - Share your work-in-progress with clients
- ‚úÖ **API Integration** - Test with external services that can't reach localhost

## üöÄ Quick Start

### 1. Get Your ngrok Auth Token

1. Sign up for a free account at [ngrok.com](https://ngrok.com)
2. Copy your auth token from the [ngrok dashboard](https://dashboard.ngrok.com/get-started/your-authtoken)
3. Add it to your environment (choose one method):

**Option A: Add to your shell profile (.bashrc, .zshrc, .profile):**
```bash
export NGROK_AUTHTOKEN="your_auth_token_here"
```

**Option B: Add to your project's .env file:**
```bash
NGROK_AUTHTOKEN=your_auth_token_here
# or (alternative naming)
NGROK_AUTH_TOKEN=your_auth_token_here
```

### 2. Start the Tunnel

```bash
# Start ngrok tunnel
npm run ngrok:up

# Get your public URL
npm run ngrok:url
```

Your app will be available at a URL like: `https://abc123.ngrok.io`

### 3. Monitor Traffic

Open the ngrok inspection interface:

```bash
npm run ngrok:dashboard
```

Visit [http://localhost:4040](http://localhost:4040) to:
- View all HTTP requests/responses
- Replay requests for debugging
- Inspect request headers and body
- See response times and status codes

## üìç URLs and Ports

{{#if (eq backend 'none')}}
**Frontend Only Setup:**
- Local: `http://localhost:{{#if (eq framework 'next')}}3000{{else if (eq framework 'nuxt')}}3000{{else if (eq framework 'react')}}5173{{else if (eq framework 'vue')}}5173{{else if (eq framework 'angular')}}4200{{else if (eq framework 'svelte')}}5173{{else if (eq framework 'solid')}}3000{{else if (eq framework 'astro')}}4321{{else if (eq framework 'react-router')}}5173{{else if (eq framework 'tanstack-router')}}5173{{else if (eq framework 'tanstack-start')}}3000{{else if (eq framework 'vite')}}5173{{else}}3000{{/if}}`
- Public: `https://your-tunnel.ngrok.io`
- Dashboard: [http://localhost:4040](http://localhost:4040)
{{else}}
**Full Stack Setup (Monorepo with API):**

This project runs **TWO separate ngrok tunnels** for complete connectivity:

üåê **Frontend Tunnel:**
- Local: `http://localhost:{{#if (eq framework 'next')}}3000{{else if (eq framework 'nuxt')}}3000{{else if (eq framework 'react')}}5173{{else if (eq framework 'vue')}}5173{{else if (eq framework 'angular')}}4200{{else if (eq framework 'svelte')}}5173{{else if (eq framework 'solid')}}3000{{else if (eq framework 'astro')}}4321{{else if (eq framework 'react-router')}}5173{{else if (eq framework 'tanstack-router')}}5173{{else if (eq framework 'tanstack-start')}}3000{{else if (eq framework 'vite')}}5173{{else}}5173{{/if}}`
- Public: `https://your-frontend.ngrok-free.app`
- Dashboard: [http://localhost:4040](http://localhost:4040)

üöÄ **API Tunnel:**
- Local: `http://localhost:{{#if (eq backend 'express')}}5000{{else if (eq backend 'fastify')}}3001{{else if (eq backend 'hono')}}3000{{else if (eq backend 'nest')}}3000{{else}}5000{{/if}}`
- Public: `https://your-api.ngrok-free.app`
- Dashboard: [http://localhost:4041](http://localhost:4041)

‚ö†Ô∏è **IMPORTANT:** After starting ngrok, update your frontend's `.env` file:
```env
# In apps/web/.env
VITE_API_URL=https://your-api-tunnel.ngrok-free.app
```
Replace with the actual API tunnel URL from port 4041's dashboard.
{{/if}}

## üîß Configuration

### Environment Variables

Add these to your environment:

```bash
# Required (use either variable name)
NGROK_AUTHTOKEN=your_auth_token_here
# or
NGROK_AUTH_TOKEN=your_auth_token_here

# Optional
NGROK_REGION=us  # us (default), eu, ap, au, sa, jp, in
NGROK_SUBDOMAIN=my-app  # Custom subdomain (paid feature)
```

### Available Regions

- `us` - United States (Ohio)
- `eu` - Europe (Frankfurt)
- `ap` - Asia/Pacific (Singapore)
- `au` - Australia (Sydney)
- `sa` - South America (S√£o Paulo)
- `jp` - Japan (Tokyo)
- `in` - India (Mumbai)

## üõ†Ô∏è Advanced Usage

### Custom Configuration

Edit `docker/ngrok/ngrok.yml` for advanced settings:

```yaml
tunnels:
  app:
    proto: http
    addr: host.docker.internal:3000
    host_header: localhost
    auth: "username:password"  # Basic auth
    inspect: true
```

### Multiple Tunnels

For separate frontend and API tunnels (paid feature):

```yaml
tunnels:
  frontend:
    proto: http
    addr: host.docker.internal:3000
    subdomain: my-app-frontend
  
  api:
    proto: http
    addr: host.docker.internal:5000
    subdomain: my-app-api
```

### With Traefik Integration

When using both Traefik and ngrok:
1. ngrok tunnels to Traefik (port 80)
2. Traefik handles internal routing
3. Preserves all Traefik features (CORS, rate limiting, etc.)

## üìã Common Use Cases

### Webhook Testing

1. Start ngrok: `npm run ngrok:up`
2. Get public URL: `npm run ngrok:url`
3. Configure webhook URL in external service:
   - Stripe: `https://your-tunnel.ngrok.io/webhooks/stripe`
   - GitHub: `https://your-tunnel.ngrok.io/webhooks/github`
4. Monitor requests: `npm run ngrok:dashboard`

### OAuth Configuration

1. Get your public URL
2. Update OAuth redirect URI:
   ```
   https://your-tunnel.ngrok.io/auth/callback
   ```
3. Test OAuth flow with real providers

### Mobile Device Testing

1. Start ngrok tunnel
2. Get public URL: `npm run ngrok:url`
3. Open URL on mobile device
4. Test responsive design and mobile features

## üîí Security Considerations

‚ö†Ô∏è **Important Security Notes:**

1. **Temporary URLs**: Free ngrok URLs change each time you restart
2. **Public Access**: Anyone with the URL can access your local app
3. **Authentication**: Consider adding basic auth for sensitive data:
   ```yaml
   auth: "username:password"
   ```
4. **HTTPS Only**: ngrok provides HTTPS by default
5. **Request Inspection**: All traffic is visible in ngrok dashboard

## üìù Handling ngrok Browser Warning (Free Tier)

The free tier shows a warning page, but **this is automatically handled by the included ngrok helper utility**.

### Automatic Browser Warning Bypass

{{#if (or (eq framework 'react') (eq framework 'next') (eq framework 'vue') (eq framework 'svelte') (eq framework 'solid') (eq framework 'vite'))}}
The ngrok helper utility is automatically included at `src/utils/ngrok-helper.ts` and:
- ‚úÖ Auto-detects when running through ngrok
- ‚úÖ Automatically adds bypass headers to all fetch requests
- ‚úÖ Patches XMLHttpRequest for older libraries
- ‚úÖ Works transparently - no code changes needed

```typescript
// The helper auto-initializes when imported
import './utils/ngrok-helper';

// Or use the utilities directly
import { isNgrokTunnel, getNgrokHeaders } from './utils/ngrok-helper';

// For axios users
if (isNgrokTunnel()) {
  axios.defaults.headers.common['ngrok-skip-browser-warning'] = 'true';
}
```
{{else}}
### For API Requests:
```javascript
// Add this header to skip the warning
fetch('https://your-tunnel.ngrok.io/api', {
  headers: {
    'ngrok-skip-browser-warning': 'true'
  }
})
```

### For Frontend Development:
```javascript
// In your app, add a middleware or interceptor
if (window.location.hostname.includes('ngrok')) {
  // Auto-add header for all requests
  const originalFetch = window.fetch;
  window.fetch = (url, options = {}) => {
    options.headers = {
      ...options.headers,
      'ngrok-skip-browser-warning': 'true'
    };
    return originalFetch(url, options);
  };
}
```
{{/if}}

### To Remove Warning Completely:
- Upgrade to any paid ngrok plan
- Or use Cloudflare Tunnel PowerUp instead (no warnings)

## üêõ Troubleshooting

### Tunnel Not Starting

```bash
# Check if ngrok is running
docker ps | grep ngrok

# View logs
npm run ngrok:logs

# Restart tunnel
npm run ngrok:down && npm run ngrok:up
```

### Auth Token Issues

1. Verify token in your environment variables (check `echo $NGROK_AUTHTOKEN`)
2. Check token validity at [dashboard.ngrok.com](https://dashboard.ngrok.com)
3. Ensure no extra spaces in token
4. If using shell profile, restart your terminal or run `source ~/.bashrc`

### Connection Refused

1. Verify your app is running on the expected port
2. Check Docker network connectivity:
   ```bash
   docker network ls
   ```
3. Ensure firewall isn't blocking connections

### Rate Limiting

Free ngrok accounts have limits:
- 40 connections/minute
- 20,000 requests/month

For production use, consider upgrading to a paid plan.

## üìö Additional Resources

- [ngrok Documentation](https://ngrok.com/docs)
- [Webhook Testing Guide](https://ngrok.com/docs/guides/webhooks/)
- [Security Best Practices](https://ngrok.com/docs/guides/security/)
- [Pricing and Limits](https://ngrok.com/pricing)

## üéØ Tips

1. **Save URLs**: Store test webhook URLs in `.env.local`
2. **Use Inspection**: The dashboard at :4040 is invaluable for debugging
3. **Replay Requests**: Use the replay feature to test webhook handlers
4. **Custom Domains**: Upgrade for consistent URLs across restarts
5. **CI/CD Integration**: Use ngrok in CI for integration testing

---

üí° **Pro Tip**: For production-like testing with custom domains, consider the Cloudflare Tunnel PowerUp as an alternative.