import express, { Request, Response } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors({
  {{#if (or (includes powerups "ngrok") (includes powerups "cloudflare-tunnel"))}}
  origin: (origin, callback) => {
    // Allow requests with no origin (like mobile apps or curl)
    if (!origin) {
      return callback(null, true);
    }
    
    // Check if origin matches allowed patterns
    const allowedOrigins = [
      process.env.CLIENT_URL,
      'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
      'http://localhost:3000',
      'http://localhost:4200',
      'http://localhost:5173',
      'http://localhost:7000',{{#if (eq framework "tanstack-start")}}
      // TanStack Start can use different ports{{/if}}
    ].filter(Boolean);
    
    // Check for exact matches
    if (allowedOrigins.includes(origin)) {
      return callback(null, origin);
    }
    
    {{#if (includes powerups "ngrok")}}
    // Check for ngrok domains
    if (origin.match(/^https?:\/\/[a-z0-9-]+\.(ngrok-free\.app|ngrok\.app|ngrok\.io)$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    {{#if (includes powerups "cloudflare-tunnel")}}
    // Check for Cloudflare tunnel domains
    if (origin.match(/\.trycloudflare\.com$/)) {
      return callback(null, origin);
    }
    {{/if}}
    
    // Check for custom CLIENT_URL
    if (process.env.CLIENT_URL && origin === process.env.CLIENT_URL) {
      return callback(null, origin);
    }
    
    // Reject other origins
    callback(new Error('Not allowed by CORS'));
  },
  {{else}}
  origin: process.env.CLIENT_URL?.split(',') || [
    'http://localhost:{{#if (eq framework "next")}}3000{{else if (eq framework "nuxt")}}3000{{else if (eq framework "remix")}}3000{{else if (eq framework "tanstack-start")}}3000{{else if (eq framework "astro")}}4321{{else if (eq framework "angular")}}4200{{else if (eq framework "vue")}}5173{{else if (eq framework "react")}}5173{{else if (eq framework "vite")}}5173{{else if (eq framework "svelte")}}5173{{else if (eq framework "solid")}}3000{{else}}5173{{/if}}',
    'http://localhost:3000',
    'http://localhost:4200',
    'http://localhost:5173',
    'http://localhost:7000',{{#if (eq framework "tanstack-start")}}
    // TanStack Start can use different ports{{/if}}
  ],
  {{/if}}
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'{{#if (includes powerups "ngrok")}}, 'ngrok-skip-browser-warning'{{/if}}],
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.get('/api/health', (req: Request, res: Response) => {
  res.json({ 
    status: 'ok', 
    message: '{{config.name}} API is running',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/hello', (req: Request, res: Response) => {
  res.json({ 
    message: 'Hello from {{config.name}} API!',
    version: '1.0.0'
  });
});

// 404 handler
app.use('*', (req: Request, res: Response) => {
  res.status(404).json({ 
    error: 'Route not found',
    path: req.originalUrl
  });
});

// Error handler
app.use((err: Error, req: Request, res: Response, next: any) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“‹ Health check: http://localhost:${PORT}/api/health`);
});