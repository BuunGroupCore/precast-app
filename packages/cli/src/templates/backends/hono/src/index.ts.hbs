import { serve } from "@hono/node-server";
import { Hono } from "hono";
import { cors } from "hono/cors";
import { logger } from "hono/logger";
import { prettyJSON } from "hono/pretty-json";
import { config } from "dotenv";

{{#if (eq database "postgres" && eq orm "prisma")}}import { prisma } from "@/lib/prisma";{{/if}}
{{#if (eq database "mongodb" && eq orm "mongoose")}}import { connectDB } from "@/lib/mongoose";{{/if}}
{{#if (eq apiClient "hono-rpc")}}import rpcApp from "@/routes/rpc";{{/if}}
{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
import healthApp from "@/api/routes/health{{#if typescript}}.js{{/if}}";
{{/if}}

config();

const app = new Hono();
const PORT = parseInt(process.env.PORT || "3001", 10);

// Middleware
app.use("*", logger());
app.use("*", cors({
  origin: process.env.CLIENT_URL || "http://localhost:5173",
  credentials: true,
}));
app.use("*", prettyJSON());

{{#if (or (and plugins plugins.length) (and database (ne database 'none')))}}
// Mount health routes
app.route("/api", healthApp);
{{else}}
// Health check
app.get("/api/health", async (c) => {
  {{#if (and (eq database "postgres") (eq orm "prisma"))}}
  try {
    await prisma.$queryRaw`SELECT 1`;
    return c.json({ 
      status: "ok", 
      message: "{{name}} API is running",
      database: "connected",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    return c.json({ 
      status: "error", 
      message: "Database connection failed",
      timestamp: new Date().toISOString()
    }, 500);
  }
  {{else if (and (eq database "mongodb") (eq orm "mongoose"))}}
  try {
    await connectDB();
    return c.json({ 
      status: "ok", 
      message: "{{name}} API is running",
      database: "connected",
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    return c.json({ 
      status: "error", 
      message: "Database connection failed",
      timestamp: new Date().toISOString()
    }, 500);
  }
  {{else}}
  return c.json({ 
    status: "ok", 
    message: "{{name}} API is running",
    timestamp: new Date().toISOString()
  });
  {{/if}}
});
{{/if}}

// Example API route
app.get("/api/hello", (c) => {
  return c.json({ 
    message: "Hello from {{name}} API!",
    version: "1.0.0"
  });
});

{{#if (eq config.apiClient "hono-rpc")}}
// Mount RPC routes
app.route("/api", rpcApp);
{{/if}}

// 404 handler
app.notFound((c) => {
  return c.json({ 
    error: "Route not found",
    path: c.req.path
  }, 404);
});

// Error handler
app.onError((err, c) => {
  console.error("Error:", err);
  return c.json({ 
    error: "Internal server error",
    message: process.env.NODE_ENV === "development" ? err.message : "Something went wrong"
  }, 500);
});

// Start server
serve({
  fetch: app.fetch,
  port: PORT,
}, (info) => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
  console.log(`ðŸ“‹ Health check: http://localhost:${PORT}/api/health`);
});

// Export type for RPC client
export type AppType = typeof app;
export default app;