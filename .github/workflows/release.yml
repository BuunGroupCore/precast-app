name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_only:
        description: "Deploy to Cloudflare Pages only (skip release)"
        required: false
        default: false
        type: boolean

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release PR
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.deploy_only)
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        continue-on-error: true
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token || secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Packages in Order
        run: |
          echo "Cleaning TypeScript build cache..."
          rm -f packages/*/tsconfig.tsbuildinfo
          echo "Building UI package..."
          pnpm --filter @precast/ui run build
          echo "Contents of UI dist folder:"
          ls -la packages/ui/dist/ || echo "UI dist folder not found"
          echo "Building CLI..."
          pnpm --filter create-precast-app run build
          echo "Building website..."
          pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
          commit: "chore: release packages"
          title: "chore: release packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token || secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}

      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Get versions from all packages
          CLI_VERSION=$(node -p "require('./packages/cli/package.json').version")
          WEBSITE_VERSION=$(node -p "require('./packages/website/package.json').version")
          
          # Use CLI version as the main version since it's the primary package
          RELEASE_TAG="v${CLI_VERSION}"
          
          # Check if tag already exists
          if git rev-parse "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Tag ${RELEASE_TAG} already exists, skipping release creation"
            exit 0
          fi
          
          # Create release archives
          echo "📦 Creating release archives..."
          
          # Full repository archive with all built assets
          tar --exclude='.git' \
              --exclude='node_modules' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.turbo' \
              -czf precast-app-${RELEASE_TAG}.tar.gz .
          
          # Create release notes
          cat > RELEASE.md << EOF
          # Precast App ${RELEASE_TAG}
          
          ## Package Versions
          - **CLI**: v${CLI_VERSION} [\`npm: create-precast-app\`](https://www.npmjs.com/package/create-precast-app/v/${CLI_VERSION})
          - **Website**: v${WEBSITE_VERSION}
          
          ## Installation
          
          ### Quick Start
          \`\`\`bash
          npx create-precast-app@${CLI_VERSION} my-app
          \`\`\`
          
          ### Global Installation
          \`\`\`bash
          npm install -g create-precast-app@${CLI_VERSION}
          create-precast-app my-app
          \`\`\`
          
          ### Build from Source
          \`\`\`bash
          # Download and extract this release
          tar -xzf precast-app-${RELEASE_TAG}.tar.gz
          cd precast-app
          pnpm install
          pnpm build
          
          # Link CLI globally
          cd packages/cli
          npm link
          \`\`\`
          
          ## Docker Images
          \`\`\`bash
          # Coming soon
          docker pull ghcr.io/bunnygroupcore/precast-app:${RELEASE_TAG}
          \`\`\`
          
          ## Verify Release
          \`\`\`bash
          # Verify npm package
          npm view create-precast-app@${CLI_VERSION}
          
          # Verify git tag
          git ls-remote --tags https://github.com/BunnGroupCore/precast-app.git ${RELEASE_TAG}
          \`\`\`
          
          ---
          **Full Changelog**: https://github.com/BunnGroupCore/precast-app/compare/v${CLI_VERSION}...${RELEASE_TAG}
          **Commit**: \`${GITHUB_SHA}\`
          EOF
          
          # Create git tag and GitHub release with the tag
          # This creates both a lightweight tag and a GitHub release pointing to it
          echo "🏷️ Creating tag ${RELEASE_TAG} and GitHub release..."
          gh release create "${RELEASE_TAG}" \
            --title "Precast App ${RELEASE_TAG}" \
            --notes-file RELEASE.md \
            --verify-tag \
            precast-app-${RELEASE_TAG}.tar.gz
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token || secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  check-changes:
    name: Check for Website Changes
    runs-on: ubuntu-latest
    outputs:
      website-changed: ${{ steps.filter.outputs.website }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for website changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            website:
              - 'packages/website/**'

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: check-changes
    if: |
      always() && 
      (github.event_name == 'workflow_dispatch' || 
       (github.event_name == 'push' && needs.check-changes.outputs.website-changed == 'true'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.1

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Packages in Order
        run: |
          echo "Cleaning TypeScript build cache..."
          rm -f packages/*/tsconfig.tsbuildinfo
          echo "Building UI package..."
          pnpm --filter @precast/ui run build
          echo "Contents of UI dist folder:"
          ls -la packages/ui/dist/ || echo "UI dist folder not found"
          echo "Building website..."
          pnpm --filter website build
        env:
          VITE_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
          VITE_PUBLIC_POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

      - name: Install Wrangler
        run: pnpm add -w -D wrangler@3

      - name: Deploy to Cloudflare Pages
        run: |
          pnpm exec wrangler pages project create precast-website --production-branch=main || true
          pnpm exec wrangler pages deploy packages/website/dist --project-name=precast-website
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update PostHog with deployment
        run: |
          curl -X POST ${{ secrets.POSTHOG_HOST }}/capture/ \
            -H 'Content-Type: application/json' \
            -d '{
              "api_key": "${{ secrets.POSTHOG_API_KEY }}",
              "event": "website_deployed",
              "properties": {
                "environment": "production",
                "commit": "${{ github.sha }}",
                "deployment_platform": "cloudflare_pages"
              },
              "distinct_id": "github-actions"
            }'
