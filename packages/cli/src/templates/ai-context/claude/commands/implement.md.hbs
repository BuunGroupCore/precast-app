---
description: Implement a new feature following project conventions
allowed-tools: Read, Write, Edit, Glob, Grep, Task
---

Implement a new feature for this {{framework}} project following established patterns and modern best practices.

## Research-Driven Implementation Process

### Phase 1: Context and Pattern Analysis
Before implementing, ensure you:
1. Read @README.md for project structure
2. Read @CLAUDE.md for coding guidelines
3. Study similar existing features for patterns
4. Check {{#if typescript}}types in src/types{{else}}existing interfaces{{/if}}

### Phase 2: Research Best Practices
**Research modern implementation patterns** using the web-research agent:

```
Use the Task tool to spawn the web-research agent:

Research modern implementation patterns and best practices for: $ARGUMENTS

Focus research on:
- {{framework}} implementation patterns 2024
- Component/feature architecture best practices
- Performance optimization for {{framework}} features
- Accessibility implementation standards
- Testing strategies for new features
{{#if authProvider}}- {{authProvider}} integration patterns{{/if}}
{{#if database}}- {{database}} data layer best practices{{/if}}

Provide evidence-based implementation examples and patterns.
```

### Phase 3: Multi-Agent Planning
**Launch parallel agents for comprehensive planning:**

```
Use Task tool to spawn multiple agents simultaneously:

1. **web-research agent**:
   Research latest {{framework}} implementation patterns and modern development practices

2. **architecture-guide agent**:
   Plan architectural integration and ensure consistency with project structure for: $ARGUMENTS

3. **standards-enforcer agent**:
   Define code quality requirements and linting standards for implementation

Synthesize findings into unified implementation strategy.
```

### Implementation Steps

#### 1. Understand Context (Research-Enhanced)
```
Examine existing patterns and research findings:
- Similar components/features (existing + researched patterns)
- Current file organization (validated against modern standards)
- Styling approach ({{styling}} + latest best practices)
- State management patterns (current + modern approaches)
{{#if authProvider}}- Authentication flow (current + security best practices){{/if}}
{{#if database}}- Data fetching patterns (current + performance optimizations){{/if}}
```

#### 2. Plan Implementation (Research-Informed)
Use architecture-guide agent with research backing:
```
Based on project architecture and researched best practices, plan the implementation of: $ARGUMENTS

Consider:
- Modern architectural patterns from research
- Performance implications and optimizations
- Security considerations and latest practices
- Accessibility requirements and standards
- Testing strategy and coverage requirements
```

### 3. Create Feature
Following the exact patterns found in existing code:
- Use the same file naming convention
- Follow the same component structure
- Apply consistent styling approach
- Maintain type safety {{#if typescript}}with TypeScript{{/if}}

### 4. Integrate Feature
- Update routing if needed
- Add to relevant parent components
- Connect to state management if required
{{#if backend}}- Create API endpoints if needed{{/if}}

### 5. Test Implementation
- Verify functionality works as expected
- Check for console errors
- Ensure consistent UX with rest of app
{{#if typescript}}- Run type checking{{/if}}

## Standards to Follow

- **Components**: {{#if (eq framework "react")}}Functional with hooks{{else if (eq framework "vue")}}Composition API{{else if (eq framework "angular")}}Class-based with decorators{{/if}}
- **Styling**: {{#if (eq styling "tailwind")}}Tailwind utilities{{else if (eq styling "css-modules")}}CSS Modules{{else}}{{styling}}{{/if}}
- **State**: {{#if (eq framework "react")}}useState/useContext{{else if (eq framework "vue")}}ref/reactive{{else}}Framework patterns{{/if}}
{{#if authProvider}}- **Auth**: {{authProvider}} integration{{/if}}
{{#if database}}- **Data**: {{#if orm}}{{orm}}{{else}}Direct queries{{/if}}{{/if}}

Remember: Consistency with existing code is paramount. When in doubt, follow the patterns already established in the codebase.